
// File generated by darts version N-2018.03#7d02e3ca79#180723, Fri Jan 11 21:39:41 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// darts -B -I/users/benacer/Desktop/sha256_orig/sha256/lib +p -d -h -I/users/benacer/Desktop/sha256_orig/sha256/lib/runtime/include -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -L +Ihex +u Release/sort tlx

// Release: ipd N-2018.03-SP3
.label _main_init
.function _main_init _main_init
.src_ref 0 "tlx_init.s" 5 first
	     0      "01001000000000010000000000000000" // 	lhi r1, #0
.src_ref 0 "tlx_init.s" 6 first
	     1      "01010100001000011000000000000000" // 	ori r1,r1,#32768
.src_ref 0 "tlx_init.s" 7 first
	     2      "00000000000000000000000000000000" // 	nop
.label _main
.function main _main
.src_ref 1 "sort.c" 40 first
.src_ref 1 "sort.c" 40 5
	     3      "00001000001000010000000000001100" // 	addi r1,r1,#12
.src_ref 1 "sort.c" 42 9
	     4      "01010100000001000000000000101100" // 	ori r4,r0,#44
	     5      "10101000001000101111111111111000" // 	sw r2,-8(r1)
.src_ref 1 "sort.c" 42 2 first
	     6      "00101000000000000000000010000110" // 	jal #134
.delay_slot
.swstall delay_slot
	     7      "00000000000000000000000000000000" // 	nop
.return_address
	     8      "01010100000001000000000000000100" // 	ori r4,r0,#4
	     9      "01001000000001010000000000000000" // 	lhi r5, #0
	    10      "01001000000000110000000000000000" // 	lhi r3, #0
	    11      "10101000001001001111111111110100" // 	sw r4,-12(r1)
	    12      "01010100101001010000000000010010" // 	ori r5,r5,#18
	    13      "01010100011000110000000000011000" // 	ori r3,r3,#24
.src_ref 1 "sort.c" 43 2 first
	    14      "10111100000000000000000000001010" // 	bor lc,r0,#10
.src_ref 1 "sort.c" 43 2
	    15      "10111100101000010000000000000000" // 	bor ls,r5,#0
.src_ref 1 "sort.c" 43 2
	    16      "10111100011000100000000000000000" // 	bor le,r3,#0
.src_ref 1 "sort.c" 43 38
	    17      "01010100000001000000000000110110" // 	ori r4,r0,#54
.src_ref 1 "sort.c" 43 55
.begin_of_loop
	    18      "01010000001000111111111111110100" // 	lw r3,-12(r1)
.src_ref 1 "sort.c" 43 55
	    19      "00000000011001010010000000110100" // 	lw r5,(r3+=4)
	    20      "10101000001001011111111111111100" // 	sw r5,-4(r1)
	    21      "10101000001000111111111111110100" // 	sw r3,-12(r1)
.src_ref 1 "sort.c" 43 31
	    22      "00101000000000000000000001110110" // 	jal #118
.delay_slot
.swstall delay_slot
	    23      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 43 38
.end_of_loop
.return_address
	    24      "01010100000001000000000000110110" // 	ori r4,r0,#54
.src_ref 1 "sort.c" 44 9
	    25      "01010100000001000000000000111010" // 	ori r4,r0,#58
.src_ref 1 "sort.c" 44 2 first
	    26      "00101000000000000000000001110010" // 	jal #114
.delay_slot
.swstall delay_slot
	    27      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 45 17
.return_address
	    28      "01010100000001000000000000000100" // 	ori r4,r0,#4
.src_ref 1 "sort.c" 43 2
	    29      "01010100000001010000000000001010" // 	ori r5,r0,#10
.src_ref 1 "sort.c" 45 2 first
.no_stack_arguments
	    30      "00101000000000000000000000110011" // 	jal #51
.delay_slot
.swstall delay_slot
	    31      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 46 9
.return_address
	    32      "01010100000001000000000000111100" // 	ori r4,r0,#60
.src_ref 1 "sort.c" 46 2 first
	    33      "00101000000000000000000001101011" // 	jal #107
.delay_slot
.swstall delay_slot
	    34      "00000000000000000000000000000000" // 	nop
.return_address
	    35      "01010100000001000000000000000100" // 	ori r4,r0,#4
	    36      "01001000000001010000000000000000" // 	lhi r5, #0
	    37      "01001000000000110000000000000000" // 	lhi r3, #0
	    38      "10101000001001001111111111110100" // 	sw r4,-12(r1)
	    39      "01010100101001010000000000101101" // 	ori r5,r5,#45
	    40      "01010100011000110000000000110011" // 	ori r3,r3,#51
.src_ref 1 "sort.c" 47 2 first
	    41      "10111100000000000000000000001010" // 	bor lc,r0,#10
.src_ref 1 "sort.c" 47 2
	    42      "10111100101000010000000000000000" // 	bor ls,r5,#0
.src_ref 1 "sort.c" 47 2
	    43      "10111100011000100000000000000000" // 	bor le,r3,#0
.src_ref 1 "sort.c" 47 38
	    44      "01010100000001000000000000110110" // 	ori r4,r0,#54
.src_ref 1 "sort.c" 47 55
.begin_of_loop
	    45      "01010000001000111111111111110100" // 	lw r3,-12(r1)
.src_ref 1 "sort.c" 47 55
	    46      "00000000011001010010000000110100" // 	lw r5,(r3+=4)
	    47      "10101000001001011111111111111100" // 	sw r5,-4(r1)
	    48      "10101000001000111111111111110100" // 	sw r3,-12(r1)
.src_ref 1 "sort.c" 47 31
	    49      "00101000000000000000000001011011" // 	jal #91
.delay_slot
.swstall delay_slot
	    50      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 47 38
.end_of_loop
.return_address
	    51      "01010100000001000000000000110110" // 	ori r4,r0,#54
.src_ref 1 "sort.c" 48 9
	    52      "01010100000001000000000000111010" // 	ori r4,r0,#58
.src_ref 1 "sort.c" 48 2 first
	    53      "00101000000000000000000001010111" // 	jal #87
.delay_slot
.swstall delay_slot
	    54      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 49
.return_address
	    55      "01010000001001001111111111111000" // 	lw r4,-8(r1)
.src_ref 1 "sort.c" 49 first
.end_of_main
.rts 172
	    56      "00110000100000000000000000000000" // 	jr r4
.src_ref 1 "sort.c" 49
.delay_slot
	    57      "00001000001000011111111111110100" // 	addi r1,r1,#-12
.delay_slot
.swstall delay_slot
	    58      "00000000000000000000000000000000" // 	nop
.label __sint_find_min_location___P__sint___sint___sint
.function find_min_location __sint_find_min_location___P__sint___sint___sint
.src_ref 1 "sort.c" 9 first
	    59      "00000000110001010011000000011000" // 	sub r6,r6,r5
	    60      "10001000101000110000000000000010" // 	slli r3,r5,#2
	    61      "01001000000010000000000000000000" // 	lhi r8, #0
	    62      "01001000000001110000000000000000" // 	lhi r7, #0
.src_ref 1 "sort.c" 13 4 first
	    63      "10111100110000000000000000000000" // 	bor lc,r6,#0
	    64      "00000000011001000010000000000001" // 	add r4,r3,r4
	    65      "01010101000010000000000001000111" // 	ori r8,r8,#71
	    66      "01010100111001110000000001001110" // 	ori r7,r7,#78
.src_ref 1 "sort.c" 13 4
	    67      "10111101000000010000000000000000" // 	bor ls,r8,#0
.src_ref 1 "sort.c" 13 4
	    68      "10111100111000100000000000000000" // 	bor le,r7,#0
.src_ref 1 "sort.c" 11 12 first
	    69      "01010100000001100111111111111111" // 	ori r6,r0,#32767
.src_ref 1 "sort.c" 12 14 first
	    70      "00001000000000111111111111111111" // 	addi r3,r0,#-1
.src_ref 1 "sort.c" 14 6 first
.begin_of_loop
	    71      "00000000100001110010000000110100" // 	lw r7,(r4+=4)
.src_ref 1 "sort.c" 14 10
	    72      "00000000111001100100000000001100" // 	sge r8,r7,r6
.src_ref 1 "sort.c" 14 1
	    73      "00100001000000000000000000000011" // 	bnez r8,#3
.delay_slot
.swstall delay_slot
	    74      "00000000000000000000000000000000" // 	nop
.delay_slot
.swstall delay_slot
	    75      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 14 10
	    76      "01010100111001100000000000000000" // 	ori r6,r7,#0
.src_ref 1 "sort.c" 19 11
	    77      "01010100101000110000000000000000" // 	ori r3,r5,#0
.src_ref 1 "sort.c" 13 34
.end_of_loop
	    78      "00001000101001010000000000000001" // 	addi r5,r5,#1
.src_ref 1 "sort.c" 19 4 first
.rts 172
	    79      "00110000010000000000000000000000" // 	jr r2
.delay_slot
.swstall delay_slot
	    80      "00000000000000000000000000000000" // 	nop
.delay_slot
.swstall delay_slot
	    81      "00000000000000000000000000000000" // 	nop
.label void_sort___P__sint___sint
.function sort void_sort___P__sint___sint
.src_ref 1 "sort.c" 24 first
.src_ref 1 "sort.c" 24 5
	    82      "00001000001000010000000000011000" // 	addi r1,r1,#24
.src_ref 1 "sort.c" 26 4 first
	    83      "00001000101000111111111111111111" // 	addi r3,r5,#-1
	    84      "10101000001000111111111111111000" // 	sw r3,-8(r1)
	    85      "10101000001001001111111111110100" // 	sw r4,-12(r1)
	    86      "10101000001001011111111111111100" // 	sw r5,-4(r1)
	    87      "10101000001000101111111111110000" // 	sw r2,-16(r1)
	    88      "01010100100001100000000000000000" // 	ori r6,r4,#0
	    89      "00100100000000000000000000010000" // 	j #16
.src_ref 1 "sort.c" 26 23
.delay_slot
	    90      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "sort.c" 27 33
	    91      "01010000001001101111111111111100" // 	lw r6,-4(r1)
	    92      "10101000001001011111111111101000" // 	sw r5,-24(r1)
.src_ref 1 "sort.c" 27 11 first
.no_stack_arguments
	    93      "00101011111111111111111111011101" // 	jal #-35
.delay_slot
.swstall delay_slot
	    94      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 29 9
.return_address
	    95      "01010000001001001111111111110100" // 	lw r4,-12(r1)
.src_ref 1 "sort.c" 29 10 first
	    96      "10001000011001010000000000000010" // 	slli r5,r3,#2
.src_ref 1 "sort.c" 29 9
	    97      "00000000100001010010100000000001" // 	add r5,r4,r5
.src_ref 1 "sort.c" 29 2
.src_ref 1 "sort.c" 28 13
	    98      "01010000001001101111111111101100" // 	lw r6,-20(r1)
.src_ref 1 "sort.c" 29 9
	    99      "01010000101010000000000000000000" // 	lw r8,0(r5)
.src_ref 1 "sort.c" 28 13 first
	   100      "01010000110000110000000000000000" // 	lw r3,0(r6)
	   101      "01010000001001111111111111101000" // 	lw r7,-24(r1)
.src_ref 1 "sort.c" 29 2 first
	   102      "00000000110010000010000000110111" // 	sw r8,(r6+=4)
.src_ref 1 "sort.c" 30 2 first
	   103      "10101000101000110000000000000000" // 	sw r3,0(r5)
	   104      "00001000111001010000000000000001" // 	addi r5,r7,#1
.src_ref 1 "sort.c" 26 23
	   105      "01010000001000111111111111111000" // 	lw r3,-8(r1)
.src_ref 1 "sort.c" 26 23 first
	   106      "00000000101000110001100000010011" // 	slt r3,r5,r3
.src_ref 1 "sort.c" 26 4
	   107      "00100000011000001111111111101110" // 	bnez r3,#-18
.delay_slot
	   108      "10101000001001101111111111101100" // 	sw r6,-20(r1)
.delay_slot
.swstall delay_slot
	   109      "00000000000000000000000000000000" // 	nop
.src_ref 1 "sort.c" 32
	   110      "01010000001001001111111111110000" // 	lw r4,-16(r1)
.src_ref 1 "sort.c" 32 first
.rts 172
	   111      "00110000100000000000000000000000" // 	jr r4
.src_ref 1 "sort.c" 32
.delay_slot
	   112      "00001000001000011111111111101000" // 	addi r1,r1,#-24
.delay_slot
.swstall delay_slot
	   113      "00000000000000000000000000000000" // 	nop
.label _hosted_clib_io
.function _hosted_clib_io _hosted_clib_io
.src_ref 2 "stdio.c" 93 first
.src_ref 3 "stdio.c" 83 first
.src_ref 2 "stdio.c" 95 first
	   114      "00000000000000000000000000000000" // 	nop
.src_ref 3 "stdio.c" 84 first
	   115      "00000000000000000000000000000000" // 	nop
.src_ref 3 "stdio.c" 85 first
	   116      "00000000000000000000000000000000" // 	nop
.src_ref 3 "stdio.c" 87 first
	   117      "00000000000000000000000000000000" // 	nop
.src_ref 2 "stdio.c" 96 17
	   118      "01010100000000110000000000010000" // 	ori r3,r0,#16
.src_ref 2 "stdio.c" 97 4 first
.rts 172
	   119      "00110000010000000000000000000000" // 	jr r2
.src_ref 2 "stdio.c" 96 5 first
.delay_slot
	   120      "10101000100000110000000000000000" // 	sw r3,0(r4)
.delay_slot
.swstall delay_slot
	   121      "00000000000000000000000000000000" // 	nop
.label __sint_vfprintf___PFILE___P__cchar___Pvoid
.function vfprintf __sint_vfprintf___PFILE___P__cchar___Pvoid
.src_ref 2 "stdio.c" 316 first
.src_ref 2 "stdio.c" 318 11
	   122      "01010100100000110000000000000000" // 	ori r3,r4,#0
.src_ref 2 "stdio.c" 316 4
	   123      "00001000001000010000000001001000" // 	addi r1,r1,#72
.src_ref 2 "stdio.c" 318 11 first
	   124      "01010000011010000000000000000000" // 	lw r8,0(r3)
.src_ref 2 "stdio.c" 318 11
	   125      "00001000001001001111111110111000" // 	addi r4,r1,#-72
.src_ref 2 "stdio.c" 318 11
	   126      "00001000000000111111111111111111" // 	addi r3,r0,#-1
.src_ref 2 "stdio.c" 318 11
	   127      "01010100000001110000000000000010" // 	ori r7,r0,#2
.src_ref 2 "stdio.c" 318 11
	   128      "10101000001010001111111110111100" // 	sw r8,-68(r1)
.src_ref 2 "stdio.c" 318 11
	   129      "10101000001001011111111111001100" // 	sw r5,-52(r1)
.src_ref 2 "stdio.c" 318 11
	   130      "10101000001001101111111111111000" // 	sw r6,-8(r1)
.src_ref 2 "stdio.c" 318 11
	   131      "10101000001000111111111111000000" // 	sw r3,-64(r1)
.src_ref 2 "stdio.c" 318 11
	   132      "10101000100001110000000000000000" // 	sw r7,0(r4)
	   133      "10101000001000101111111111111100" // 	sw r2,-4(r1)
.src_ref 2 "stdio.c" 318 11
.no_stack_arguments
	   134      "00101011111111111111111111101011" // 	jal #-21
.delay_slot
.swstall delay_slot
	   135      "00000000000000000000000000000000" // 	nop
.src_ref 2 "stdio.c" 318 11
.return_address
	   136      "01010000001000111111111111000000" // 	lw r3,-64(r1)
.src_ref 2 "stdio.c" 318 4
	   137      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.src_ref 2 "stdio.c" 318 4
.rts 172
	   138      "00110000100000000000000000000000" // 	jr r4
.src_ref 2 "stdio.c" 318 4
.delay_slot
	   139      "00001000001000011111111110111000" // 	addi r1,r1,#-72
.delay_slot
.swstall delay_slot
	   140      "00000000000000000000000000000000" // 	nop
.label __sint_printf___P__cchar
.function printf __sint_printf___P__cchar
.src_ref 2 "stdio.c" 330 first
.src_ref 2 "stdio.c" 334 13
	   141      "01010100100001010000000000000000" // 	ori r5,r4,#0
.src_ref 2 "stdio.c" 334 13 first
	   142      "01010000000001000000000101001100" // 	lw r4,332(r0)
.src_ref 2 "stdio.c" 330 4
	   143      "00001000001001100000000000000000" // 	addi r6,r1,#0
.src_ref 2 "stdio.c" 334 13
.tail_call
	   144      "00100111111111111111111111101001" // 	j #-23
.delay_slot
.swstall delay_slot
	   145      "00000000000000000000000000000000" // 	nop
.dir 0 "%PROCDIR%"
.dir 1 "/users/benacer/Desktop/sha256_orig/sha256/sort"
.dir 2 "%PROCDIR%/runtime/src"
.dir 3 "%PROCDIR%/runtime/%PROCDIR%/runtime/src"
