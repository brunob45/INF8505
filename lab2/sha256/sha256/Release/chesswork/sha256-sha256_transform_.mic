
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:34:50 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../lib -I../../../lib/isg -r +f +i sha256-sha256_transform_ tlx


// m6;   next: m14 (next offset: 20)
000000  1 0  "01001000000011010000000000011100"   // (R[13]) = lhi_const_1_B1 (28); 
000001  1 0  "01001000000011100000000000010100"   // (R[14]) = lhi_const_1_B1 (20); 
000002  1 0  "00001000001000010000000100100000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_2_B1 (288,SP,SP); 
000003  1 0  "01010101101011010000000000011100"   // (R[13]) = w32_const_bor_1_B1 (R[13],28); 
000004  1 0  "01010101110011100000000000010100"   // (R[14]) = w32_const_bor_1_B1 (R[14],20); 
000005  1 0  "10111101101000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[13]); 
000006  1 0  "10111101110000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[14]); 
000007  1 0  "10101000001001111111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[7],SP,-24); 
000008  1 0  "00001000001011011111111011100000"   // (R[13],MC) = _pl_rd_res_reg_const_1_B1 (-288,SP); 
000009  1 0  "01010100100011100000000000000000"   // R[14] = R[4]; 
000010  1 0  "10111100000000000000000000010000"   // (LC) = wr_res_reg_const_1_B1 (16); 
000011  1 0  "10101000001011001111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[12],SP,-4); 
000012  1 0  "10101000001010111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[11],SP,-8); 
000013  1 0  "10101000001010101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[10],SP,-12); 
000014  1 0  "10101000001010011111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[9],SP,-16); 
000015  1 0  "10101000001010001111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[8],SP,-20); 
000016  1 0  "10101000001001101111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[6],SP,-28); 
000017  1 0  "10101000001001011111111111100000"   // (__spill_DMw[-32]) = stack_store_bndl_B3 (R[5],SP,-32); 
000018  1 0  "01001000000001110000000000000000"   // (R[7]) = const_2_B3 (); 
000019  1 0  "01010101101011110000000000000000"   // R[15] = R[13]; 

// m14;   next: m19, loop target: m14 (next offset: 29)
000020  1 0  "00000001110000110000100000110001"   // (RA,R[14]) = load__pl_const_3_B1 (R[14],DMb,DMb,DMb_stat); 
000021  1 0  "00000001110001000000100000110001"   // (RB,R[14]) = load__pl_const_3_B1 (R[14],DMb,DMb,DMb_stat); 
000022  1 0  "00000001110001010000100000110001"   // (RC,R[14]) = load__pl_const_3_B1 (R[14],DMb,DMb,DMb_stat); 
000023  1 0  "01010100111010000000000000000000"   // RF = R[7]; 
000024  1 0  "00000001110001100000100000110001"   // (RD,R[14]) = load__pl_const_3_B1 (R[14],DMb,DMb,DMb_stat); 
000025  1 0  "00000000000000000000000000100111"   // (RE) = sha256_in2_1_B1 (RA,RB,RC,RD); 
000026  1 0  "00000001111001110010000000110111"   // (R[15],DMb[-288]) = store__pl_const_1_B1 (RE,R[15],DMb[-288]); 
000027  1 0  "01010101000001000000000000000000"   // R[4] = RF; 
000028  1 0  "00001000100001110000000000000001"   // (R[7],MC) = _pl_const_1_B1 (R[4]); 

// m19;   next: m62, jump target: m30 (next offset: 42)
000029  1 0  "10001000111001010000000000000010"   // (R[5]) = _ls_const_1_B1 (R[7]); 
000030  1 0  "10001000111010000000000000000010"   // (R[8]) = _ls_const_1_B1 (R[7]); 
000031  1 0  "00001000001011111111111010100100"   // (R[15],MC) = _pl_rd_res_reg_const_1_B1 (-348,SP); 
000032  1 0  "00001000001010011111111010100000"   // (R[9],MC) = _pl_rd_res_reg_const_1_B1 (-352,SP); 
000033  1 0  "01110000111001100000000001000000"   // (R[6]) = _ge_const_1_B1 (R[7]); 
000034  1 0  "00000001000011010100000000000001"   // (R[8],) = _pl_1_B1 (R[13],R[8]); 
000035  1 0  "00000000101011110111100000000001"   // (R[15],) = _pl_1_B1 (R[15],R[5]); 
000036  1 0  "00000000101010010100100000000001"   // (R[9],) = _pl_1_B1 (R[9],R[5]); 
000037  1 0  "00001000001001001111111011011000"   // (R[4],MC) = _pl_rd_res_reg_const_1_B1 (-296,SP); 
000038  1 0  "00001000001011101111111011000100"   // (R[14],MC) = _pl_rd_res_reg_const_1_B1 (-316,SP); 
000039  1 0  "00100000110000000000000000010110"   // () = nez_br_const_1_B1 (R[6],22); 
000040  1 0  "00000000101011100111000000000001"   // (R[14],) = _pl_1_B1 (R[14],R[5]); 
000041  1 0  "00000000100001010001100000000001"   // (R[3],) = _pl_1_B1 (R[4],R[5]); 

// m62;   next: m26 (next offset: 51)
000042  1 0  "01010100000001100000000001000000"   // (R[6]) = const_1_B2 (); 
000043  1 0  "00000000110001110011000000011000"   // (R[6],MC) = _mi_1_B1 (R[6],R[7]); 
000044  1 0  "01001000000001010000000000110011"   // (R[5]) = lhi_const_1_B1 (51); 
000045  1 0  "01001000000001000000000000111011"   // (R[4]) = lhi_const_1_B1 (59); 
000046  1 0  "01010100101001010000000000110011"   // (R[5]) = w32_const_bor_1_B1 (R[5],51); 
000047  1 0  "01010100100001110000000000111011"   // (R[7]) = w32_const_bor_1_B1 (R[4],59); 
000048  1 0  "10111100110000000000000000000000"   // (LC) = wr_res_reg_3_B1 (R[6]); 
000049  1 0  "10111100101000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[5]); 
000050  1 0  "10111100111000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[7]); 

// m26;   next: m63, loop target: m26 (next offset: 60)
000051  1 0  "01010100011001110000000000000000"   // R[7] = R[3]; 
000052  1 0  "00000001110001000010000000110100"   // (RB,R[14]) = load__pl_const_2_B1 (R[14],DMb[-288]); 
000053  1 0  "00000000111000110010000000110100"   // (RA,R[7]) = load__pl_const_2_B1 (R[7],DMb[-288]); 
000054  1 0  "01010100111010100000000000000000"   // RH = R[7]; 
000055  1 0  "00000001111001010010000000110100"   // (RC,R[15]) = load__pl_const_2_B1 (R[15],DMb[-288]); 
000056  1 0  "00000001001001100010000000110100"   // (RD,R[9]) = load__pl_const_2_B1 (R[9],DMb[-288]); 
000057  1 0  "00000000000000000000000000100110"   // (RE) = sha256_in1_1_B1 (RA,RB,RC,RD); 
000058  1 0  "00000001000001110010000000110111"   // (R[8],DMb[-288]) = store__pl_const_1_B1 (RE,R[8],DMb[-288]); 
000059  1 0  "01010101010000110000000000000000"   // R[3] = RH; 

// m63, jump target: m60 (next offset: 63)
000060  1 0  "01010000001010001111111111110100"   // (RF) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000061  1 0  "00100100000000000000000000000011"   // () = j_const_1_B1 (3); 
000062  1 0  "01010000001010011111111111111000"   // (RG) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 

// m30;   next: m60 (next offset: 65)
000063  1 0  "01010000001010011111111111111000"   // (RG) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000064  1 0  "01010000001010001111111111110100"   // (RF) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 

// m60;   next: m40 (next offset: 80)
000065  1 0  "01001000000010100000000001010000"   // (R[10]) = lhi_const_1_B1 (80); 
000066  1 0  "01010101010010100000000001010000"   // (R[10]) = w32_const_bor_1_B1 (R[10],80); 
000067  1 0  "01001000000011110000000001010010"   // (R[15]) = lhi_const_1_B1 (82); 
000068  1 0  "01001000000011100000000000000000"   // (R[14]) = lhi_const_1_B1 (0); 
000069  1 0  "10111101010000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[10]); 
000070  1 0  "01010101111011110000000001010010"   // (R[15]) = w32_const_bor_1_B1 (R[15],82); 
000071  1 0  "01010101110011100000000000000000"   // (R[14]) = w32_const_bor_1_B1 (R[14],0); 
000072  1 0  "10111100000000000000000001000000"   // (LC) = wr_res_reg_const_1_B1 (64); 
000073  1 0  "10111101111000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[15]); 
000074  1 0  "01010000001001111111111111110000"   // (RE) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000075  1 0  "01010000001001101111111111101100"   // (RD) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000076  1 0  "01010000001001011111111111101000"   // (RC) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000077  1 0  "01010000001001001111111111100100"   // (RB) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000078  1 0  "01010000001000111111111111100000"   // (RA) = stack_load_bndl_B3 (__spill_DMw[-32],SP,-32); 
000079  1 0  "01010000001010101111111111111100"   // (RH) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m40;   next: m47, loop target: m40 (next offset: 83)
000080  1 0  "00000001110010110010000000110100"   // (R11,R[14]) = load__pl_const_1_B1 (R[14],DMb_stat); 
000081  1 0  "00000001101011000010000000110100"   // (R12,R[13]) = load__pl_const_2_B1 (R[13],DMb[-288]); 
000082  1 0  "00000000000000000000000000100101"   // (RA,RB,RC,RD,RE,RF,RG,RH) = sha256_ci_1_B1 (RA,RB,RC,RD,RE,RF,RG,RH,R11,R12); 

// m47 (next offset: /)
000083  1 0  "01010000001011011111111111111100"   // (R[13]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000084  1 0  "00000001010011010110000000000001"   // (R[12],) = _pl_1_B1 (R[13],RH); 
000085  1 0  "01010000001011101111111111111000"   // (R[14]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000086  1 0  "00000001001011100101100000000001"   // (R[11],) = _pl_1_B1 (R[14],RG); 
000087  1 0  "01010000001011011111111111110000"   // (R[13]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000088  1 0  "00000000111011010100100000000001"   // (R[9],) = _pl_1_B1 (R[13],RE); 
000089  1 0  "01010000001011101111111111110100"   // (R[14]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000090  1 0  "00000001000011100101000000000001"   // (R[10],) = _pl_1_B1 (R[14],RF); 
000091  1 0  "01010000001001111111111111100000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-32],SP,-32); 
000092  1 0  "01010000001011111111111111101000"   // (R[15]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000093  1 0  "01010100111010000000000000000000"   // RF = R[7]; 
000094  1 0  "00000000101011110011100000000001"   // (R[7],) = _pl_1_B1 (R[15],RC); 
000095  1 0  "01010000001011011111111111101100"   // (R[13]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000096  1 0  "01010000001011101111111111100100"   // (R[14]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000097  1 0  "01010101000001010000000000000000"   // R[5] = RF; 
000098  1 0  "00001000001000011111111011100000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (-288,SP,SP); 
000099  1 0  "00000000011001010010100000000001"   // (R[5],) = _pl_1_B1 (R[5],RA); 
000100  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000101  1 0  "00000000110011010100000000000001"   // (R[8],) = _pl_1_B1 (R[13],RD); 
000102  1 0  "00000000100011100011000000000001"   // (R[6],) = _pl_1_B1 (R[14],RB); 

