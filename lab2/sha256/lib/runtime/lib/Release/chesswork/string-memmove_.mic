
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:35:32 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i string-memmove_ tlx


// m5;   next: m23, jump target: m9 (next offset: 4)
000000  1 0  "00000000100001010100000000010001"   // (R[8]) = _le_1_B1 (R[4],R[5]); 
000001  1 0  "00100001000000000000000000010011"   // () = nez_br_const_1_B1 (R[8],19); 
000002  1 0  "01010100100000110000000000000000"   // R[3] = R[4]; 
000003  1 0  "00001000110001111111111111111111"   // (R[7],MC) = _pl_const_2_B1 (R[6]); 

// m23;   next: m42, jump target: m38 (next offset: 8)
000004  1 0  "00000000111000000010000000010011"   // (R[4]) = _lt_const_1_B2 (R[7]); 
000005  1 0  "00100000100000000000000000011111"   // () = nez_br_const_1_B1 (R[4],31); 
000006  1 0  "00000000011001110011000000000001"   // (R[6],) = _pl_1_B1 (R[3],R[7]); 
000007  1 0  "00000000101001110010100000000001"   // (R[5],) = _pl_1_B1 (R[5],R[7]); 

// m42;   next: m30 (next offset: 16)
000008  1 0  "01001000000010000000000000010000"   // (R[8]) = lhi_const_1_B1 (16); 
000009  1 0  "01001000000001000000000000010010"   // (R[4]) = lhi_const_1_B1 (18); 
000010  1 0  "00001000111001110000000000000001"   // (R[7],MC) = _pl_const_1_B1 (R[7]); 
000011  1 0  "01010101000010000000000000010000"   // (R[8]) = w32_const_bor_1_B1 (R[8],16); 
000012  1 0  "01010100100001000000000000010010"   // (R[4]) = w32_const_bor_1_B1 (R[4],18); 
000013  1 0  "10111100111000000000000000000000"   // (LC) = wr_res_reg_1_B1 (R[7]); 
000014  1 0  "10111101000000010000000000000000"   // (LS) = wr_res_reg_2_B1 (R[8]); 
000015  1 0  "10111100100000100000000000000000"   // (LE) = wr_res_reg_3_B1 (R[4]); 

// m30;   next: m46, loop target: m30 (next offset: 19)
000016  1 0  "00000000101001001111100000110000"   // (R[4],R[5]) = load__pl_const_1_B1 (R[5],DMb,PM); 
000017  1 0  "00000000110001001111100000110101"   // (R[6],DMb,PM) = store__pl_const_1_B1 (R[4],R[6],DMb,PM); 
000018  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 

// m46;   next: m47 (next offset: 19)

// m47 (next offset: 22)
000019  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000020  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000021  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m9;   next: m40, jump target: m20 (next offset: 26)
000022  1 0  "00000000110000000011000000010001"   // (R[6]) = _le_const_1_B2 (R[6]); 
000023  1 0  "00100000110000000000000000001101"   // () = nez_br_const_1_B1 (R[6],13); 
000024  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000025  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m40;   next: m16 (next offset: 35)
000026  1 0  "01001000000001100000000000100101"   // (R[6]) = lhi_const_1_B1 (37); 
000027  1 0  "01001000000001000000000000100011"   // (R[4]) = lhi_const_1_B1 (35); 
000028  1 0  "01010100110001100000000000100101"   // (R[6]) = w32_const_bor_1_B1 (R[6],37); 
000029  1 0  "00001000111001110000000000000001"   // (R[7],MC) = _pl_const_1_B1 (R[7]); 
000030  1 0  "10111100110000100000000000000000"   // (LE) = wr_res_reg_3_B1 (R[6]); 
000031  1 0  "01010100100001000000000000100011"   // (R[4]) = w32_const_bor_1_B1 (R[4],35); 
000032  1 0  "10111100111000000000000000000000"   // (LC) = wr_res_reg_1_B1 (R[7]); 
000033  1 0  "10111100100000010000000000000000"   // (LS) = wr_res_reg_2_B1 (R[4]); 
000034  1 0  "01010100011001100000000000000000"   // R[6] = R[3]; 

// m16;   next: m44, loop target: m16 (next offset: 38)
000035  1 0  "00000000101001000000100000110000"   // (R[4],R[5]) = load__pl_const_2_B1 (R[5],DMb,PM); 
000036  1 0  "00000000110001000000100000110101"   // (R[6],DMb,PM) = store__pl_const_2_B1 (R[4],R[6],DMb,PM); 
000037  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 

// m44;   next: m38 (next offset: 38)

// m20;   next: m38 (next offset: 38)

// m38 (next offset: /)
000038  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000039  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000040  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

