
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:35:39 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i malloc-malloc_ tlx


// m216;   next: m11, jump target: m13 (next offset: 6)
000000  1 0  "01001000000000110000000000000000"   // (R[3]) = lhi_const_1_B1 (0); 
000001  1 0  "01010100011000110000000000000000"   // (R[3]) = w32_const_bor_1_B1 (R[3],0); 
000002  1 0  "01010000011001010000000000000000"   // (R[5]) = load_2_B1 (R[3],DMb_stat); 
000003  1 0  "00100000101000000000000000001001"   // () = nez_br_const_2_B1 (R[5],9); 
000004  1 0  "00001000001000010000000000001100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_2_B1 (12,SP,SP); 
000005  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m11;   next: m12 (next offset: 11)
000006  1 0  "10101000001000101111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[2],SP,-4); 
000007  1 0  "10101000001001001111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[4],SP,-8); 
000008  1 0  "10101000001000111111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[3],SP,-12); 
000009  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000010  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m12 subroutine call;   next: m264 (next offset: 11)

// m264;   next: m65 (next offset: 14)
000011  1 0  "01010000001000111111111111110100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000012  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000013  1 0  "01010000001000101111111111111100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m13;   next: m65 (next offset: 14)

// m65, jump target: m3 (next offset: 22)
000014  1 0  "01010000011000110000000000000000"   // (R[3]) = load_2_B1 (R[3],DMb_stat); 
000015  1 0  "00001000100001000000000000010011"   // (R[4],MC) = _pl_const_3_B1 (R[4]); 
000016  1 0  "01001000000001110111111111111111"   // (R[7]) = lhi_const_1_B1 (32767); 
000017  1 0  "01010000011001010000000000000100"   // (R[5]) = _pl_const_load_1_B1 (R[3],DMb); 
000018  1 0  "10011100100001100000000000000100"   // (R[6]) = _rs_const_1_B1 (R[4]); 
000019  1 0  "01010100111001111111111111111111"   // (R[7]) = w32_const_bor_1_B1 (R[7],65535); 
000020  1 0  "00100100000000000000000000100111"   // () = j_const_1_B1 (39); 
000021  1 0  "01001000000001001000000000000000"   // (R[4]) = const_2_B1 (); 

// m266;   next: m178 (next offset: 22)

// m178;   next: m34, jump target: m2 (next offset: 32)
000022  1 0  "01010000101010010000000000000000"   // (R[9]) = load_1_B1 (R[5],DMb); 
000023  1 0  "00000000111010010100000000000011"   // (R[8]) = _ad_1_B1 (R[9],R[7]); 
000024  1 0  "10001001000010100000000000000100"   // (R[10]) = _ls_const_1_B1 (R[8]); 
000025  1 0  "00000000101010100101100000000001"   // (R[11],) = _pl_1_B1 (R[5],R[10]); 
000026  1 0  "01010101011011010000000000000000"   // R[13] = R[11]; 
000027  1 0  "00000001011010100010000000110100"   // (R[10],R[11]) = load__pl_const_3_B1 (R[11],DMb); 
000028  1 0  "00000000100010100110000000000011"   // (R[12]) = _ad_2_B1 (R[10],R[4]); 
000029  1 0  "00100001100000000000000000010110"   // () = nez_br_const_2_B1 (R[12],22); 
000030  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000031  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m34;   next: m184 (next offset: 32)

// m184;   next: m39, jump target: m40 (next offset: 37)
000032  1 0  "00001001101011000000000000001000"   // (R[12],MC) = _pl_const_2_B1 (R[13]); 
000033  1 0  "01010001100011100000000000000000"   // (R[14]) = load_1_B1 (R[12],DMb); 
000034  1 0  "00010101110000000000000000000011"   // () = eqz_br_const_1_B1 (R[14],3); 
000035  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000036  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m39;   next: m188 (next offset: 39)
000037  1 0  "01010001101011010000000000000100"   // (R[13]) = _pl_const_load_1_B1 (R[13],DMb); 
000038  1 0  "10101001110011010000000000000100"   // (DMb) = _pl_const_store_1_B1 (R[13],R[14],DMb); 

// m40;   next: m188 (next offset: 39)

// m188;   next: m45, jump target: m46 (next offset: 44)
000039  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000040  1 0  "01010001100011001111111111111100"   // (R[12]) = load__pl_const_1_B1 (R[12],DMb); 
000041  1 0  "00010101100000000000000000000011"   // () = eqz_br_const_1_B1 (R[12],3); 
000042  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000043  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m45;   next: m48 (next offset: 46)
000044  1 0  "01010001011010110000000000000100"   // (R[11]) = _pl_const_load_1_B1 (R[11],DMb); 
000045  1 0  "10101001100010110000000000001000"   // (DMb) = store__pl_const_2_B1 (R[11],R[12],DMb); 

// m46;   next: m48 (next offset: 46)

// m48, jump target: m178 (next offset: 53)
000046  1 0  "00000000111010100101000000000011"   // (R[10]) = _ad_1_B1 (R[10],R[7]); 
000047  1 0  "00000000100010010100100000000011"   // (R[9]) = _ad_2_B1 (R[9],R[4]); 
000048  1 0  "00000001000010100100000000000001"   // (R[8],) = _pl_1_B1 (R[8],R[10]); 
000049  1 0  "00000001000010010100000000001010"   // (R[8]) = _or_2_B1 (R[9],R[8]); 
000050  1 0  "10101000101010000000000000000000"   // (DMb) = store_1_B1 (R[8],R[5],DMb); 
000051  1 0  "00100111111111111111111111100010"   // () = j_const_1_B1 (-30); 
000052  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m2;   next: m54 (next offset: 53)

// m54;   next: m59, jump target: m4 (next offset: 59)
000053  1 0  "01010000101010000000000000000000"   // (R[8]) = load_1_B1 (R[5],DMb); 
000054  1 0  "00000000111010000100000000000011"   // (R[8]) = _ad_1_B1 (R[8],R[7]); 
000055  1 0  "00000001000001100100000000001101"   // (R[8]) = _ge_1_B1 (R[8],R[6]); 
000056  1 0  "00100001000000000000000000000110"   // () = nez_br_const_1_B1 (R[8],6); 
000057  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000058  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m59;   next: m61 (next offset: 59)

// m61;   next: m3 (next offset: 60)
000059  1 0  "01010000101001010000000000000100"   // (R[5]) = _pl_const_load_1_B1 (R[5],DMb); 

// m3;   next: m62 (next offset: 60)

// m62;   next: m265, jump target: m266 (next offset: 64)
000060  1 0  "00000000011001010100000000010101"   // (R[8]) = _ne_1_B1 (R[5],R[3]); 
000061  1 0  "00100001000000001111111111010111"   // () = nez_br_const_1_B1 (R[8],-41); 
000062  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000063  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m265;   next: m4 (next offset: 64)

// m4;   next: m67 (next offset: 64)

// m67;   next: m72, jump target: m70 (next offset: 68)
000064  1 0  "00000000011001010100000000001011"   // (R[8]) = _eq_1_B1 (R[5],R[3]); 
000065  1 0  "00100001000000000000000000101100"   // () = nez_br_const_1_B1 (R[8],44); 
000066  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000067  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m72;   next: m200, jump target: m83 (next offset: 74)
000068  1 0  "01010000101010000000000000000000"   // (R[8]) = load_1_B1 (R[5],DMb); 
000069  1 0  "00000000111010000100000000000011"   // (R[8]) = _ad_1_B1 (R[8],R[7]); 
000070  1 0  "00000001000001100100100000010001"   // (R[9]) = _le_1_B1 (R[8],R[6]); 
000071  1 0  "00100001001000000000000000010010"   // () = nez_br_const_1_B1 (R[9],18); 
000072  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000073  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m200;   next: m79, jump target: m80 (next offset: 85)
000074  1 0  "00000001000001100101000000011000"   // (R[10],MC) = _mi_1_B1 (R[8],R[6]); 
000075  1 0  "10001000110010010000000000000100"   // (R[9]) = _ls_const_1_B1 (R[6]); 
000076  1 0  "00000000101010010100100000000001"   // (R[9],) = _pl_1_B1 (R[5],R[9]); 
000077  1 0  "00000000111010100011100000000011"   // (R[7]) = _ad_1_B1 (R[10],R[7]); 
000078  1 0  "01010101001010100000000000000000"   // RH = R[9]; 
000079  1 0  "01010000011010000000000000000100"   // (R[8]) = _pl_const_load_1_B1 (R[3],DMb); 
000080  1 0  "00000000100001100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[4]); 
000081  1 0  "00000001001001110010000000110111"   // (R[9],DMb) = store__pl_const_3_B1 (R[7],R[9],DMb); 
000082  1 0  "00010101000000000000000000000010"   // () = eqz_br_const_1_B1 (R[8],2); 
000083  1 0  "10101000101001100000000000000000"   // (DMb) = store_1_B1 (R[6],R[5],DMb); 
000084  1 0  "01010101010001110000000000000000"   // R[7] = RH; 

// m79;   next: m82 (next offset: 86)
000085  1 0  "10101001000001110000000000001000"   // (DMb) = store__pl_const_2_B1 (R[7],R[8],DMb); 

// m80;   next: m82 (next offset: 86)

// m82;   next: m207 (next offset: 91)
000086  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000087  1 0  "01010000011001100000000000000100"   // (R[6]) = _pl_const_load_1_B1 (R[3],DMb); 
000088  1 0  "00000001001001100010000000110111"   // (R[9],DMb) = store__pl_const_3_B1 (R[6],R[9],DMb); 
000089  1 0  "00000001001000111100000000110111"   // (R[9],DMb) = store__pl_const_4_B1 (R[3],R[9],DMb); 
000090  1 0  "10101000011010010000000000000100"   // (DMb) = _pl_const_store_1_B1 (R[9],R[3],DMb); 

// m83;   next: m207 (next offset: 91)

// m207;   next: m88, jump target: m89 (next offset: 97)
000091  1 0  "00001000101000110000000000001000"   // (R[3],MC) = _pl_const_2_B1 (R[5]); 
000092  1 0  "01010100011001110000000000000000"   // R[7] = R[3]; 
000093  1 0  "00000000011010001110000000110100"   // (R[8],R[3]) = load__pl_const_2_B1 (R[3],DMb); 
000094  1 0  "00010101000000000000000000000011"   // () = eqz_br_const_1_B1 (R[8],3); 
000095  1 0  "00001000101001100000000000000100"   // (R[6],MC) = _pl_const_1_B1 (R[5]); 
000096  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m88;   next: m212 (next offset: 99)
000097  1 0  "01010000101001010000000000000100"   // (R[5]) = _pl_const_load_1_B1 (R[5],DMb); 
000098  1 0  "10101001000001010000000000000100"   // (DMb) = _pl_const_store_1_B1 (R[5],R[8],DMb); 

// m89;   next: m212 (next offset: 99)

// m212;   next: m94, jump target: m95 (next offset: 104)
000099  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000100  1 0  "01010000111001011111111111111100"   // (R[5]) = load__pl_const_1_B1 (R[7],DMb); 
000101  1 0  "00010100101000000000000000000011"   // () = eqz_br_const_1_B1 (R[5],3); 
000102  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000103  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m94;   next: m97 (next offset: 106)
000104  1 0  "01010000110001100000000000000100"   // (R[6]) = _pl_const_load_1_B1 (R[6],DMb); 
000105  1 0  "10101000101001100000000000001000"   // (DMb) = store__pl_const_2_B1 (R[6],R[5],DMb); 

// m95;   next: m97 (next offset: 106)

// m97, jump target: m100 (next offset: 111)
000106  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000107  1 0  "01010000011001011111111111111100"   // (R[5]) = load__pl_const_1_B1 (R[3],DMb); 
000108  1 0  "00000000100001010010000000001010"   // (R[4]) = _or_1_B1 (R[5],R[4]); 
000109  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000110  1 0  "10101000011001001111111111111100"   // (DMb) = store__pl_const_1_B1 (R[4],R[3],DMb); 

// m70;   next: m100 (next offset: 112)
000111  1 0  "01001000000000110000000000000000"   // (R[3]) = const_1_B3 (); 

// m100 (next offset: /)
000112  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000113  1 0  "00001000001000011111111111110100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (-12,SP,SP); 
000114  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

