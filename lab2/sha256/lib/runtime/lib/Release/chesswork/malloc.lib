
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Thu Jan 24 11:28:47 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I.. -I../isg -I../runtime/include -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -itlx_chess.h +wlib/Release/chesswork ../runtime/src/malloc.c tlx

toolrelease _18R1;

// int mul_called(int, int)
F__sint_mul_called___sint___sint : user_defined, called {
    fnm : "mul_called" 'int mul_called(int, int)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
}

// void *malloc(size_t)
F__Pvoid_malloc___uint : user_defined, called {
    fnm : "malloc" 'void *malloc(size_t)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void free(void *)
Fvoid_free___Pvoid : user_defined, called {
    fnm : "free" 'void free(void *)'; 
    arg : ( w32:i w32:i );
    loc : ( R[2] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void *calloc(size_t, size_t)
F__Pvoid_calloc___uint___uint : user_defined, called {
    fnm : "calloc" 'void *calloc(size_t, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void *realloc(void *, size_t)
F__Pvoid_realloc___Pvoid___uint : user_defined, called {
    fnm : "realloc" 'void *realloc(void *, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void *memcpy(void * restrict, const void * restrict, size_t)
F__Pvoid_memcpy___Pvoid___Pvoid___uint : user_defined, called {
    fnm : "memcpy" 'void *memcpy(void * restrict, const void * restrict, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
}

// void *memset(void *, int, size_t)
F__Pvoid_memset___Pvoid___sint___uint : user_defined, called {
    fnm : "memset" 'void *memset(void *, int, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
}

// void init()
F__malloc_void_init : user_defined, called {
    fnm : "init" 'void init()'; 
    arg : ( w32:i );
    loc : ( R[2] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int block_size(void *)
F__sint_block_size___Pvoid : user_defined, called {
    fnm : "block_size" 'int block_size(void *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

