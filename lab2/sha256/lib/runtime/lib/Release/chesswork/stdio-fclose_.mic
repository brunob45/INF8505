
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Jan 24 11:28:36 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i stdio-fclose_ tlx


// m30;   next: m8, jump target: m6 (next offset: 9)
000000  1 0  "01001000000000110000000000000000"   // (R[3]) = lhi_const_1_B1 (0); 
000001  1 0  "00001000001000010000000001001100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_2_B1 (76,SP,SP); 
000002  1 0  "01010100011000110000000000000000"   // (R[3]) = w32_const_bor_1_B1 (R[3],0); 
000003  1 0  "10101000001000111111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[3],SP,-4); 
000004  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000005  1 0  "01010000100000110000000000000100"   // (R[3]) = _pl_const_load_1_B1 (R[4],DMb); 
000006  1 0  "00010100011000000000000000010010"   // () = eqz_br_const_1_B1 (R[3],18); 
000007  1 0  "01010100000001010000000000001001"   // (R[5]) = const_3_B2 (); 
000008  1 0  "10101000001000101111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[2],SP,-8); 

// m8;   next: m9 (next offset: 17)
000009  1 0  "01010100000001100000000000000001"   // (R[6]) = const_2_B2 (); 
000010  1 0  "01010000100000110000000000000000"   // (R[3]) = load_1_B1 (R[4],DMb); 
000011  1 0  "10101000100000000000000000000100"   // (DMb) = store_const__pl_const_1_B1 (R[4],DMb); 
000012  1 0  "10101000001001101111111110110100"   // (DMb) = _pl_rd_res_reg_const_store_1_B1 (R[6],-76,DMb,SP); 
000013  1 0  "10101000001001011111111110111100"   // (DMb) = _pl_rd_res_reg_const_store_1_B1 (R[5],-68,DMb,SP); 
000014  1 0  "10101000001000111111111110111000"   // (DMb) = _pl_rd_res_reg_const_store_1_B1 (R[3],-72,DMb,SP); 
000015  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000016  1 0  "00001000001001001111111110110100"   // (R[4],MC) = _pl_rd_res_reg_const_1_B1 (-76,SP); 

// m9 subroutine call;   next: m23 (next offset: 17)

// m23;   next: m13, jump target: m14 (next offset: 21)
000017  1 0  "01010000001001011111111110111100"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-68,DMb,SP); 
000018  1 0  "00010100101000000000000000000100"   // () = eqz_br_const_1_B1 (R[5],4); 
000019  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000020  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m13, jump target: m18 (next offset: 24)
000021  1 0  "10101000100001010000000000000000"   // (DMb_stat) = store_1_B1 (R[5],R[4],DMb_stat); 
000022  1 0  "00100100000000000000000000000110"   // () = j_const_1_B1 (6); 
000023  1 0  "00001000000000111111111111111111"   // (R[3]) = const_4_B1 (); 

// m14, jump target: m18 (next offset: 26)
000024  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000025  1 0  "01001000000000110000000000000000"   // (R[3]) = const_1_B3 (); 

// m6;   next: m18 (next offset: 29)
000026  1 0  "00001000000000111111111111111111"   // (R[3]) = const_4_B1 (); 
000027  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000028  1 0  "10101000100001010000000000000000"   // (DMb_stat) = store_1_B1 (R[5],R[4],DMb_stat); 

// m18 (next offset: /)
000029  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000030  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000031  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000032  1 0  "00001000001000011111111110110100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (-76,SP,SP); 
000033  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

