
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:35:41 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I.. -I../isg -I../runtime/include -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -itlx_chess.h +wlib/Release/chesswork src/math.c tlx

toolrelease _18R1;

// float32 int32_to_float32(int)
F__uint_int32_to_float32___sint : user_defined, called {
    fnm : "int32_to_float32" 'float32 int32_to_float32(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// float64 int32_to_float64(int)
Fdint_int32_to_float64___sint : user_defined, called {
    fnm : "int32_to_float64" 'float64 int32_to_float64(int)'; 
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] );
    llv : 0 0 0 0 0 ;
}

// int float32_to_int32_round_to_zero(float32)
F__sint_float32_to_int32_round_to_zero___uint : user_defined, called {
    fnm : "float32_to_int32_round_to_zero" 'int float32_to_int32_round_to_zero(float32)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// float64 float32_to_float64(float32)
Fdint_float32_to_float64___uint : user_defined, called {
    fnm : "float32_to_float64" 'float64 float32_to_float64(float32)'; 
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] );
    llv : 0 0 0 0 0 ;
}

// float32 float32_add(float32, float32)
F__uint_float32_add___uint___uint : user_defined, called {
    fnm : "float32_add" 'float32 float32_add(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// float32 float32_sub(float32, float32)
F__uint_float32_sub___uint___uint : user_defined, called {
    fnm : "float32_sub" 'float32 float32_sub(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// float32 float32_mul(float32, float32)
F__uint_float32_mul___uint___uint : user_defined, called {
    fnm : "float32_mul" 'float32 float32_mul(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// float32 float32_div(float32, float32)
F__uint_float32_div___uint___uint : user_defined, called {
    fnm : "float32_div" 'float32 float32_div(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// int float32_eq(float32, float32)
F__sint_float32_eq___uint___uint : user_defined, called {
    fnm : "float32_eq" 'int float32_eq(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// int float32_le(float32, float32)
F__sint_float32_le___uint___uint : user_defined, called {
    fnm : "float32_le" 'int float32_le(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// int float32_lt(float32, float32)
F__sint_float32_lt___uint___uint : user_defined, called {
    fnm : "float32_lt" 'int float32_lt(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// int float64_to_int32_round_to_zero(float64)
F__sint_float64_to_int32_round_to_zero_dint : user_defined, called {
    fnm : "float64_to_int32_round_to_zero" 'int float64_to_int32_round_to_zero(float64)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// float32 float64_to_float32(float64)
F__uint_float64_to_float32_dint : user_defined, called {
    fnm : "float64_to_float32" 'float32 float64_to_float32(float64)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    llv : 0 0 0 0 0 ;
}

// float64 float64_add(float64, float64)
Fdint_float64_add_dint_dint : user_defined, called {
    fnm : "float64_add" 'float64 float64_add(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    llv : 0 0 0 0 0 ;
}

// float64 float64_sub(float64, float64)
Fdint_float64_sub_dint_dint : user_defined, called {
    fnm : "float64_sub" 'float64 float64_sub(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    llv : 0 0 0 0 0 ;
}

// float64 float64_mul(float64, float64)
Fdint_float64_mul_dint_dint : user_defined, called {
    fnm : "float64_mul" 'float64 float64_mul(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    llv : 0 0 0 0 0 ;
}

// float64 float64_div(float64, float64)
Fdint_float64_div_dint_dint : user_defined, called {
    fnm : "float64_div" 'float64 float64_div(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    llv : 0 0 0 0 0 ;
}

// int float64_eq(float64, float64)
F__sint_float64_eq_dint_dint : user_defined, called {
    fnm : "float64_eq" 'int float64_eq(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    llv : 0 0 0 0 0 ;
}

// int float64_le(float64, float64)
F__sint_float64_le_dint_dint : user_defined, called {
    fnm : "float64_le" 'int float64_le(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    llv : 0 0 0 0 0 ;
}

// int float64_lt(float64, float64)
F__sint_float64_lt_dint_dint : user_defined, called {
    fnm : "float64_lt" 'int float64_lt(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    llv : 0 0 0 0 0 ;
}

// float ff_ldexpf(float, int)
Fff_ldexpf : user_defined, called {
    fnm : "ff_ldexpf" 'float ff_ldexpf(float, int)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_ldexp(double, int)
Fff_ldexp : user_defined, called {
    fnm : "ff_ldexp" 'double ff_ldexp(double, int)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_ceilf(float)
Fff_ceilf : user_defined, called {
    fnm : "ff_ceilf" 'float ff_ceilf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_ceil(double)
Fff_ceil : user_defined, called {
    fnm : "ff_ceil" 'double ff_ceil(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_floorf(float)
Fff_floorf : user_defined, called {
    fnm : "ff_floorf" 'float ff_floorf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_floor(double)
Fff_floor : user_defined, called {
    fnm : "ff_floor" 'double ff_floor(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_roundf(float)
Fff_roundf : user_defined, called {
    fnm : "ff_roundf" 'float ff_roundf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_round(double)
Fff_round : user_defined, called {
    fnm : "ff_round" 'double ff_round(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_cosf(float)
Fff_cosf : user_defined, called {
    fnm : "ff_cosf" 'float ff_cosf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( l=8 );
    llv : 1 0 0 0 0 ;
}

// double ff_cos(double)
Fff_cos : user_defined, called {
    fnm : "ff_cos" 'double ff_cos(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( l=16 b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_sinf(float)
Fff_sinf : user_defined, called {
    fnm : "ff_sinf" 'float ff_sinf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( l=8 );
    llv : 1 0 0 0 0 ;
}

// double ff_sin(double)
Fff_sin : user_defined, called {
    fnm : "ff_sin" 'double ff_sin(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( l=16 b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_expf(float)
Fff_expf : user_defined, called {
    fnm : "ff_expf" 'float ff_expf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// double ff_exp(double)
Fff_exp : user_defined, called {
    fnm : "ff_exp" 'double ff_exp(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_logf(float)
Fff_logf : user_defined, called {
    fnm : "ff_logf" 'float ff_logf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_log(double)
Fff_log : user_defined, called {
    fnm : "ff_log" 'double ff_log(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_log10f(float)
Fff_log10f : user_defined, called {
    fnm : "ff_log10f" 'float ff_log10f(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_log10(double)
Fff_log10 : user_defined, called {
    fnm : "ff_log10" 'double ff_log10(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_sqrtf(float)
Fff_sqrtf : user_defined, called {
    fnm : "ff_sqrtf" 'float ff_sqrtf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_sqrt(double)
Fff_sqrt : user_defined, called {
    fnm : "ff_sqrt" 'double ff_sqrt(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_powf(float, float)
Fff_powf : user_defined, called {
    fnm : "ff_powf" 'float ff_powf(float, float)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_pow(double, double)
Fff_pow : user_defined, called {
    fnm : "ff_pow" 'double ff_pow(double, double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// double ff_fmod(double, double)
Fff_fmod : user_defined, called {
    fnm : "ff_fmod" 'double ff_fmod(double, double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_acosf(float)
Fff_acosf : user_defined, called {
    fnm : "ff_acosf" 'float ff_acosf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_acos(double)
Fff_acos : user_defined, called {
    fnm : "ff_acos" 'double ff_acos(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_asinf(float)
Fff_asinf : user_defined, called {
    fnm : "ff_asinf" 'float ff_asinf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_asin(double)
Fff_asin : user_defined, called {
    fnm : "ff_asin" 'double ff_asin(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// double ff_atan(double)
Fff_atan : user_defined, called {
    fnm : "ff_atan" 'double ff_atan(double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float ff_atan2f(float, float)
Fff_atan2f : user_defined, called {
    fnm : "ff_atan2f" 'float ff_atan2f(float, float)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// double ff_atan2(double, double)
Fff_atan2 : user_defined, called {
    fnm : "ff_atan2" 'double ff_atan2(double, double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( b=8 );
    llv : 1 0 0 0 0 ;
}

// float atanf(float)
Fatanf : user_defined, called {
    fnm : "atanf" 'float atanf(float)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int32_t ff_rem_pio2f(float, float *)
F__sint_ff_rem_pio2f___ffloat___P__ffloat : user_defined, called {
    fnm : "ff_rem_pio2f" 'int32_t ff_rem_pio2f(float, float *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int32_t ff_rem_pio2(double, double *)
F__sint_ff_rem_pio2___fdouble___P__fdouble : user_defined, called {
    fnm : "ff_rem_pio2" 'int32_t ff_rem_pio2(double, double *)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( b=8 );
    llv : 0 0 0 0 0 ;
}

// float ff_kernel_cosf(float, float)
F__ffloat_ff_kernel_cosf___ffloat___ffloat : user_defined, called {
    fnm : "ff_kernel_cosf" 'float ff_kernel_cosf(float, float)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// double ff_kernel_cos(double, double)
F__fdouble_ff_kernel_cos___fdouble___fdouble : user_defined, called {
    fnm : "ff_kernel_cos" 'double ff_kernel_cos(double, double)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( b=8 );
    llv : 0 0 0 0 0 ;
}

// float ff_kernel_sinf(float, float, int)
F__ffloat_ff_kernel_sinf___ffloat___ffloat___sint : user_defined, called {
    fnm : "ff_kernel_sinf" 'float ff_kernel_sinf(float, float, int)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// double ff_kernel_sin(double, double, int)
F__fdouble_ff_kernel_sin___fdouble___fdouble___sint : user_defined, called {
    fnm : "ff_kernel_sin" 'double ff_kernel_sin(double, double, int)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] R[8] );
    frm : ( b=8 );
    llv : 0 0 0 0 0 ;
}

