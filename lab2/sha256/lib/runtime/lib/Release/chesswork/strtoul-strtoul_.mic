
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:35:35 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i strtoul-strtoul_ tlx


// m406;   next: m256 (next offset: 7)
000000  1 0  "00001000001000010000000000101100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_2_B1 (44,SP,SP); 
000001  1 0  "01001000000000110000000000000000"   // (R[3]) = lhi_const_1_B1 (0); 
000002  1 0  "01010100011010010000000000000000"   // (R[9]) = w32_const_bor_1_B1 (R[3],0); 
000003  1 0  "01010100100001110000000000000000"   // R[7] = R[4]; 
000004  1 0  "10101000001000101111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[2],SP,-4); 
000005  1 0  "10101000001010011111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[9],SP,-8); 
000006  1 0  "01010100000000110000000000000001"   // (R[3]) = const_9_B2 (); 

// m256;   next: m23, jump target: m256 (next offset: 14)
000007  1 0  "00000000111010000000100000110001"   // (R[8],R[7]) = load__pl_const_1_B1 (R[7],DMb); 
000008  1 0  "00000001000010010101000000000001"   // (R[10],) = _pl_2_B1 (R[9],R[8]); 
000009  1 0  "00111001010010100000000000000000"   // (R[10]) = load_1_B1 (R[10],DMb_stat); 
000010  1 0  "00010001010010100000000001000000"   // (R[10]) = _ad_const_4_B1 (R[10]); 
000011  1 0  "00100001010000001111111111111010"   // () = nez_br_const_2_B1 (R[10],-6); 
000012  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000013  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m23;   next: m28, jump target: m26 (next offset: 23)
000014  1 0  "01010100111010100000000000000000"   // R[10] = R[7]; 
000015  1 0  "10101000001001101111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[6],SP,-20); 
000016  1 0  "01100101000010110000000000101101"   // (R[11]) = _eq_const_5_B1 (R[8]); 
000017  1 0  "00000000111010010000100000110000"   // (R[9],R[7]) = load__pl_const_2_B1 (R[7],DMb); 
000018  1 0  "10101000001001001111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[4],SP,-12); 
000019  1 0  "10101000001001011111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[5],SP,-16); 
000020  1 0  "00100001011000000000000000001011"   // () = nez_br_const_1_B1 (R[11],11); 
000021  1 0  "10101000001001111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[7],SP,-28); 
000022  1 0  "10101000001010011111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[9],SP,-24); 

// m28;   next: m31, jump target: m32 (next offset: 27)
000023  1 0  "10010101000001010000000000101011"   // (R[5]) = _ne_const_1_B1 (R[8]); 
000024  1 0  "00100000101000000000000000000011"   // () = nez_br_const_1_B1 (R[5],3); 
000025  1 0  "01001000000000110000000000000000"   // (R[3]) = const_8_B3 (); 
000026  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m31;   next: m409 (next offset: 29)
000027  1 0  "01010101001010000000000000000000"   // R[8] = R[9]; 
000028  1 0  "01010100111010100000000000000000"   // R[10] = R[7]; 

// m32;   next: m409 (next offset: 29)

// m409;   next: m279 (next offset: 33)
000029  1 0  "10101000001010001111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[8],SP,-24); 
000030  1 0  "01010101010001110000000000000000"   // R[7] = R[10]; 
000031  1 0  "10101000001010101111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[10],SP,-28); 
000032  1 0  "01010101000010010000000000000000"   // R[9] = R[8]; 

// m26;   next: m279 (next offset: 33)

// m279;   next: m62, jump target: m63 (next offset: 46)
000033  1 0  "00000000110000000010100000001011"   // (R[5]) = eqz_1_B1 (R[6]); 
000034  1 0  "00110100111010000000000000000000"   // (R[8]) = load_2_B1 (R[7],DMb); 
000035  1 0  "01100100110001110000000000010000"   // (R[7]) = _eq_const_2_B1 (R[6]); 
000036  1 0  "01100101000001000000000001011000"   // (R[4]) = _eq_const_4_B1 (R[8]); 
000037  1 0  "01100101001010010000000000110000"   // (R[9]) = _eq_const_1_B1 (R[9]); 
000038  1 0  "01100101000010000000000001111000"   // (R[8]) = _eq_const_3_B1 (R[8]); 
000039  1 0  "00000000101001110010100000001010"   // (R[5]) = lor_1_B1 (R[5],R[7]); 
000040  1 0  "00000000101010010010100000000011"   // (R[5]) = land_1_B1 (R[5],R[9]); 
000041  1 0  "00000000100010000010000000001010"   // (R[4]) = lor_1_B1 (R[8],R[4]); 
000042  1 0  "00000000100001010010000000000011"   // (R[4]) = land_1_B1 (R[5],R[4]); 
000043  1 0  "00010100100000000000000000001001"   // () = eqz_br_const_2_B1 (R[4],9); 
000044  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000045  1 0  "10101000001000111111111111100000"   // (__spill_DMw[-32]) = stack_store_bndl_B3 (R[3],SP,-32); 

// m62;   next: m282 (next offset: 54)
000046  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000047  1 0  "01010000001001011111111111100100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000048  1 0  "00001000101001000000000000000001"   // (R[4],MC) = _pl_const_3_B1 (R[5]); 
000049  1 0  "01010100000001010000000000010000"   // (R[5]) = const_7_B2 (); 
000050  1 0  "00000000100000110000100000110000"   // (R[3],R[4]) = load__pl_const_2_B1 (R[4],DMb); 
000051  1 0  "10101000001001001111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[4],SP,-28); 
000052  1 0  "10101000001000111111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[3],SP,-24); 
000053  1 0  "10101000001001011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[5],SP,-20); 

// m63;   next: m282 (next offset: 54)

// m282;   next: m69, jump target: m75 (next offset: 57)
000054  1 0  "00100000101000000000000000001000"   // () = nez_br_const_2_B1 (R[5],8); 
000055  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000056  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m69;   next: m73, jump target: m72 (next offset: 62)
000057  1 0  "01010000001001001111111111101000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000058  1 0  "01100100100001000000000000110000"   // (R[4]) = _eq_const_1_B1 (R[4]); 
000059  1 0  "00100000100000000000000000000011"   // () = nez_br_const_1_B1 (R[4],3); 
000060  1 0  "01010100000001010000000000001000"   // (R[5]) = const_6_B2 (); 
000061  1 0  "10101000001001011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[5],SP,-20); 

// m73;   next: m410 (next offset: 64)
000062  1 0  "01010100000001010000000000001010"   // (R[5]) = const_5_B2 (); 
000063  1 0  "10101000001001011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[5],SP,-20); 

// m72;   next: m410 (next offset: 64)

// m410;   next: m350 (next offset: 64)

// m75;   next: m350 (next offset: 64)

// m350;   next: m351 (next offset: 66)
000064  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000065  1 0  "00001000000001001111111111111111"   // (R[4]) = const_4_B1 (); 

// m351 subroutine call;   next: m405 (next offset: 66)

// m405;   next: m289 (next offset: 77)
000066  1 0  "01001000000001010000000000000000"   // (R[5]) = lhi_const_1_B1 (0); 
000067  1 0  "01010100101001000000000000000000"   // (R[4]) = w32_const_bor_1_B1 (R[5],0); 
000068  1 0  "01010000001010111111111111101000"   // (R[11]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000069  1 0  "01010000001001111111111111100100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000070  1 0  "10101000001001101111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[6],SP,-24); 
000071  1 0  "10101000001001001111111111011100"   // (__spill_DMw[-36]) = stack_store_bndl_B3 (R[4],SP,-36); 
000072  1 0  "10101000001000111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[3],SP,-28); 
000073  1 0  "01001000000001100000000000000000"   // (R[6]) = const_8_B3 (); 
000074  1 0  "01010000001010001111111111111000"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000075  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000076  1 0  "01001000000001000000000000000000"   // (R[4]) = const_8_B3 (); 

// m289;   next: m293, jump target: m99 (next offset: 84)
000077  1 0  "00010001011011000000000011111111"   // (R[12]) = __uchar_1_B1 (R[11]); 
000078  1 0  "00000001000011000110000000000001"   // (R[12],) = _pl_2_B1 (R[8],R[12]); 
000079  1 0  "00111001100011000000000000000000"   // (R[12]) = load_1_B1 (R[12],DMb_stat); 
000080  1 0  "00010001100011010000000000000100"   // (R[13]) = _ad_const_3_B1 (R[12]); 
000081  1 0  "00100001101000000000000000001100"   // () = nez_br_const_2_B1 (R[13],12); 
000082  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000083  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m293;   next: m297, jump target: m2 (next offset: 88)
000084  1 0  "00010001100011010000000000000011"   // (R[13]) = _ad_const_2_B1 (R[12]); 
000085  1 0  "00010101101000000000000000101110"   // () = eqz_br_const_1_B1 (R[13],46); 
000086  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000087  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m297;   next: m133, jump target: m132 (next offset: 92)
000088  1 0  "00010001100011010000000000000010"   // (R[13]) = _ad_const_1_B1 (R[12]); 
000089  1 0  "00100001101000000000000000000010"   // () = nez_br_const_2_B1 (R[13],2); 
000090  1 0  "01010100000011000000000000110111"   // (R[12]) = const_1_B2 (); 
000091  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m133;   next: m135 (next offset: 93)
000092  1 0  "01010100000011000000000001010111"   // (R[12]) = const_2_B2 (); 

// m132;   next: m135 (next offset: 93)

// m135, jump target: m140 (next offset: 95)
000093  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000094  1 0  "00000001011011000101100000011000"   // (R[11],MC) = _mi_1_B1 (R[11],R[12]); 

// m99;   next: m140 (next offset: 96)
000095  1 0  "00001001011010111111111111010000"   // (R[11],MC) = _pl_const_2_B1 (R[11]); 

// m140;   next: m145, jump target: m2 (next offset: 100)
000096  1 0  "00000001011001010110000000001100"   // (R[12]) = _ge_1_B1 (R[11],R[5]); 
000097  1 0  "00100001100000000000000000100010"   // () = nez_br_const_1_B1 (R[12],34); 
000098  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000099  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m145;   next: m147 (next offset: 100)

// m147;   next: m307, jump target: m150 (next offset: 104)
000100  1 0  "00000000110000000110000000010011"   // (R[12]) = _lt_const_1_B2 (R[6]); 
000101  1 0  "00100001100000000000000000011100"   // () = nez_br_const_1_B1 (R[12],28); 
000102  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000103  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m307;   next: m341, jump target: m167 (next offset: 113)
000104  1 0  "01010000001001101111111111101000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000105  1 0  "00000000011001000100000000001011"   // (R[8]) = _eq_1_B1 (R[4],R[3]); 
000106  1 0  "00000001011001100011000000001110"   // (R[6]) = _gt_2_B1 (R[11],R[6]); 
000107  1 0  "00000000100000110001100000001111"   // (R[3]) = _gt_1_B1 (R[4],R[3]); 
000108  1 0  "00000000110010000011000000000011"   // (R[6]) = land_1_B1 (R[8],R[6]); 
000109  1 0  "00000000011001100001100000001010"   // (R[3]) = lor_1_B1 (R[3],R[6]); 
000110  1 0  "00100000011000000000000000001011"   // () = nez_br_const_1_B1 (R[3],11); 
000111  1 0  "10101000001010111111111111011000"   // (__spill_DMw[-40]) = stack_store_bndl_B3 (R[11],SP,-40); 
000112  1 0  "10101000001001111111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[7],SP,-44); 

// m341;   next: m342 (next offset: 115)
000113  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000114  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m342 subroutine call;   next: m339 (next offset: 115)

// m339, jump target: m412 (next offset: 123)
000115  1 0  "01010000001001011111111111011000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-40],SP,-40); 
000116  1 0  "00000000011001010010000000000001"   // (R[4],) = _pl_1_B1 (R[3],R[5]); 
000117  1 0  "01010000001001111111111111010100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-44],SP,-44); 
000118  1 0  "01010000001010001111111111111000"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000119  1 0  "01010000001000111111111111100100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000120  1 0  "01010100000001100000000000000001"   // (R[6]) = const_9_B2 (); 
000121  1 0  "00100100000000000000000000001001"   // () = j_const_1_B1 (9); 
000122  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m167;   next: m412 (next offset: 131)
000123  1 0  "01010100000000110000000000100010"   // (R[3]) = const_3_B2 (); 
000124  1 0  "01010000001001001111111111011100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-36],SP,-36); 
000125  1 0  "01010000001001111111111111010100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-44],SP,-44); 
000126  1 0  "10101000100000110000000000000000"   // (DMb_stat) = store_2_B1 (R[3],R[4],DMb_stat); 
000127  1 0  "00001000000001101111111111111111"   // (R[6]) = const_4_B1 (); 
000128  1 0  "01010000001010001111111111111000"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000129  1 0  "01010000001000111111111111100100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000130  1 0  "00001000000001001111111111111111"   // (R[4]) = const_4_B1 (); 

// m412;   next: m171 (next offset: 131)

// m150;   next: m171 (next offset: 131)

// m171, jump target: m289 (next offset: 133)
000131  1 0  "00100111111111111111111111001001"   // () = j_const_1_B1 (-55); 
000132  1 0  "00000000111010110000100000110001"   // (R[11],R[7]) = load__pl_const_1_B1 (R[7],DMb); 

// m2;   next: m314 (next offset: 133)

// m314;   next: m186, jump target: m187 (next offset: 140)
000133  1 0  "01010000001001011111111111100000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-32],SP,-32); 
000134  1 0  "00000000101000000010100000010101"   // (R[5]) = nez_1_B1 (R[5]); 
000135  1 0  "00000000110000000001100000001110"   // (R[3]) = _gt_const_1_B2 (R[6]); 
000136  1 0  "00000000011001010100000000000011"   // (R[8]) = land_1_B1 (R[5],R[3]); 
000137  1 0  "00010101000000000000000000000010"   // () = eqz_br_const_2_B1 (R[8],2); 
000138  1 0  "01010100100000110000000000000000"   // R[3] = R[4]; 
000139  1 0  "01010000001001011111111111110000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 

// m186;   next: m317 (next offset: 141)
000140  1 0  "00000000000000110001100000011000"   // (R[3],MC) = _mi_const_1_B1 (R[3]); 

// m187;   next: m317 (next offset: 141)

// m317;   next: m320, jump target: m200 (next offset: 144)
000141  1 0  "00010100101000000000000000000110"   // () = eqz_br_const_1_B1 (R[5],6); 
000142  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000143  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m320;   next: m196, jump target: m197 (next offset: 147)
000144  1 0  "00010100110000000000000000000010"   // () = eqz_br_const_1_B1 (R[6],2); 
000145  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000146  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m196;   next: m199 (next offset: 148)
000147  1 0  "00001000111001001111111111111111"   // (R[4],MC) = _pl_const_1_B1 (R[7]); 

// m197;   next: m199 (next offset: 148)

// m199;   next: m203 (next offset: 149)
000148  1 0  "10101000101001000000000000000000"   // (DMb) = store_1_B1 (R[4],R[5],DMb); 

// m200;   next: m203 (next offset: 149)

// m203 (next offset: /)
000149  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000150  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000151  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000152  1 0  "00001000001000011111111111010100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (-44,SP,SP); 
000153  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

