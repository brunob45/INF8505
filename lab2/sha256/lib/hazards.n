/*
-- File : hazards.n
--
-- Contents : nML model for the TLX processor - bypass and stall rules.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model 
-- captures an ASIP Designer Design Technique. The model and all associated 
-- documentation are proprietary to Synopsys, Inc. and may only be used 
-- pursuant to the terms and conditions of a written license agreement with 
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution 
-- of the Synopsys processor model or the associated  documentation is 
-- strictly prohibited. 
*/





// avoid conflict on dm_address bus

sw_stall 1 cycles class(dm_addr_conflict) () {
    rsrc(dm_addr `EX`);
}
-> {
    rsrc(dm_addr `ID`);
}

// which could be added explicitly in nML as follows:
hw_stall 1 cycles class(read_after_write_R) () {
    stage EX : R$[#] = ...;
}
-> {
    stage ID : r0 = R$[#];
}
/*

#if !defined(__programmers_view__)

// stall if next instruction is dependent on division results

hw_stall trn class(hw_stall_div_dep) ()
    { trn(div_busy); } -> { stage EX: ... = PL; } // quotient
hw_stall trn class(hw_stall_div_dep) ()
    { trn(div_busy); } -> { stage EX: ... = PH; } // remainder

// stall division while previous division is still active 

hw_stall trn class(hw_stall_div_busy) ()
    { trn(div_busy); } -> { stage EX: divide(divA, divB, plw, phw); }

// stall instructions that write to result register of division  

hw_stall trn class(hw_stall_div_out) ()
    { trn(div_busy); } -> { stage EX: PL = ...; } 
hw_stall trn class(hw_stall_div_out) ()
    { trn(div_busy); } -> { stage EX: PH = ...; } 

#endif
*/


