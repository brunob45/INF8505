
// File generated by pdg version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:33:26 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// pdg -P -B -Iisg +wisg -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -D__checkers__ tlx

#include "tlx_inline_primitives.h"
namespace tlx_primitive {

#ifdef __checkers__
    void banks::process_request() {
        mdl->dm0_addr.write(tlx_primitive::addr(VBit<22, false>(mdl->dm_addr.read().val.extract(0x17u, 0x2u))));
        mdl->dm1_addr.write(tlx_primitive::addr(VBit<22, false>(mdl->dm_addr.read().val.extract(0x17u, 0x2u))));
        mdl->dm2_addr.write(tlx_primitive::addr(VBit<22, false>(mdl->dm_addr.read().val.extract(0x17u, 0x2u))));
        mdl->dm3_addr.write(tlx_primitive::addr(VBit<22, false>(mdl->dm_addr.read().val.extract(0x17u, 0x2u))));
        VBit<2, false> dma2 = VBit<2, false>(mdl->dm_addr.read().val.extract(0x1u, 0x0u));
        VBit<1, false> tld0 = (((mdl->ld_dmb.read() && (dma2 == 0x0u)) || (mdl->ld_dmh.read() && (dma2 == 0x0u))) || mdl->ld_dmw.read());
        VBit<1, false> tld1 = (((mdl->ld_dmb.read() && (dma2 == 0x1u)) || (mdl->ld_dmh.read() && (dma2 == 0x0u))) || mdl->ld_dmw.read());
        VBit<1, false> tld2 = (((mdl->ld_dmb.read() && (dma2 == 0x2u)) || (mdl->ld_dmh.read() && (dma2 == 0x2u))) || mdl->ld_dmw.read());
        VBit<1, false> tld3 = (((mdl->ld_dmb.read() && (dma2 == 0x3u)) || (mdl->ld_dmh.read() && (dma2 == 0x2u))) || mdl->ld_dmw.read());
        mdl->ld0.write((tld0).to_bool());
        mdl->ld1.write((tld1).to_bool());
        mdl->ld2.write((tld2).to_bool());
        mdl->ld3.write((tld3).to_bool());
        mdl->banks__ld0_ff.assign(1, tld0);
        mdl->banks__ld1_ff.assign(1, tld1);
        mdl->banks__ld2_ff.assign(1, tld2);
        mdl->banks__ld3_ff.assign(1, tld3);
        mdl->st0.write((((mdl->st_dmb.read() && (dma2 == 0x0u)) || (mdl->st_dmh.read() && (dma2 == 0x0u))) || mdl->st_dmw.read()));
        mdl->st1.write((((mdl->st_dmb.read() && (dma2 == 0x1u)) || (mdl->st_dmh.read() && (dma2 == 0x0u))) || mdl->st_dmw.read()));
        mdl->st2.write((((mdl->st_dmb.read() && (dma2 == 0x2u)) || (mdl->st_dmh.read() && (dma2 == 0x2u))) || mdl->st_dmw.read()));
        mdl->st3.write((((mdl->st_dmb.read() && (dma2 == 0x3u)) || (mdl->st_dmh.read() && (dma2 == 0x2u))) || mdl->st_dmw.read()));
        VBit<8, true> t;
        if (mdl->st_dmw.read()) {
            t = VBit<8, true>(mdl->dmw_wr.read().val.extract(0x1Fu, 0x18u));
        } else {
            VBit<8, true> t_0;
            if (mdl->st_dmh.read()) {
                t_0 = VBit<8, true>(mdl->dmh_wr.read().val.extract(0xFu, 0x8u));
            } else {
                t_0 = mdl->dmb_wr.read().val;
            }
            t = t_0;
        }
        mdl->dm0_wr.write(tlx_primitive::w08(t));
        VBit<8, true> t_1;
        if (mdl->st_dmw.read()) {
            t_1 = VBit<8, true>(mdl->dmw_wr.read().val.extract(0x17u, 0x10u));
        } else {
            VBit<8, true> t_2;
            if (mdl->st_dmh.read()) {
                t_2 = VBit<8, true>(mdl->dmh_wr.read().val.extract(0x7u, 0x0u));
            } else {
                t_2 = mdl->dmb_wr.read().val;
            }
            t_1 = t_2;
        }
        mdl->dm1_wr.write(tlx_primitive::w08(t_1));
        VBit<8, true> t_3;
        if (mdl->st_dmw.read()) {
            t_3 = VBit<8, true>(mdl->dmw_wr.read().val.extract(0xFu, 0x8u));
        } else {
            VBit<8, true> t_4;
            if (mdl->st_dmh.read()) {
                t_4 = VBit<8, true>(mdl->dmh_wr.read().val.extract(0xFu, 0x8u));
            } else {
                t_4 = mdl->dmb_wr.read().val;
            }
            t_3 = t_4;
        }
        mdl->dm2_wr.write(tlx_primitive::w08(t_3));
        VBit<8, true> t_5;
        if (mdl->st_dmw.read()) {
            t_5 = VBit<8, true>(mdl->dmw_wr.read().val.extract(0x7u, 0x0u));
        } else {
            VBit<8, true> t_6;
            if (mdl->st_dmh.read()) {
                t_6 = VBit<8, true>(mdl->dmh_wr.read().val.extract(0x7u, 0x0u));
            } else {
                t_6 = mdl->dmb_wr.read().val;
            }
            t_5 = t_6;
        }
        mdl->dm3_wr.write(tlx_primitive::w08(t_5));
    }

#endif // __checkers__

} // namespace tlx_primitive
