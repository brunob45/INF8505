/*
-- File : tlx.n
--
-- Contents : nML model for the TLX processor.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model 
-- captures an ASIP Designer Design Technique. The model and all associated 
-- documentation are proprietary to Synopsys, Inc. and may only be used 
-- pursuant to the terms and conditions of a written license agreement with 
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution 
-- of the Synopsys processor model or the associated  documentation is 
-- strictly prohibited. 
*/



enum stage_names {IF,   // Instruction Fetch
                  ID,   // Instruction Decode
                  EX};  // EXecute

// memories

#include "memsize.h"

def pm_size=2**PM_SIZE_NBIT;
mem PM[pm_size] <iword,addr> access {
   ifetch : pm_rd `1` = PM[pm_addr] `1`;
   istore : PM[pm_addr] = pm_wr;
};

property unconnected : PM;

def dm_size=2**DM_SIZE_NBIT;
mem DMb [dm_size,1]<w08,addr> access {
    ld_dmb: dmb_rd `1` = DMb[dm_addr `0`] `1`;
    st_dmb: DMb[dm_addr] = dmb_wr;
};

mem DMh [dm_size,2]<w16,addr> alias DMb access {
    ld_dmh: dmh_rd `1` = DMh[dm_addr `0`] `1`;
    st_dmh: DMh[dm_addr] = dmh_wr;
};

mem DMw [dm_size,4]<w32,addr> alias DMb access {
    ld_dmw: dmw_rd `1` = DMw[dm_addr `0`] `1`;
    st_dmw: DMw[dm_addr] = dmw_wr;
};

// subrange used to store static data with efficient 20 bit direct addressing.

mem DMb_stat [2**20,1]<w08,addr> alias DMb[0] access {};
mem DMh_stat [2**20,2]<w16,addr> alias DMb_stat access {};
mem DMw_stat [2**20,4]<w32,addr> alias DMb_stat access {};

property unconnected : DMb_stat, DMh_stat, DMw_stat;

// registers

reg R[16]<w32,uint4> syntax ("R") read(r0     // read port 0
                                       r1     // read port 1
                                       r2)    // read port 2
                                  write(w0    // write port 0
                                        w1    // write port 1
                                        w2);  // write port 2

reg SP <w32> alias R[1] read(spr) write(spw);  // stack pointer 
reg LR <w32> alias R[2] read(lrr) write(lrw);  // link register

reg PL <w32> alias R[14] read(plr) write(plw);  // low product 
reg PH <w32> alias R[15] read(phr) write(phw);  // high product 

reg PC <w32> read(pcr) write(pcw);            // program counter

reg MC <uint1>;		                      // MSB/Carry bit 


trn pd1w<w32>;        // input of pD1, is used in bypass rules
trn pe1w<w32>;        // input of pE1, is used in bypass rules

trn pd2w<w32>;        // input of pD2, is used in bypass rules
trn pe2w<w32>;        // input of pE2, is used in bypass rules

// constants

cst c4u   <uint4>;
cst c5s   <int5>;
cst c5u   <uint5>;
cst c16s  <int16>;
cst c16u  <uint16>;
cst c16p  <int16p>;
cst c26s  <int26>;


// properties

properties {
    program_counter : PC;
    program_memory  : PM;
    endianness      : big;
    decode_stage    : ID;
    unconnected     : SP;
    chess_pc_offset : instructions;
}

// start of instruction set grammar

start tlx;

opn tlx (alu_instr |
	 load_store_instr |
	 control_instr |
	 sha_instr 
	 // | div_instr 
	 );

#if defined(__go__)
opn always (ocd: ocd_if) { action { ocd; } }
#endif


#include "opcode.n"
#include "regfile.n"
#include "alu.n"
#include "ldst.n"
#include "control.n"
//#include "div.n"
#include "sha.n"

#include "ocd_if.n"

#include "hazards.n"


