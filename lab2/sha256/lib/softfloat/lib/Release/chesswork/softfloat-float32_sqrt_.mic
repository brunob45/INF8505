
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Jan 24 11:28:30 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-float32_sqrt_ tlx


// m5;   next: m127, jump target: m30 (next offset: 15)
000000  1 0  "10011100100001100000000000010111"   // (R[6]) = _rs_const_6_B1 (R[4]); 
000001  1 0  "01010100100000110000000000000000"   // R[3] = R[4]; 
000002  1 0  "00010000110001000000000011111111"   // (R[4]) = _ad_const_3_B1 (R[6]); 
000003  1 0  "00001000001000010000000000011100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (28,SP,SP); 
000004  1 0  "01001000000001110000000001111111"   // (R[7]) = lhi_const_1_B1 (127); 
000005  1 0  "01010100111001101111111111111111"   // (R[6]) = w32_const_bor_1_B1 (R[7],65535); 
000006  1 0  "01001000000001010111111111111111"   // (R[5]) = lhi_const_1_B1 (32767); 
000007  1 0  "10101000001000101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[2],SP,-12); 
000008  1 0  "00000000011001100011000000000011"   // (R[6]) = _ad_1_B1 (R[3],R[6]); 
000009  1 0  "10010100100010000000000011111111"   // (R[8]) = _ne_const_1_B1 (R[4]); 
000010  1 0  "10101000001001001111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[4],SP,-4); 
000011  1 0  "01010100101001111111111111111111"   // (R[7]) = w32_const_bor_1_B1 (R[5],65535); 
000012  1 0  "00100001000000000000000000010001"   // () = nez_br_const_1_B1 (R[8],17); 
000013  1 0  "10011100011001010000000000011111"   // (R[5]) = _rs_const_2_B1 (R[3]); 
000014  1 0  "10101000001001111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[7],SP,-8); 

// m127;   next: m15, jump target: m17 (next offset: 18)
000015  1 0  "00010100110000000000000000000101"   // () = eqz_br_const_1_B1 (R[6],5); 
000016  1 0  "01010000001000101111111111110100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000017  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m15;   next: m14 (next offset: 22)
000018  1 0  "01001000000001010000000000000000"   // (R[5]) = const_3_B3 (); 
000019  1 0  "01010100011001000000000000000000"   // R[4] = R[3]; 
000020  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000021  1 0  "00001000001000011111111111100100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-28,SP,SP); 

// m14 subroutine call;   next: m16 (next offset: 22)

// m16 (next offset: 22)

// m17;   next: m155 (next offset: 22)

// m155;   next: m24, jump target: m25 (next offset: 25)
000022  1 0  "00100000101000000000000000000100"   // () = nez_br_const_2_B1 (R[5],4); 
000023  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000024  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m24 (next offset: 28)
000025  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000026  1 0  "00001000001000011111111111100100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-28,SP,SP); 
000027  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m25;   next: m29 (next offset: 28)

// m29 (next offset: 31)
000028  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000029  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000030  1 0  "00001000001000011111111111100100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-28,SP,SP); 

// m30;   next: m130 (next offset: 31)

// m130;   next: m134, jump target: m47 (next offset: 34)
000031  1 0  "00010100101000000000000000001011"   // () = eqz_br_const_1_B1 (R[5],11); 
000032  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000033  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m134;   next: m41, jump target: m42 (next offset: 38)
000034  1 0  "00000000100001100010100000001010"   // (R[5]) = _or_2_B1 (R[4],R[6]); 
000035  1 0  "00100000101000000000000000000100"   // () = nez_br_const_2_B1 (R[5],4); 
000036  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000037  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m41 (next offset: 41)
000038  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000039  1 0  "00001000001000011111111111100100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-28,SP,SP); 
000040  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m42;   next: m46 (next offset: 41)

// m46 (next offset: 44)
000041  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000042  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000043  1 0  "00001000001000011111111111100100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-28,SP,SP); 

// m47;   next: m137 (next offset: 44)

// m137;   next: m140, jump target: m64 (next offset: 47)
000044  1 0  "00100000100000000000000000001100"   // () = nez_br_const_2_B1 (R[4],12); 
000045  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000046  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m140;   next: m59, jump target: m60 (next offset: 50)
000047  1 0  "00100000110000000000000000000101"   // () = nez_br_const_2_B1 (R[6],5); 
000048  1 0  "01010100100001010000000000000000"   // R[5] = R[4]; 
000049  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m59 (next offset: 54)
000050  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000051  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000052  1 0  "01001000000000110000000000000000"   // (R[3]) = const_3_B3 (); 
000053  1 0  "00001000001000011111111111100100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-28,SP,SP); 

// m60;   next: m62 (next offset: 54)

// m62;   next: m63 (next offset: 56)
000054  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000055  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 

// m63 subroutine call;   next: m214 (next offset: 56)

// m214;   next: m66 (next offset: 58)
000056  1 0  "01010100101001000000000000000000"   // R[4] = R[5]; 
000057  1 0  "10101000001001001111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[4],SP,-4); 

// m64;   next: m66 (next offset: 58)

// m66;   next: m67 (next offset: 68)
000058  1 0  "00001000100001011111111110000001"   // (R[5],MC) = _pl_const_5_B1 (R[4]); 
000059  1 0  "01001000000000110000000010000000"   // (R[3]) = const_2_B1 (); 
000060  1 0  "00000000011001100001100000001010"   // (R[3]) = _or_3_B1 (R[6],R[3]); 
000061  1 0  "10011000101001010000000000000001"   // (R[5]) = _rs_const_5_B1 (R[5]); 
000062  1 0  "00001000101001100000000001111110"   // (R[6],MC) = _pl_const_6_B1 (R[5]); 
000063  1 0  "10001000011001010000000000001000"   // (R[5]) = _ls_const_4_B1 (R[3]); 
000064  1 0  "10101000001001011111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[5],SP,-16); 
000065  1 0  "10101000001001101111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[6],SP,-20); 
000066  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000067  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m67 subroutine call;   next: m68 (next offset: 68)

// m68;   next: m72, jump target: m104 (next offset: 74)
000068  1 0  "00001000011001100000000000000010"   // (R[6],MC) = _pl_const_4_B1 (R[3]); 
000069  1 0  "00010000110001000000000001111111"   // (R[4]) = _ad_const_2_B1 (R[6]); 
000070  1 0  "01111000100001000000000000000101"   // (R[4]) = _gt_const_1_B1 (R[4]); 
000071  1 0  "00100000100000000000000001000100"   // () = nez_br_const_1_B1 (R[4],68); 
000072  1 0  "10101000001000111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[3],SP,-28); 
000073  1 0  "10101000001001101111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[6],SP,-24); 

// m72;   next: m175, jump target: m77 (next offset: 78)
000074  1 0  "10010000110001010000000000000010"   // (R[5]) = _lt_const_2_B1 (R[6]); 
000075  1 0  "00100000101000000000000000111100"   // () = nez_br_const_1_B1 (R[5],60); 
000076  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000077  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m175;   next: m176 (next offset: 88)
000078  1 0  "00010000100001000000000000000001"   // (R[4]) = _ad_const_1_B1 (R[4]); 
000079  1 0  "01010000001000111111111111110000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000080  1 0  "00000000011001000010000000010111"   // (R[4]) = _rs_1_B1 (R[3],R[4]); 
000081  1 0  "00010000110001011111111111111111"   // (R[5]) = __ushort_1_B1 (R[6]); 
000082  1 0  "10011100110000110000000000010000"   // (R[3]) = _rs_const_4_B1 (R[6]); 
000083  1 0  "10101000001001001111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[4],SP,-4); 
000084  1 0  "01111100001000111111111111111010"   // (__spill_DMh[-6]) = stack_store_bndl_B2 (R[3],SP,-6); 
000085  1 0  "01111100001001011111111111111000"   // (__spill_DMh[-8]) = stack_store_bndl_B2 (R[5],SP,-8); 
000086  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000087  1 0  "01010100101001000000000000000000"   // R[4] = R[5]; 

// m176 subroutine call;   next: m179 (next offset: 88)

// m179;   next: m180 (next offset: 92)
000088  1 0  "01001100001001001111111111111000"   // (R[4]) = stack_load_bndl_B2 (__spill_DMh[-8],SP,-8); 
000089  1 0  "10101000001000111111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[3],SP,-16); 
000090  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000091  1 0  "01001100001001011111111111111010"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-6],SP,-6); 

// m180 subroutine call;   next: m183 (next offset: 92)

// m183;   next: m184 (next offset: 96)
000092  1 0  "01001100001001011111111111111010"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-6],SP,-6); 
000093  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 
000094  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000095  1 0  "01010100101001000000000000000000"   // R[4] = R[5]; 

// m184 subroutine call;   next: m187 (next offset: 96)

// m187;   next: m191, jump target: m190 (next offset: 102)
000096  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000097  1 0  "10001000100001100000000000000001"   // (R[6]) = _ls_const_2_B1 (R[4]); 
000098  1 0  "00000000110001000010000000010100"   // (R[4]) = _lt_1_B1 (R[6],R[4]); 
000099  1 0  "00100000100000000000000000000010"   // () = nez_br_const_1_B1 (R[4],2); 
000100  1 0  "01001000000001010000000000000001"   // (R[5]) = const_1_B1 (); 
000101  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m191;   next: m173 (next offset: 103)
000102  1 0  "01001000000001010000000000000000"   // (R[5]) = const_3_B3 (); 

// m190;   next: m173 (next offset: 103)

// m173;   next: m80 (next offset: 113)
000103  1 0  "10011100110001110000000000010000"   // (R[7]) = _rs_const_3_B1 (R[6]); 
000104  1 0  "10001000110001000000000000010000"   // (R[4]) = _ls_const_3_B1 (R[6]); 
000105  1 0  "01010000001001101111111111110000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000106  1 0  "00000000101001110010100000000001"   // (R[5],MC) = _pl_1_B1 (R[5],R[7]); 
000107  1 0  "00000000100001100011000000000001"   // (R[6],MC) = _pl_2_B1 (R[6],R[4]); 
000108  1 0  "00000000011001010010100000000001"   // (R[5],MC) = _pl_2_B1 (R[3],R[5]); 
000109  1 0  "00000000110001000010000000010100"   // (R[4]) = _lt_1_B1 (R[6],R[4]); 
000110  1 0  "00000000100001010010100000000001"   // (R[5],MC) = _pl_3_B1 (R[5],R[4]); 
000111  1 0  "01010000001001111111111111111100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000112  1 0  "01010000001001001111111111100100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 

// m80 chess_separator_scheduler;   next: m81 (next offset: 113)

// m81;   next: m82 (next offset: 115)
000113  1 0  "00000000000001100001100000011000"   // (R[3],MC) = sub_const_1_B1 (R[6]); 
000114  1 0  "00000000111001010011000000011001"   // (R[6],MC) = subx_1_B1 (R[7],R[5],MC); 

// m82 chess_separator_scheduler;   next: m100 (next offset: 115)

// m100, jump target: m1 (next offset: 122)
000115  1 0  "01010000001001011111111111101000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000116  1 0  "00001000100001110000000000000001"   // (R[7],MC) = _pl_const_1_B1 (R[4]); 
000117  1 0  "10001000101001010000000000000001"   // (R[5]) = _ls_const_2_B1 (R[5]); 
000118  1 0  "00001000101010001111111111111110"   // (R[8],MC) = _pl_const_3_B1 (R[5]); 
000119  1 0  "01001000000001000000000000000000"   // (R[4]) = const_3_B3 (); 
000120  1 0  "00100100000000000000000000000111"   // () = j_const_1_B1 (7); 
000121  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m96;   next: m1 (next offset: 128)
000122  1 0  "10011100111010010000000000011111"   // (R[9]) = _rs_const_2_B1 (R[7]); 
000123  1 0  "01010101000010100000000000000001"   // (R[10]) = _or_const_1_B1 (R[8]); 
000124  1 0  "00001000111001111111111111111111"   // (R[7],MC) = _pl_const_2_B1 (R[7]); 
000125  1 0  "00001001000010001111111111111110"   // (R[8],MC) = _pl_const_3_B1 (R[8]); 
000126  1 0  "00000000011010100001100000000001"   // (R[3],MC) = add_1_B1 (R[3],R[10]); 
000127  1 0  "00000000110010010011000000000010"   // (R[6],MC) = addx_1_B1 (R[6],R[9],MC); 

// m1;   next: m97 (next offset: 128)

// m97;   next: m144, jump target: m96 (next offset: 132)
000128  1 0  "00000000110000000100100000010011"   // (R[9]) = _lt_const_1_B2 (R[6]); 
000129  1 0  "00100001001000001111111111110111"   // () = nez_br_const_1_B1 (R[9],-9); 
000130  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000131  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m144, jump target: m198 (next offset: 137)
000132  1 0  "00000000011001100001100000001010"   // (R[3]) = _or_2_B1 (R[6],R[3]); 
000133  1 0  "00000000011000000001100000010101"   // (R[3]) = nez_1_B1 (R[3]); 
000134  1 0  "00001000111001100000000000000001"   // (R[6],MC) = _pl_const_1_B1 (R[7]); 
000135  1 0  "00100100000000000000000000000111"   // () = j_const_1_B1 (7); 
000136  1 0  "00000000011001100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[3]); 

// m77, jump target: m2 (next offset: 141)
000137  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000138  1 0  "01001000000001000000000000000000"   // (R[4]) = const_3_B3 (); 
000139  1 0  "00100100000000000000000000000111"   // () = j_const_1_B1 (7); 
000140  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m104;   next: m198 (next offset: 143)
000141  1 0  "01001000000001000000000000000000"   // (R[4]) = const_3_B3 (); 
000142  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m198;   next: m2 (next offset: 147)
000143  1 0  "10001000110000110000000000011111"   // (R[3]) = _ls_const_1_B1 (R[6]); 
000144  1 0  "10011100110001100000000000000001"   // (R[6]) = _rs_const_1_B1 (R[6]); 
000145  1 0  "00000000011000000001100000010101"   // (R[3]) = nez_1_B1 (R[3]); 
000146  1 0  "00000000011001100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[3]); 

// m2;   next: m120 (next offset: 147)

// m120;   next: m119 (next offset: 150)
000147  1 0  "01010000001000101111111111110100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000148  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000149  1 0  "00001000001000011111111111100100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-28,SP,SP); 

// m119 subroutine call;   next: m121 (next offset: 150)

// m121 (next offset: /)

