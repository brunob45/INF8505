
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:35:18 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I.. -I../isg -I../runtime/include -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -itlx_chess.h +NOxrt +wlib/Release/chesswork ../softfloat/softfloat.c tlx

toolrelease _18R1;

// int mul_called(int, int)
F__sint_mul_called___sint___sint : user_defined, called {
    fnm : "mul_called" 'int mul_called(int, int)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
}

// unsigned div_called(unsigned, unsigned, chess_output unsigned &)
F__uint_div_called___uint___uint_R__uint : user_defined, called {
    fnm : "div_called" 'unsigned div_called(unsigned, unsigned, chess_output unsigned &)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:o );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
}

// float32 int32_to_float32(int32)
F__uint_int32_to_float32___sint : user_defined, called {
    fnm : "int32_to_float32" 'float32 int32_to_float32(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float64 int32_to_float64(int32)
Fdint_int32_to_float64___sint : user_defined, called {
    fnm : "int32_to_float64" 'float64 int32_to_float64(int)'; 
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int float32_to_int32(float32)
F__sint_float32_to_int32___uint : user_defined, called {
    fnm : "float32_to_int32" 'int float32_to_int32(float32)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int32 float32_to_int32_round_to_zero(float32)
F__sint_float32_to_int32_round_to_zero___uint : user_defined, called {
    fnm : "float32_to_int32_round_to_zero" 'int float32_to_int32_round_to_zero(float32)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float64 float32_to_float64(float32)
Fdint_float32_to_float64___uint : user_defined, called {
    fnm : "float32_to_float64" 'float64 float32_to_float64(float32)'; 
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] );
    frm : ( l=36 b=8 );
    llv : 0 0 0 0 0 ;
}

// float32 float32_round_to_int(float32)
F__uint_float32_round_to_int___uint : user_defined, called {
    fnm : "float32_round_to_int" 'float32 float32_round_to_int(float32)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float32 float32_add(float32, float32)
F__uint_float32_add___uint___uint : user_defined, called {
    fnm : "float32_add" 'float32 float32_add(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float32 float32_sub(float32, float32)
F__uint_float32_sub___uint___uint : user_defined, called {
    fnm : "float32_sub" 'float32 float32_sub(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float32 float32_mul(float32, float32)
F__uint_float32_mul___uint___uint : user_defined, called {
    fnm : "float32_mul" 'float32 float32_mul(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float32 float32_div(float32, float32)
F__uint_float32_div___uint___uint : user_defined, called {
    fnm : "float32_div" 'float32 float32_div(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float32 float32_rem(float32, float32)
F__uint_float32_rem___uint___uint : user_defined, called {
    fnm : "float32_rem" 'float32 float32_rem(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float32 float32_sqrt(float32)
F__uint_float32_sqrt___uint : user_defined, called {
    fnm : "float32_sqrt" 'float32 float32_sqrt(float32)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// flag float32_eq(float32, float32)
F__sint_float32_eq___uint___uint : user_defined, called {
    fnm : "float32_eq" 'int float32_eq(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// flag float32_le(float32, float32)
F__sint_float32_le___uint___uint : user_defined, called {
    fnm : "float32_le" 'int float32_le(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// flag float32_lt(float32, float32)
F__sint_float32_lt___uint___uint : user_defined, called {
    fnm : "float32_lt" 'int float32_lt(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int float32_eq_signaling(float32, float32)
F__sint_float32_eq_signaling___uint___uint : user_defined, called {
    fnm : "float32_eq_signaling" 'int float32_eq_signaling(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int float32_le_quiet(float32, float32)
F__sint_float32_le_quiet___uint___uint : user_defined, called {
    fnm : "float32_le_quiet" 'int float32_le_quiet(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int float32_lt_quiet(float32, float32)
F__sint_float32_lt_quiet___uint___uint : user_defined, called {
    fnm : "float32_lt_quiet" 'int float32_lt_quiet(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int float64_to_int32(float64)
F__sint_float64_to_int32_dint : user_defined, called {
    fnm : "float64_to_int32" 'int float64_to_int32(float64)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int32 float64_to_int32_round_to_zero(float64)
F__sint_float64_to_int32_round_to_zero_dint : user_defined, called {
    fnm : "float64_to_int32_round_to_zero" 'int float64_to_int32_round_to_zero(float64)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// float32 float64_to_float32(float64)
F__uint_float64_to_float32_dint : user_defined, called {
    fnm : "float64_to_float32" 'float32 float64_to_float32(float64)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( l=44 );
    llv : 0 0 0 0 0 ;
}

// float64 float64_round_to_int(float64)
Fdint_float64_round_to_int_dint : user_defined, called {
    fnm : "float64_round_to_int" 'float64 float64_round_to_int(float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( b=8 );
    llv : 0 0 0 0 0 ;
}

// float64 float64_add(float64, float64)
Fdint_float64_add_dint_dint : user_defined, called {
    fnm : "float64_add" 'float64 float64_add(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( b=8 );
    llv : 0 0 0 0 0 ;
}

// float64 float64_sub(float64, float64)
Fdint_float64_sub_dint_dint : user_defined, called {
    fnm : "float64_sub" 'float64 float64_sub(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( b=8 );
    llv : 0 0 0 0 0 ;
}

// float64 float64_mul(float64, float64)
Fdint_float64_mul_dint_dint : user_defined, called {
    fnm : "float64_mul" 'float64 float64_mul(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( l=16 b=8 );
    llv : 0 0 0 0 0 ;
}

// float64 float64_div(float64, float64)
Fdint_float64_div_dint_dint : user_defined, called {
    fnm : "float64_div" 'float64 float64_div(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( l=28 b=8 );
    llv : 0 0 0 0 0 ;
}

// float64 float64_rem(float64, float64)
Fdint_float64_rem_dint_dint : user_defined, called {
    fnm : "float64_rem" 'float64 float64_rem(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( b=8 );
    llv : 0 0 0 0 0 ;
}

// float64 float64_sqrt(float64)
Fdint_float64_sqrt_dint : user_defined, called {
    fnm : "float64_sqrt" 'float64 float64_sqrt(float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] );
    frm : ( l=12 b=8 );
    llv : 0 0 0 0 0 ;
}

// flag float64_eq(float64, float64)
F__sint_float64_eq_dint_dint : user_defined, called {
    fnm : "float64_eq" 'int float64_eq(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// flag float64_le(float64, float64)
F__sint_float64_le_dint_dint : user_defined, called {
    fnm : "float64_le" 'int float64_le(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// flag float64_lt(float64, float64)
F__sint_float64_lt_dint_dint : user_defined, called {
    fnm : "float64_lt" 'int float64_lt(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int float64_eq_signaling(float64, float64)
F__sint_float64_eq_signaling_dint_dint : user_defined, called {
    fnm : "float64_eq_signaling" 'int float64_eq_signaling(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int float64_le_quiet(float64, float64)
F__sint_float64_le_quiet_dint_dint : user_defined, called {
    fnm : "float64_le_quiet" 'int float64_le_quiet(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int float64_lt_quiet(float64, float64)
F__sint_float64_lt_quiet_dint_dint : user_defined, called {
    fnm : "float64_lt_quiet" 'int float64_lt_quiet(float64, float64)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] R[7] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// bits32 estimateDiv64To32(bits32, bits32, bits32)
F__softfloat___uint_estimateDiv64To32___uint___uint___uint : user_defined, called {
    fnm : "estimateDiv64To32" 'bits32 estimateDiv64To32(bits32, bits32, bits32)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// bits32 estimateSqrt32(int16, bits32)
F__softfloat___uint_estimateSqrt32___sint___uint : user_defined, called {
    fnm : "estimateSqrt32" 'bits32 estimateSqrt32(int16, bits32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int8 countLeadingZeros32(bits32)
F__softfloat___sint_countLeadingZeros32___uint : user_defined, called {
    fnm : "countLeadingZeros32" 'int8 countLeadingZeros32(bits32)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float32 propagateFloat32NaN(float32, float32)
F__softfloat___uint_propagateFloat32NaN___uint___uint : user_defined, called {
    fnm : "propagateFloat32NaN" 'float32 propagateFloat32NaN(float32, float32)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float64 commonNaNToFloat64(commonNaNT)
F__softfloat_dint_commonNaNToFloat64_commonNaNT : user_defined, called {
    fnm : "commonNaNToFloat64" 'float64 commonNaNToFloat64(commonNaNT)'; 
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float64 propagateFloat64NaN(float64, float64)
F__softfloat_dint_propagateFloat64NaN_dint_dint : user_defined, called {
    fnm : "propagateFloat64NaN" 'float64 propagateFloat64NaN(float64, float64)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void normalizeFloat32Subnormal(bits32, int16 &, bits32 &)
F__softfloat_void_normalizeFloat32Subnormal___uint_R__sint_R__uint : user_defined, called {
    fnm : "normalizeFloat32Subnormal" 'void normalizeFloat32Subnormal(bits32, int16 &, bits32 &)'; 
    arg : ( w32:i w32:i w32:i w32:o w32:i w32:o );
    loc : ( R[2] R[4] R[5] R[5] R[6] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float32 roundAndPackFloat32(flag, int16, bits32)
F__softfloat___uint_roundAndPackFloat32___sint___sint___uint : user_defined, called {
    fnm : "roundAndPackFloat32" 'float32 roundAndPackFloat32(flag, int16, bits32)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float32 normalizeRoundAndPackFloat32(flag, int16, bits32)
F__softfloat___uint_normalizeRoundAndPackFloat32___sint___sint___uint : user_defined, called {
    fnm : "normalizeRoundAndPackFloat32" 'float32 normalizeRoundAndPackFloat32(flag, int16, bits32)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void normalizeFloat64Subnormal(bits32, bits32, int16 &, bits32 &, bits32 &)
F__softfloat_void_normalizeFloat64Subnormal___uint___uint_R__sint_R__uint_R__uint : user_defined, called {
    fnm : "normalizeFloat64Subnormal" 'void normalizeFloat64Subnormal(bits32, bits32, int16 &, bits32 &, bits32 &)'; 
    arg : ( w32:i w32:i w32:i w32:i w32:o w32:i w32:o w32:i w32:o );
    loc : ( R[2] R[4] R[5] R[6] R[6] R[7] R[7] R[8] R[8] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float64 roundAndPackFloat64(flag, int16, bits32, bits32, bits32)
F__softfloat_dint_roundAndPackFloat64___sint___sint___uint___uint___uint : user_defined, called {
    fnm : "roundAndPackFloat64" 'float64 roundAndPackFloat64(flag, int16, bits32, bits32, bits32)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] R[8] );
    frm : ( l=12 );
    llv : 1 0 0 0 0 ;
}

// float64 normalizeRoundAndPackFloat64(flag, int16, bits32, bits32)
F__softfloat_dint_normalizeRoundAndPackFloat64___sint___sint___uint___uint : user_defined, called {
    fnm : "normalizeRoundAndPackFloat64" 'float64 normalizeRoundAndPackFloat64(flag, int16, bits32, bits32)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] );
    frm : ( l=12 b=8 );
    llv : 1 0 0 0 0 ;
}

// float32 addFloat32Sigs(float32, float32, flag)
F__softfloat___uint_addFloat32Sigs___uint___uint___sint : user_defined, called {
    fnm : "addFloat32Sigs" 'float32 addFloat32Sigs(float32, float32, flag)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float32 subFloat32Sigs(float32, float32, flag)
F__softfloat___uint_subFloat32Sigs___uint___uint___sint : user_defined, called {
    fnm : "subFloat32Sigs" 'float32 subFloat32Sigs(float32, float32, flag)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// float64 addFloat64Sigs(float64, float64, flag)
F__softfloat_dint_addFloat64Sigs_dint_dint___sint : user_defined, called {
    fnm : "addFloat64Sigs" 'float64 addFloat64Sigs(float64, float64, flag)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] R[8] );
    frm : ( l=28 b=8 );
    llv : 1 0 0 0 0 ;
}

// float64 subFloat64Sigs(float64, float64, flag)
F__softfloat_dint_subFloat64Sigs_dint_dint___sint : user_defined, called {
    fnm : "subFloat64Sigs" 'float64 subFloat64Sigs(float64, float64, flag)'; 
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( R[2] __spill_DMw[-8] __spill_DMw[-4] R[4] R[5] R[6] R[7] R[8] );
    frm : ( l=16 b=8 );
    llv : 1 0 0 0 0 ;
}

