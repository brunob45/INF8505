
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:35:20 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-normalizeRoundAndPackFloat64_ tlx


// m70;   next: m6, jump target: m7 (next offset: 7)
000000  1 0  "00001000001000010000000000100100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_2_B1 (36,SP,SP); 
000001  1 0  "10101000001001011111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[5],SP,-12); 
000002  1 0  "10101000001001001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[4],SP,-16); 
000003  1 0  "10101000001000101111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[2],SP,-20); 
000004  1 0  "00100000110000000000000000001000"   // () = nez_br_const_2_B1 (R[6],8); 
000005  1 0  "10101000001001101111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[6],-32,DMb[-32],SP); 
000006  1 0  "10101000001001111111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[7],-28,DMb[-28],SP); 

// m6;   next: m9 (next offset: 14)
000007  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000008  1 0  "01010000001001101111111111110100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000009  1 0  "01010000001001001111111111100100"   // (R[4]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 
000010  1 0  "00001000110001101111111111100000"   // (R[6],MC) = _pl_const_2_B1 (R[6]); 
000011  1 0  "10101000001001001111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[4],-32,DMb[-32],SP); 
000012  1 0  "10101000001000001111111111100100"   // (DMb[-28]) = store_const__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 
000013  1 0  "10101000001001101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[6],SP,-12); 

// m7;   next: m9 (next offset: 14)

// m9;   next: m10 (next offset: 19)
000014  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000015  1 0  "01010000001001001111111111100000"   // (R[4]) = load__pl_rd_res_reg_const_1_B1 (-32,DMb[-32],SP); 
000016  1 0  "10101000001001001111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[4],SP,-24); 
000017  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000018  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m10 subroutine call;   next: m11 (next offset: 19)

// m11;   next: m81, jump target: m76 (next offset: 25)
000019  1 0  "00001000011001001111111111110101"   // (R[4],MC) = _pl_const_1_B1 (R[3]); 
000020  1 0  "01010000001001101111111111100100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 
000021  1 0  "00000000100000000010100000001100"   // (R[5]) = _ge_const_1_B2 (R[4]); 
000022  1 0  "00100000101000000000000000101101"   // () = nez_br_const_1_B1 (R[5],45); 
000023  1 0  "00000000000001000011100000011000"   // (R[7],MC) = _mi_const_1_B1 (R[4]); 
000024  1 0  "00010000111000110000000000011111"   // (R[3]) = _ad_const_1_B1 (R[7]); 

// m81;   next: m28, jump target: m26 (next offset: 29)
000025  1 0  "00000000000001110010100000011000"   // (R[5],MC) = _mi_const_1_B1 (R[7]); 
000026  1 0  "00010100111000000000000000100100"   // () = eqz_br_const_1_B1 (R[7],36); 
000027  1 0  "00010000101010010000000000011111"   // (R[9]) = _ad_const_1_B1 (R[5]); 
000028  1 0  "01010000001001011111111111101000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 

// m28;   next: m33, jump target: m31 (next offset: 33)
000029  1 0  "10001100111010100000000000100000"   // (R[10]) = _lt_const_2_B1 (R[7]); 
000030  1 0  "00100001010000000000000000010111"   // () = nez_br_const_1_B1 (R[10],23); 
000031  1 0  "00000000101010010100000000010010"   // (R[8]) = _ls_1_B1 (R[5],R[9]); 
000032  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m33;   next: m38, jump target: m88 (next offset: 38)
000033  1 0  "01100100111010110000000000100000"   // (R[11]) = _eq_const_2_B1 (R[7]); 
000034  1 0  "01001000000010100000000000000000"   // (R[10]) = const_1_B3 (); 
000035  1 0  "00100001011000000000000000010111"   // () = nez_br_const_1_B1 (R[11],23); 
000036  1 0  "01010100101010010000000000000000"   // R[9] = R[5]; 
000037  1 0  "01001000000001010000000000000000"   // (R[5]) = const_1_B3 (); 

// m38;   next: m43, jump target: m41 (next offset: 42)
000038  1 0  "10001100111010100000000001000000"   // (R[10]) = _lt_const_1_B1 (R[7]); 
000039  1 0  "00100001010000000000000000001010"   // () = nez_br_const_1_B1 (R[10],10); 
000040  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000041  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m43;   next: m100, jump target: m46 (next offset: 46)
000042  1 0  "01100100111001110000000001000000"   // (R[7]) = _eq_const_1_B1 (R[7]); 
000043  1 0  "00100000111000000000000000000010"   // () = nez_br_const_1_B1 (R[7],2); 
000044  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000045  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m100;   next: m104 (next offset: 47)
000046  1 0  "00000001001000000100100000010101"   // (R[9]) = nez_1_B1 (R[9]); 

// m46;   next: m104 (next offset: 47)

// m104, jump target: m88 (next offset: 51)
000047  1 0  "01010100110010100000000000000000"   // R[10] = R[6]; 
000048  1 0  "01010101001001100000000000000000"   // R[6] = R[9]; 
000049  1 0  "00100100000000000000000000001010"   // () = j_const_1_B1 (10); 
000050  1 0  "01001000000010010000000000000000"   // (R[9]) = const_1_B3 (); 

// m41, jump target: m88 (next offset: 55)
000051  1 0  "00000001001000110100100000010111"   // (R[9]) = _rs_1_B1 (R[9],R[3]); 
000052  1 0  "01010100110010100000000000000000"   // R[10] = R[6]; 
000053  1 0  "00100100000000000000000000000110"   // () = j_const_1_B1 (6); 
000054  1 0  "01010101000001100000000000000000"   // R[6] = R[8]; 

// m31;   next: m88 (next offset: 60)
000055  1 0  "00000000110001110001100000010111"   // (R[3]) = _rs_1_B1 (R[6],R[7]); 
000056  1 0  "00000000110010010011000000010010"   // (R[6]) = _ls_1_B1 (R[6],R[9]); 
000057  1 0  "00000000011010000100100000001010"   // (R[9]) = _or_2_B1 (R[8],R[3]); 
000058  1 0  "00000000101001110010100000010111"   // (R[5]) = _rs_1_B1 (R[5],R[7]); 
000059  1 0  "01001000000010100000000000000000"   // (R[10]) = const_1_B3 (); 

// m88, jump target: m56 (next offset: 64)
000060  1 0  "00000001010000000011100000010101"   // (R[7]) = nez_1_B1 (R[10]); 
000061  1 0  "00000000110001110011100000001010"   // (R[7]) = _or_1_B1 (R[6],R[7]); 
000062  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000063  1 0  "01010101001001100000000000000000"   // R[6] = R[9]; 

// m26;   next: m56 (next offset: 65)
000064  1 0  "01001000000001110000000000000000"   // (R[7]) = const_1_B3 (); 

// m56, jump target: m58 (next offset: 69)
000065  1 0  "10101000001001101111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[6],-28,DMb[-28],SP); 
000066  1 0  "10101000001001011111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[5],-32,DMb[-32],SP); 
000067  1 0  "00100100000000000000000000001010"   // () = j_const_1_B1 (10); 
000068  1 0  "10101000001001111111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[7],-36,DMb[-36],SP); 

// m76;   next: m19, jump target: m18 (next offset: 74)
000069  1 0  "01010000001001011111111111101000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000070  1 0  "10101000001000001111111111011100"   // (DMb[-36]) = store_const__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000071  1 0  "00010100100000000000000000000100"   // () = eqz_br_const_1_B1 (R[4],4); 
000072  1 0  "00000000110001000011100000010010"   // (R[7]) = _ls_1_B1 (R[6],R[4]); 
000073  1 0  "10101000001001111111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[7],-28,DMb[-28],SP); 

// m19;   next: m21 (next offset: 77)
000074  1 0  "00000000101001000010100000010010"   // (R[5]) = _ls_1_B1 (R[5],R[4]); 
000075  1 0  "00000000110000110011000000010111"   // (R[6]) = _rs_1_B1 (R[6],R[3]); 
000076  1 0  "00000000101001100010100000001010"   // (R[5]) = _or_2_B1 (R[5],R[6]); 

// m18;   next: m21 (next offset: 77)

// m21;   next: m58 (next offset: 78)
000077  1 0  "10101000001001011111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[5],-32,DMb[-32],SP); 

// m58;   next: m59 (next offset: 86)
000078  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000079  1 0  "01010000001001101111111111110100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000080  1 0  "00000000110001000010100000011000"   // (R[5],MC) = _mi_1_B1 (R[6],R[4]); 
000081  1 0  "01010000001010001111111111011100"   // (R[8]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000082  1 0  "01010000001001001111111111110000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000083  1 0  "01010000001001111111111111100100"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 
000084  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000085  1 0  "01010000001001101111111111100000"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-32,DMb[-32],SP); 

// m59 subroutine call;   next: m61 (next offset: 86)

// m61 (next offset: /)
000086  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000087  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000088  1 0  "01010000001001101111111111101100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000089  1 0  "10101000001001011111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[5],SP,-44); 
000090  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000091  1 0  "10101000001001001111111111011000"   // (__spill_DMw[-40]) = stack_store_bndl_B3 (R[4],SP,-40); 
000092  1 0  "00001000001000011111111111011100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (-36,SP,SP); 

