
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Jan 24 11:28:29 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-propagateFloat64NaN_ tlx


// m51;   next: m182, jump target: m60 (next offset: 31)
000000  1 0  "01001000000000110000000000000111"   // (R[3]) = lhi_const_1_B1 (7); 
000001  1 0  "01010100011010101111111111111111"   // (R[10]) = w32_const_bor_1_B1 (R[3],65535); 
000002  1 0  "01001000000000110000000000001111"   // (R[3]) = lhi_const_1_B1 (15); 
000003  1 0  "01010100011010111111111111111111"   // (R[11]) = w32_const_bor_1_B1 (R[3],65535); 
000004  1 0  "00000000110010110111000000000011"   // (R[14]) = _ad_1_B1 (R[6],R[11]); 
000005  1 0  "00000000110010100100000000000011"   // (R[8]) = _ad_1_B1 (R[6],R[10]); 
000006  1 0  "00000000100010100101100000000011"   // (R[11]) = _ad_1_B1 (R[4],R[10]); 
000007  1 0  "10001000110000110000000000000001"   // (R[3]) = _ls_const_1_B1 (R[6]); 
000008  1 0  "10011100100011000000000000010011"   // (R[12]) = _rs_const_1_B1 (R[4]); 
000009  1 0  "01001000000010011111111111100000"   // (R[9]) = const_1_B1 (); 
000010  1 0  "00000000101000000101000000010101"   // (R[10]) = nez_1_B1 (R[5]); 
000011  1 0  "00000001011000000101100000010101"   // (R[11]) = nez_1_B1 (R[11]); 
000012  1 0  "10011100110011010000000000010011"   // (R[13]) = _rs_const_1_B1 (R[6]); 
000013  1 0  "00000000011010010001100000001101"   // (R[3]) = _ge_1_B1 (R[3],R[9]); 
000014  1 0  "00000001010010110101000000001010"   // (R[10]) = lor_1_B1 (R[10],R[11]); 
000015  1 0  "00010001100011000000111111111111"   // (R[12]) = _ad_const_1_B1 (R[12]); 
000016  1 0  "00000001110000000111100000010101"   // (R[15]) = nez_1_B1 (R[14]); 
000017  1 0  "00000000111000000100100000010101"   // (R[9]) = nez_1_B1 (R[7]); 
000018  1 0  "00000001000000000100000000010101"   // (R[8]) = nez_1_B1 (R[8]); 
000019  1 0  "01100101100010110000111111111110"   // (R[11]) = _eq_const_1_B1 (R[12]); 
000020  1 0  "00010001101011010000111111111111"   // (R[13]) = _ad_const_1_B1 (R[13]); 
000021  1 0  "00000001000010010100000000001010"   // (R[8]) = lor_1_B1 (R[9],R[8]); 
000022  1 0  "01001000000011100000000000001000"   // (R[14]) = const_2_B1 (); 
000023  1 0  "01100101101011000000111111111110"   // (R[12]) = _eq_const_1_B1 (R[13]); 
000024  1 0  "00000000100011100010000000001010"   // (R[4]) = _or_1_B1 (R[4],R[14]); 
000025  1 0  "00000000110011100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[14]); 
000026  1 0  "00000001001011110100100000001010"   // (R[9]) = lor_1_B1 (R[9],R[15]); 
000027  1 0  "00000001000011000100000000000011"   // (R[8]) = land_1_B1 (R[12],R[8]); 
000028  1 0  "00100001000000000000000000001101"   // () = br_nez_const_1_B1 (R[8],13); 
000029  1 0  "00000001010010110101000000000011"   // (R[10]) = land_1_B1 (R[11],R[10]); 
000030  1 0  "00000000011010010001100000000011"   // (R[3]) = land_1_B1 (R[3],R[9]); 

// m182;   next: m180, jump target: m65 (next offset: 34)
000031  1 0  "00100001010000000000000000001000"   // () = br_nez_const_1_B1 (R[10],8); 
000032  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000033  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m180;   next: m71, jump target: m70 (next offset: 37)
000034  1 0  "00100000011000000000000000000011"   // () = br_nez_const_1_B1 (R[3],3); 
000035  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000036  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m71;   next: m183 (next offset: 39)
000037  1 0  "01010100101001110000000000000000"   // R[7] = R[5]; 
000038  1 0  "01010100100001100000000000000000"   // R[6] = R[4]; 

// m70;   next: m183 (next offset: 39)

// m183;   next: m184 (next offset: 41)
000039  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 
000040  1 0  "01010100111001010000000000000000"   // R[5] = R[7]; 

// m65;   next: m184 (next offset: 41)

// m184;   next: m76 (next offset: 43)
000041  1 0  "01010100100001100000000000000000"   // R[6] = R[4]; 
000042  1 0  "01010100101001110000000000000000"   // R[7] = R[5]; 

// m60;   next: m76 (next offset: 43)

// m76 (next offset: /)
000043  1 0  "10101000001001101111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[6],SP,-8); 
000044  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000045  1 0  "10101000001001111111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[7],SP,-4); 
000046  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

