
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Jan 24 11:28:28 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-estimateDiv64To32_ tlx


// m4;   next: m10, jump target: m11 (next offset: 6)
000000  1 0  "00001000001000010000000000101000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (40,SP,SP); 
000001  1 0  "00000000110001000001100000001111"   // (R[3]) = _gt_1_B1 (R[6],R[4]); 
000002  1 0  "10101000001001101111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[6],SP,-8); 
000003  1 0  "00100000011000000000000000000110"   // () = nez_br_const_1_B1 (R[3],6); 
000004  1 0  "10101000001000101111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[2],SP,-4); 
000005  1 0  "10101000001001011111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[5],SP,-12); 

// m10 (next offset: 11)
000006  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000007  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000008  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000009  1 0  "00001000000000111111111111111111"   // (R[3]) = const_5_B1 (); 
000010  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m11;   next: m13 (next offset: 11)

// m13;   next: m95, jump target: m16 (next offset: 20)
000011  1 0  "10011100110000110000000000010000"   // (R[3]) = _rs_const_1_B1 (R[6]); 
000012  1 0  "10001000011001010000000000010000"   // (R[5]) = _ls_const_1_B1 (R[3]); 
000013  1 0  "10101000001001011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[5],SP,-20); 
000014  1 0  "10101000001001001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[4],SP,-16); 
000015  1 0  "00000000101001000010100000010001"   // (R[5]) = _le_1_B1 (R[5],R[4]); 
000016  1 0  "01001000000001111111111111111111"   // (R[7]) = const_4_B1 (); 
000017  1 0  "00100000101000000000000000001001"   // () = nez_br_const_1_B1 (R[5],9); 
000018  1 0  "10101000001001111111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[7],SP,-24); 
000019  1 0  "10101000001000111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[3],SP,-28); 

// m95;   next: m96 (next offset: 24)
000020  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000021  1 0  "01010000001001001111111111110000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000022  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000023  1 0  "01010000001001011111111111100100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 

// m96 subroutine call;   next: m93 (next offset: 24)

// m93;   next: m68 (next offset: 28)
000024  1 0  "10001000011001110000000000010000"   // (R[7]) = _ls_const_1_B1 (R[3]); 
000025  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000026  1 0  "01010000001000111111111111100100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000027  1 0  "10101000001001111111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[7],SP,-24); 

// m16;   next: m68 (next offset: 28)

// m68;   next: m69 (next offset: 37)
000028  1 0  "00010000110001001111111111111111"   // (R[4]) = __ushort_1_B1 (R[6]); 
000029  1 0  "00010000111001011111111111111111"   // (R[5]) = __ushort_1_B1 (R[7]); 
000030  1 0  "10011100111001100000000000010000"   // (R[6]) = _rs_const_2_B1 (R[7]); 
000031  1 0  "01111100001000111111111111100010"   // (__spill_DMh[-30]) = stack_store_bndl_B2 (R[3],SP,-30); 
000032  1 0  "01111100001001101111111111100000"   // (__spill_DMh[-32]) = stack_store_bndl_B2 (R[6],SP,-32); 
000033  1 0  "01111100001001011111111111011110"   // (__spill_DMh[-34]) = stack_store_bndl_B2 (R[5],SP,-34); 
000034  1 0  "01111100001001001111111111011100"   // (__spill_DMh[-36]) = stack_store_bndl_B2 (R[4],SP,-36); 
000035  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000036  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m69 subroutine call;   next: m72 (next offset: 37)

// m72;   next: m73 (next offset: 41)
000037  1 0  "01001100001001001111111111011100"   // (R[4]) = stack_load_bndl_B2 (__spill_DMh[-36],SP,-36); 
000038  1 0  "10101000001000111111111111011000"   // (__spill_DMw[-40]) = stack_store_bndl_B3 (R[3],SP,-40); 
000039  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000040  1 0  "01001100001001011111111111100000"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-32],SP,-32); 

// m73 subroutine call;   next: m76 (next offset: 41)

// m76;   next: m77 (next offset: 45)
000041  1 0  "01001100001001011111111111011110"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-34],SP,-34); 
000042  1 0  "10101000001000111111111111011100"   // (__spill_DMw[-36]) = stack_store_bndl_B3 (R[3],SP,-36); 
000043  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000044  1 0  "01001100001001001111111111100010"   // (R[4]) = stack_load_bndl_B2 (__spill_DMh[-30],SP,-30); 

// m77 subroutine call;   next: m80 (next offset: 45)

// m80;   next: m81 (next offset: 50)
000045  1 0  "01001100001001011111111111100000"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-32],SP,-32); 
000046  1 0  "01001100001001001111111111100010"   // (R[4]) = stack_load_bndl_B2 (__spill_DMh[-30],SP,-30); 
000047  1 0  "10101000001000111111111111100000"   // (__spill_DMw[-32]) = stack_store_bndl_B3 (R[3],SP,-32); 
000048  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000049  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m81 subroutine call;   next: m84 (next offset: 50)

// m84;   next: m88, jump target: m87 (next offset: 57)
000050  1 0  "01010000001001011111111111100000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-32],SP,-32); 
000051  1 0  "01010000001001001111111111011100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-36],SP,-36); 
000052  1 0  "00000000100001010011000000000001"   // (R[6],MC) = _pl_3_B1 (R[4],R[5]); 
000053  1 0  "00000000110001010010100000010100"   // (R[5]) = _lt_1_B1 (R[6],R[5]); 
000054  1 0  "00100000101000000000000000000010"   // () = nez_br_const_1_B1 (R[5],2); 
000055  1 0  "01001000000001000000000000000001"   // (R[4]) = const_3_B1 (); 
000056  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m88;   next: m66 (next offset: 58)
000057  1 0  "01001000000001000000000000000000"   // (R[4]) = const_2_B3 (); 

// m87;   next: m66 (next offset: 58)

// m66;   next: m20 (next offset: 69)
000058  1 0  "10011100110001110000000000010000"   // (R[7]) = _rs_const_1_B1 (R[6]); 
000059  1 0  "10001000110001010000000000010000"   // (R[5]) = _ls_const_1_B1 (R[6]); 
000060  1 0  "00000000100001110011100000000001"   // (R[7],MC) = _pl_2_B1 (R[4],R[7]); 
000061  1 0  "01010000001001101111111111011000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-40],SP,-40); 
000062  1 0  "00000000101001100010000000000001"   // (R[4],MC) = _pl_3_B1 (R[6],R[5]); 
000063  1 0  "00000000011001110001100000000001"   // (R[3],MC) = _pl_3_B1 (R[3],R[7]); 
000064  1 0  "00000000100001010010100000010100"   // (R[5]) = _lt_1_B1 (R[4],R[5]); 
000065  1 0  "00000000011001010011000000000001"   // (R[6],MC) = _pl_4_B1 (R[3],R[5]); 
000066  1 0  "01010000001001011111111111100100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000067  1 0  "01010000001001111111111111110100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000068  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 

// m20 chess_separator_scheduler;   next: m21 (next offset: 69)

// m21;   next: m22 (next offset: 72)
000069  1 0  "00000000111001000010000000011000"   // (R[4],MC) = sub_1_B1 (R[7],R[4]); 
000070  1 0  "01010000001001111111111111110000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000071  1 0  "00000000111001100011000000011001"   // (R[6],MC) = subx_1_B1 (R[7],R[6],MC); 

// m22 chess_separator_scheduler;   next: m34 (next offset: 72)

// m34, jump target: m1 (next offset: 76)
000072  1 0  "10001000011001110000000000010000"   // (R[7]) = _ls_const_1_B1 (R[3]); 
000073  1 0  "01001000000010001111111111111111"   // (R[8]) = const_4_B1 (); 
000074  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000075  1 0  "01010000001000111111111111101000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 

// m30;   next: m1 (next offset: 79)
000076  1 0  "00000000100001110010000000000001"   // (R[4],MC) = add_1_B1 (R[4],R[7]); 
000077  1 0  "00000000101001100011000000000010"   // (R[6],MC) = addx_1_B1 (R[6],R[5],MC); 
000078  1 0  "00000000011010000001100000000001"   // (R[3],MC) = _pl_1_B1 (R[3],R[8]); 

// m1;   next: m31 (next offset: 79)

// m31;   next: m36, jump target: m30 (next offset: 83)
000079  1 0  "00000000110000000100100000010011"   // (R[9]) = _lt_const_1_B2 (R[6]); 
000080  1 0  "00100001001000001111111111111010"   // () = nez_br_const_1_B1 (R[9],-6); 
000081  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000082  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m36;   next: m99, jump target: m39 (next offset: 91)
000083  1 0  "10001000110001100000000000010000"   // (R[6]) = _ls_const_1_B1 (R[6]); 
000084  1 0  "10011100100001000000000000010000"   // (R[4]) = _rs_const_1_B1 (R[4]); 
000085  1 0  "00000000100001100010000000001010"   // (R[4]) = _or_1_B1 (R[6],R[4]); 
000086  1 0  "01010000001001101111111111101100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000087  1 0  "00000000110001000011000000010001"   // (R[6]) = _le_1_B1 (R[6],R[4]); 
000088  1 0  "00100000110000000000000000000101"   // () = nez_br_const_1_B1 (R[6],5); 
000089  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 
000090  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m99;   next: m100 (next offset: 93)
000091  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000092  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m100 subroutine call;   next: m104 (next offset: 93)

// m104, jump target: m44 (next offset: 95)
000093  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000094  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m39;   next: m44 (next offset: 96)
000095  1 0  "01010100000000111111111111111111"   // (R[3]) = const_1_B1 (); 

// m44 (next offset: /)
000096  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000097  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000098  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000099  1 0  "00000000011001000001100000001010"   // (R[3]) = _or_1_B1 (R[4],R[3]); 
000100  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

