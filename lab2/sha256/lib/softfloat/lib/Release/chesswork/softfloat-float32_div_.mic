
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Feb 28 14:35:21 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-float32_div_ tlx


// m159;   next: m142, jump target: m40 (next offset: 25)
000000  1 0  "00001000001000010000000000101000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (40,SP,SP); 
000001  1 0  "10011100100001100000000000011111"   // (R[6]) = _rs_const_5_B1 (R[4]); 
000002  1 0  "10011100101000110000000000011111"   // (R[3]) = _rs_const_5_B1 (R[5]); 
000003  1 0  "00000000011001100001100000011010"   // (R[3]) = _er_1_B1 (R[6],R[3]); 
000004  1 0  "10011100100001110000000000010111"   // (R[7]) = _rs_const_4_B1 (R[4]); 
000005  1 0  "00010000111011000000000011111111"   // (R[12]) = _ad_const_2_B1 (R[7]); 
000006  1 0  "10101000001000111111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[3],SP,-4); 
000007  1 0  "01001000000001100000000001111111"   // (R[6]) = lhi_const_1_B1 (127); 
000008  1 0  "10011100101001110000000000010111"   // (R[7]) = _rs_const_4_B1 (R[5]); 
000009  1 0  "10001000011000110000000000011111"   // (R[3]) = _ls_const_5_B1 (R[3]); 
000010  1 0  "01010100110001101111111111111111"   // (R[6]) = w32_const_bor_1_B1 (R[6],65535); 
000011  1 0  "00000000100001100100000000000011"   // (R[8]) = _ad_1_B1 (R[4],R[6]); 
000012  1 0  "00010000111001110000000011111111"   // (R[7]) = _ad_const_2_B1 (R[7]); 
000013  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 
000014  1 0  "10101000001011001111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[12],SP,-12); 
000015  1 0  "01001000000010100111111110000000"   // (R[10]) = const_4_B1 (); 
000016  1 0  "00000000101001100011000000000011"   // (R[6]) = _ad_1_B1 (R[5],R[6]); 
000017  1 0  "10010100111010110000000011111111"   // (R[11]) = _ne_const_1_B1 (R[7]); 
000018  1 0  "10010101100011000000000011111111"   // (R[12]) = _ne_const_1_B1 (R[12]); 
000019  1 0  "00000000011010100001100000000001"   // (R[3],MC) = _pl_4_B1 (R[3],R[10]); 
000020  1 0  "10101000001000101111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[2],SP,-20); 
000021  1 0  "01001000000010010111111111111111"   // (R[9]) = lhi_const_1_B1 (32767); 
000022  1 0  "00100001100000000000000000010110"   // () = nez_br_const_1_B1 (R[12],22); 
000023  1 0  "10101000001010001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[8],SP,-16); 
000024  1 0  "01010101001010001111111111111111"   // (R[8]) = w32_const_bor_1_B1 (R[9],65535); 

// m142;   next: m14, jump target: m16 (next offset: 29)
000025  1 0  "01010000001001111111111111110000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000026  1 0  "00010100111000000000000000000100"   // () = br_eqz_const_1_B1 (R[7],4); 
000027  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000028  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m14;   next: m13 (next offset: 32)
000029  1 0  "01010000001000101111111111101100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000030  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000031  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m13 subroutine call;   next: m15 (next offset: 32)

// m15 (next offset: 32)

// m16;   next: m246 (next offset: 32)

// m246;   next: m244, jump target: m35 (next offset: 35)
000032  1 0  "00100001011000000000000000001001"   // () = nez_br_const_1_B1 (R[11],9); 
000033  1 0  "01010000001000101111111111101100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000034  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m244;   next: m28, jump target: m30 (next offset: 38)
000035  1 0  "00010100110000000000000000000011"   // () = br_eqz_const_1_B1 (R[6],3); 
000036  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000037  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m28;   next: m27 (next offset: 40)
000038  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000039  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m27 subroutine call;   next: m29 (next offset: 40)

// m29 (next offset: 40)

// m30;   next: m34 (next offset: 40)

// m34 (next offset: 43)
000040  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000041  1 0  "01010101000000110000000000000000"   // R[3] = R[8]; 
000042  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m35;   next: m39 (next offset: 43)

// m39 (next offset: 46)
000043  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000044  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 
000045  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m40;   next: m247 (next offset: 46)

// m247;   next: m245, jump target: m59 (next offset: 49)
000046  1 0  "00100001011000000000000000001010"   // () = nez_br_const_1_B1 (R[11],10); 
000047  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000048  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m245;   next: m52, jump target: m54 (next offset: 52)
000049  1 0  "00010100110000000000000000000011"   // () = br_eqz_const_1_B1 (R[6],3); 
000050  1 0  "01010000001000101111111111101100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000051  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m52;   next: m51 (next offset: 54)
000052  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000053  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m51 subroutine call;   next: m53 (next offset: 54)

// m53 (next offset: 54)

// m54;   next: m58 (next offset: 55)
000054  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 

// m58 (next offset: 58)
000055  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000056  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 
000057  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m59;   next: m163 (next offset: 58)

// m163;   next: m166, jump target: m85 (next offset: 61)
000058  1 0  "00100000111000000000000000011000"   // () = nez_br_const_2_B1 (R[7],24); 
000059  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000060  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m166;   next: m170, jump target: m81 (next offset: 64)
000061  1 0  "00100000110000000000000000001111"   // () = nez_br_const_2_B1 (R[6],15); 
000062  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000063  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m170;   next: m75, jump target: m76 (next offset: 70)
000064  1 0  "01010000001001011111111111110000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000065  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000066  1 0  "00000000100001010010100000001010"   // (R[5]) = _or_3_B1 (R[4],R[5]); 
000067  1 0  "00100000101000000000000000000101"   // () = nez_br_const_2_B1 (R[5],5); 
000068  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000069  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m75 (next offset: 74)
000070  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000071  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000072  1 0  "01010101000000110000000000000000"   // R[3] = R[8]; 
000073  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m76;   next: m80 (next offset: 74)

// m80 (next offset: 78)
000074  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000075  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000076  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 
000077  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m81;   next: m83 (next offset: 78)

// m83;   next: m84 (next offset: 81)
000078  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 
000079  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000080  1 0  "01010100111001010000000000000000"   // R[5] = R[7]; 

// m84 subroutine call;   next: m248 (next offset: 81)

// m248, jump target: m173 (next offset: 84)
000081  1 0  "01010100101001110000000000000000"   // R[7] = R[5]; 
000082  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000083  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 

// m85;   next: m173 (next offset: 85)
000084  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 

// m173;   next: m176, jump target: m102 (next offset: 88)
000085  1 0  "00100000101000000000000000001100"   // () = nez_br_const_2_B1 (R[5],12); 
000086  1 0  "01010000001001001111111111110000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000087  1 0  "10101000001001111111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[7],SP,-12); 

// m176;   next: m97, jump target: m98 (next offset: 91)
000088  1 0  "00100000100000000000000000000101"   // () = nez_br_const_2_B1 (R[4],5); 
000089  1 0  "10101000001001101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[6],SP,-16); 
000090  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m97 (next offset: 95)
000091  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000092  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000093  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000094  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m98;   next: m100 (next offset: 95)

// m100;   next: m101 (next offset: 97)
000095  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000096  1 0  "01010100100001100000000000000000"   // R[6] = R[4]; 

// m101 subroutine call;   next: m249 (next offset: 97)

// m249, jump target: m104 (next offset: 99)
000097  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000098  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 

// m102;   next: m104 (next offset: 100)
000099  1 0  "10101000001001101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[6],SP,-16); 

// m104;   next: m107, jump target: m108 (next offset: 115)
000100  1 0  "01001000000001100000000010000000"   // (R[6]) = const_3_B1 (); 
000101  1 0  "00000000100001100010000000001010"   // (R[4]) = _or_2_B1 (R[4],R[6]); 
000102  1 0  "01010000001000111111111111110000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000103  1 0  "01010000001001111111111111110100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000104  1 0  "00000000011001100011000000001010"   // (R[6]) = _or_2_B1 (R[3],R[6]); 
000105  1 0  "00000000101001110010100000011000"   // (R[5],MC) = _mi_1_B1 (R[5],R[7]); 
000106  1 0  "10001000100001000000000000000111"   // (R[4]) = _ls_const_2_B1 (R[4]); 
000107  1 0  "00001000101000110000000001111101"   // (R[3],MC) = _pl_const_3_B1 (R[5]); 
000108  1 0  "10001000110001100000000000001000"   // (R[6]) = _ls_const_3_B1 (R[6]); 
000109  1 0  "10001000100001010000000000000001"   // (R[5]) = _ls_const_4_B1 (R[4]); 
000110  1 0  "00000000110001010010100000001111"   // (R[5]) = _gt_1_B1 (R[6],R[5]); 
000111  1 0  "10101000001001001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[4],SP,-16); 
000112  1 0  "00100000101000000000000000000110"   // () = nez_br_const_1_B1 (R[5],6); 
000113  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 
000114  1 0  "10101000001001101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[6],SP,-12); 

// m107;   next: m110 (next offset: 120)
000115  1 0  "10011100100001000000000000000001"   // (R[4]) = _rs_const_3_B1 (R[4]); 
000116  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000117  1 0  "00001000101001010000000000000001"   // (R[5],MC) = _pl_const_2_B1 (R[5]); 
000118  1 0  "10101000001001011111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[5],SP,-8); 
000119  1 0  "10101000001001001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[4],SP,-16); 

// m108;   next: m110 (next offset: 120)

// m110;   next: m111 (next offset: 122)
000120  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000121  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 

// m111 subroutine call;   next: m112 (next offset: 122)

// m112;   next: m201, jump target: m134 (next offset: 127)
000122  1 0  "00010000011001010000000000111111"   // (R[5]) = _ad_const_1_B1 (R[3]); 
000123  1 0  "01111000101001010000000000000010"   // (R[5]) = _gt_const_1_B1 (R[5]); 
000124  1 0  "00100000101000000000000000111010"   // () = nez_br_const_1_B1 (R[5],58); 
000125  1 0  "01010000001001101111111111110100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000126  1 0  "10101000001000111111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[3],SP,-24); 

// m201;   next: m202 (next offset: 137)
000127  1 0  "00010000110001001111111111111111"   // (R[4]) = __ushort_1_B1 (R[6]); 
000128  1 0  "00010000011001011111111111111111"   // (R[5]) = __ushort_1_B1 (R[3]); 
000129  1 0  "10011100011001110000000000010000"   // (R[7]) = _rs_const_2_B1 (R[3]); 
000130  1 0  "10011100110001100000000000010000"   // (R[6]) = _rs_const_2_B1 (R[6]); 
000131  1 0  "01111100001001111111111111100110"   // (__spill_DMh[-26]) = stack_store_bndl_B2 (R[7],SP,-26); 
000132  1 0  "01111100001001011111111111100100"   // (__spill_DMh[-28]) = stack_store_bndl_B2 (R[5],SP,-28); 
000133  1 0  "01111100001001101111111111100010"   // (__spill_DMh[-30]) = stack_store_bndl_B2 (R[6],SP,-30); 
000134  1 0  "01111100001001001111111111100000"   // (__spill_DMh[-32]) = stack_store_bndl_B2 (R[4],SP,-32); 
000135  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000136  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m202 subroutine call;   next: m205 (next offset: 137)

// m205;   next: m206 (next offset: 141)
000137  1 0  "01001100001001001111111111100000"   // (R[4]) = stack_load_bndl_B2 (__spill_DMh[-32],SP,-32); 
000138  1 0  "10101000001000111111111111011100"   // (__spill_DMw[-36]) = stack_store_bndl_B3 (R[3],SP,-36); 
000139  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000140  1 0  "01001100001001011111111111100110"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-26],SP,-26); 

// m206 subroutine call;   next: m209 (next offset: 141)

// m209;   next: m210 (next offset: 145)
000141  1 0  "01001100001001001111111111100010"   // (R[4]) = stack_load_bndl_B2 (__spill_DMh[-30],SP,-30); 
000142  1 0  "10101000001000111111111111011000"   // (__spill_DMw[-40]) = stack_store_bndl_B3 (R[3],SP,-40); 
000143  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000144  1 0  "01001100001001011111111111100100"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-28],SP,-28); 

// m210 subroutine call;   next: m213 (next offset: 145)

// m213;   next: m214 (next offset: 149)
000145  1 0  "01001100001001011111111111100110"   // (R[5]) = stack_load_bndl_B2 (__spill_DMh[-26],SP,-26); 
000146  1 0  "10101000001000111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[3],SP,-28); 
000147  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000148  1 0  "01001100001001001111111111100010"   // (R[4]) = stack_load_bndl_B2 (__spill_DMh[-30],SP,-30); 

// m214 subroutine call;   next: m217 (next offset: 149)

// m217;   next: m221, jump target: m220 (next offset: 156)
000149  1 0  "01010000001001011111111111100100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000150  1 0  "01010000001001001111111111011000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-40],SP,-40); 
000151  1 0  "00000000100001010011000000000001"   // (R[6],MC) = _pl_2_B1 (R[4],R[5]); 
000152  1 0  "00000000110001010010100000010100"   // (R[5]) = _lt_1_B1 (R[6],R[5]); 
000153  1 0  "00100000101000000000000000000010"   // () = nez_br_const_1_B1 (R[5],2); 
000154  1 0  "01001000000001000000000000000001"   // (R[4]) = const_1_B1 (); 
000155  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m221;   next: m199 (next offset: 157)
000156  1 0  "01001000000001000000000000000000"   // (R[4]) = const_2_B3 (); 

// m220;   next: m199 (next offset: 157)

// m199;   next: m117 (next offset: 167)
000157  1 0  "10011100110001110000000000010000"   // (R[7]) = _rs_const_1_B1 (R[6]); 
000158  1 0  "10001000110001010000000000010000"   // (R[5]) = _ls_const_1_B1 (R[6]); 
000159  1 0  "01010000001001101111111111011100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-36],SP,-36); 
000160  1 0  "00000000100001110010000000000001"   // (R[4],MC) = _pl_1_B1 (R[4],R[7]); 
000161  1 0  "00000000101001100011000000000001"   // (R[6],MC) = _pl_2_B1 (R[6],R[5]); 
000162  1 0  "00000000011001000010000000000001"   // (R[4],MC) = _pl_2_B1 (R[3],R[4]); 
000163  1 0  "00000000110001010010100000010100"   // (R[5]) = _lt_1_B1 (R[6],R[5]); 
000164  1 0  "00000000100001010010100000000001"   // (R[5],MC) = _pl_3_B1 (R[4],R[5]); 
000165  1 0  "01010000001001001111111111101000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000166  1 0  "01010000001000111111111111110000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 

// m117 chess_separator_scheduler;   next: m131 (next offset: 167)

// m131, jump target: m1 (next offset: 172)
000167  1 0  "00000000000001100011000000011000"   // (R[6],MC) = sub_const_1_B1 (R[6]); 
000168  1 0  "00000000011001010001100000011001"   // (R[3],MC) = subx_1_B1 (R[3],R[5],MC); 
000169  1 0  "01010000001001111111111111110100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000170  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000171  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 

// m127;   next: m1 (next offset: 175)
000172  1 0  "00000000110001110011000000000001"   // (R[6],MC) = add_1_B1 (R[6],R[7]); 
000173  1 0  "00000000011000000001100000000010"   // (R[3],MC) = addx_const_1_B3 (R[3],MC); 
000174  1 0  "00001000100001001111111111111111"   // (R[4],MC) = _pl_const_1_B1 (R[4]); 

// m1;   next: m128 (next offset: 175)

// m128;   next: m179, jump target: m127 (next offset: 179)
000175  1 0  "00000000011000000100000000010011"   // (R[8]) = _lt_const_1_B2 (R[3]); 
000176  1 0  "00100001000000001111111111111010"   // () = nez_br_const_1_B1 (R[8],-6); 
000177  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000178  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m179, jump target: m138 (next offset: 184)
000179  1 0  "00000000110000000011000000010101"   // (R[6]) = nez_1_B1 (R[6]); 
000180  1 0  "00000000100001100011000000001010"   // (R[6]) = _or_1_B1 (R[4],R[6]); 
000181  1 0  "01010000001000101111111111101100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000182  1 0  "00100100000000000000000000000101"   // () = j_const_1_B1 (5); 
000183  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m134;   next: m138 (next offset: 188)
000184  1 0  "01010100011001100000000000000000"   // R[6] = R[3]; 
000185  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000186  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000187  1 0  "01010000001000101111111111101100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m138;   next: m137 (next offset: 190)
000188  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000189  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m137 subroutine call;   next: m139 (next offset: 190)

// m139 (next offset: /)

