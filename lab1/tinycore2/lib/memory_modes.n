/*
-- File : memory_modes.n 
--
-- Contents : Alternative model of the load/store instructions, 
--            using mode rules.
--
-- Copyright (c) 2014-2017 Synopsys, Inc. This Synopsys processor model 
-- captures an ASIP Designer Design Technique. The model and all associated 
-- documentation are proprietary to Synopsys, Inc. and may only be used 
-- pursuant to the terms and conditions of a written license agreement with 
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution 
-- of the Synopsys processor model or the associated  documentation is 
-- strictly prohibited. 
*/

mode mDM() 
{
    read_value   : dmLdBus;
    write_value  : dmStBus;
    read_action  : stage E1..E2: dmLdBus`E2` = DM[dmAddr`E1`]`E2`;
    write_action : stage E1: DM[dmAddr] = dmStBus;
}
    
mode dm_sp_indexed(d: mDM, idx : c_spidx)
{
    read_value  : d;
    write_value : d;
    action {
    stage E1: 
        dmAddr = aluC = add(aluA=SP, aluB=idx) @ alu;
    }
    syntax : "DM[sp " dec idx "]";
    image : idx;
}

opn load_sp_indexed (a : eR, dm : dm_sp_indexed)
{
    action {
    stage E1..E2:
        R[a]`E2` = dmLdBus`E2` = dm;
    }
    syntax : a " = " dm;
    image : dm::a;
}

opn store_sp_indexed (a : eR, dm : dm_sp_indexed)
{
    action {
    stage E1:
        dm = dmStBus = R[a];
    }
    syntax : dm " = " a;
    image : dm::a;
}


enum address_mode { indirect "", incr "++" };

mode dm_indirect(d: mDM, a : eR, m : address_mode)
{
    read_value  : d;
    write_value : d;
    action {
    stage E1: 
        switch (m) {
        case indirect:
            aluA = R[a];
        case incr:
            R[a] = aluC = add(aluA = R[a], aluB = 1) @ alu;
        }
        dmAddr = aluA;
    }
    syntax : "DM[" a d"]";
    image : m::a;
}

opn load_indirect (dst : eR, dm: dm_indirect)
{
    action {

    stage E1..E2:
        R[dst]`E2` = dmLdBus`E2` = dm;
    }
    syntax : dst " = " dm; 
    image : dm::dst;
}

opn store_indirect (src : eR, dm: dm_indirect)
{
    action {
    stage E1:
        dm = dmStBus = R[src];
    }
    syntax : dm " = " src ;
    image : dm::src;
}
