
// File generated by Go version N-2018.03#7d02e3ca79#180723, Fri Jan 11 16:59:17 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -A -B -Iisg +wisg -D__tct_patch__=300 -D__go__ tinycore2

toolrelease _18R1;
copy0 : copy { }
control_signals { }
jump_pc_offs_sig : control_signals { }
jump_pc_trgt_sig : control_signals { }

name tinycore2(14)

//Properties
prop stage_names = ( IF ID E1 );
prop default_cycles = ( words );
prop program_counter = ( PC );
prop decode_stage = ( 1 );
prop control_signals = ( compact );
prop program_memory = ( PM );
prop unconnected = ( PM DM );
prop strict_WAW_hazard_checking = ( off );
prop endianness = ( little );

//Memories are printed after the transitories

//Registers
reg R[0..7,1]<word,threebitsu> syntax { r0 r1 r2 r3 r4 r5 lnk sp } ;
reg LR<word> alias R[6] align 1;
reg SP<word> alias R[7] align 1;
reg SREG<bool>;
reg PC<word>;

//Transitories
trn ld_pm<bool>;
trn pmLdBus<pmtype>;
trn pmAddr<word>;
trn ld_dm<bool>;
trn dmLdBus<word>;
trn dmAddr<word>;
trn st_dm<bool>;
trn dmStBus<word>;
trn aluA<word>;
trn aluB<word>;
trn aluC<word>;
trn sreg_r<bool>;
trn sreg_w<bool>;
trn pc_r<word>;
trn pc_w<word>;
trn pc_offs<sbyte>;
trn pc_trgt<word>;
trn lnk_pf<word>;
trn cnv8<sbyte>;
trn __CTthreebitsu_cstP8_E1<threebitsu> exp = a pos = ( 8: u 2..0 u );
trn __R_aluA_rad<threebitsu>;
trn __CTthreebitsu_cstP11_E1<threebitsu> exp = b pos = ( 11: u 2..0 u );
trn __R_aluB_rad<threebitsu>;
trn __R_aluC_wad<threebitsu>;
trn __CTsbyte_cstP6_E1<sbyte> exp = offs pos = ( 6: u 7..0 u );
trn __CTsbyte_cstP6_ID<sbyte> exp = offs pos = ( 6: u 7..0 u );
trn __CTsbyte_cstP3_7_3P11_2_0_E1<sbyte> exp = val pos = ( 3: u 7..3 u, 11: u 2..0 u );

//Memories
mem PM[0..1023,1]<pmtype,word> access {
    ld_pm: pmLdBus `1` = PM[pmAddr] `1`;
};
mem DM[0..1023,1]<word,word> access {
    ld_dm: dmLdBus `1` = DM[dmAddr] `1`;
    st_dm: DM[dmAddr] = dmStBus;
};

//Functional units
fu alu

//HW init values
hw_init PC = others => 0;

//SW init values

//Operations
threebitsu_cstP8_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 1;
    isg : t;
    out : ( __CTthreebitsu_cstP8_E1 );
    rsc : (2) __CTthreebitsu_cstP8_E1 ;
    ins : 0;
}

__R_aluA_rad_copy0___CTthreebitsu_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 2;
    isg : t;
    inp : ( __CTthreebitsu_cstP8_E1 );
    out : ( __R_aluA_rad );
    rsc : (2) __R_aluA_rad ;
    ins : 1;
}

aluA_rd_R___R_aluA_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 3;
    isg : t;
    inp : ( R __R_aluA_rad );
    out : ( aluA );
    rsc : (2) aluA ;
    ins : 1;
}

threebitsu_cstP11_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 4;
    isg : t;
    out : ( __CTthreebitsu_cstP11_E1 );
    rsc : (2) __CTthreebitsu_cstP11_E1 ;
    ins : 2;
}

__R_aluB_rad_copy0___CTthreebitsu_cstP11_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 5;
    isg : t;
    inp : ( __CTthreebitsu_cstP11_E1 );
    out : ( __R_aluB_rad );
    rsc : (2) __R_aluB_rad ;
    ins : 2;
}

aluB_rd_R___R_aluB_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 6;
    isg : t;
    inp : ( R __R_aluB_rad );
    out : ( aluB );
    rsc : (2) aluB ;
    ins : 2;
}

aluC_add_aluA_aluB_alu_E1 : word_add_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 7;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 3;
    opr : alu;
}

aluC_sub_aluA_aluB_alu_E1 : word_sub_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 8;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 4;
    opr : alu;
}

aluC_band_aluA_aluB_alu_E1 : word_band_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 9;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 5;
    opr : alu;
}

aluC_bor_aluA_aluB_alu_E1 : word_bor_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 10;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 6;
    opr : alu;
}

__R_aluC_wad_copy0___CTthreebitsu_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 11;
    isg : t;
    inp : ( __CTthreebitsu_cstP8_E1 );
    out : ( __R_aluC_wad );
    rsc : (2) __R_aluC_wad ;
    ins : 7;
}

R_wr_aluC___R_aluC_wad_E1 : write_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 12;
    isg : t;
    inp : ( aluC __R_aluC_wad );
    out : ( R );
    ins : 7;
}

SREG_wr_sreg_w_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 13;
    isg : t;
    inp : ( sreg_w );
    out : ( SREG );
    ins : 8;
}

sreg_w_lt_aluA_aluB_alu_E1 : bool_lt_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 14;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : 9;
    opr : alu;
}

sreg_w_le_aluA_aluB_alu_E1 : bool_le_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 15;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : 10;
    opr : alu;
}

sreg_w_gt_aluA_aluB_alu_E1 : bool_gt_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 16;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : 11;
    opr : alu;
}

sreg_w_ge_aluA_aluB_alu_E1 : bool_ge_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 17;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : 12;
    opr : alu;
}

sreg_r_rd_SREG_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 18;
    isg : t;
    inp : ( SREG );
    out : ( sreg_r );
    rsc : (2) sreg_r ;
    ins : 13;
}

sbyte_cstP6_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 19;
    isg : t;
    out : ( __CTsbyte_cstP6_E1 );
    rsc : (2) __CTsbyte_cstP6_E1 ;
    ins : 13;
}

pc_offs_copy0___CTsbyte_cstP6_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 20;
    isg : t;
    inp : ( __CTsbyte_cstP6_E1 );
    out : ( pc_offs );
    rsc : (2) pc_offs ;
    ins : 13;
}

vd_jumpci_sreg_r_pc_offs_E1 : void_jumpci_bool_sbyte, jump_pc_offs_sig {
    fst : 2;
    ist : ( 2 2 );
    rid : 21;
    isg : t;
    inp : ( sreg_r pc_offs );
    ins : 13;
}

sbyte_cstP6_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 22;
    isg : t;
    out : ( __CTsbyte_cstP6_ID );
    rsc : (1) __CTsbyte_cstP6_ID ;
    ins : 14;
}

pc_offs_copy0___CTsbyte_cstP6_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 23;
    isg : t;
    inp : ( __CTsbyte_cstP6_ID );
    out : ( pc_offs );
    rsc : (1) pc_offs ;
    ins : 14;
}

vd_jumpi_pc_offs_ID : void_jumpi_sbyte, jump_pc_offs_sig {
    fst : 1;
    ist : ( 1 );
    rid : 24;
    isg : t;
    inp : ( pc_offs );
    ins : 14;
}

LR_wr_lnk_pf_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 25;
    isg : t;
    inp : ( lnk_pf );
    out : ( LR );
    ins : 15;
}

pc_trgt_copy0_aluA_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 26;
    isg : t;
    inp : ( aluA );
    out : ( pc_trgt );
    rsc : (2) pc_trgt ;
    ins : 15;
}

lnk_pf_bsr_pc_trgt_E1 : word_bsr_word, jump_pc_trgt_sig {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 27;
    isg : t;
    inp : ( pc_trgt );
    out : ( lnk_pf );
    rsc : (2) lnk_pf ;
    ins : 15;
}

pc_trgt_rd_LR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 28;
    isg : t;
    inp : ( LR );
    out : ( pc_trgt );
    rsc : (2) pc_trgt ;
    ins : 16;
}

vd_rts_pc_trgt_E1 : void_rts_word, jump_pc_trgt_sig {
    fst : 2;
    ist : ( 2 );
    rid : 29;
    isg : t;
    inp : ( pc_trgt );
    ins : 16;
}

vd_nop_E1 : void_nop {
    fst : 2;
    rid : 30;
    isg : t;
    ins : 17;
}

sbyte_cstP3_7_3P11_2_0_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 31;
    isg : t;
    out : ( __CTsbyte_cstP3_7_3P11_2_0_E1 );
    rsc : (2) __CTsbyte_cstP3_7_3P11_2_0_E1 ;
    ins : 18;
}

aluC_copy0___CTsbyte_cstP3_7_3P11_2_0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 32;
    isg : t;
    inp : ( __CTsbyte_cstP3_7_3P11_2_0_E1 );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 19;
}

cnv8_copy0___CTsbyte_cstP3_7_3P11_2_0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 33;
    isg : t;
    inp : ( __CTsbyte_cstP3_7_3P11_2_0_E1 );
    out : ( cnv8 );
    rsc : (2) cnv8 ;
    ins : 20;
}

aluC_ldh_cnv8_E1 : word_ldh_sbyte {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 34;
    isg : t;
    inp : ( cnv8 );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 20;
}

aluB_copy0___CTsbyte_cstP3_7_3P11_2_0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 35;
    isg : t;
    inp : ( __CTsbyte_cstP3_7_3P11_2_0_E1 );
    out : ( aluB );
    rsc : (2) aluB ;
    ins : 21;
}


//Hazards


//Instruction properties

cycles1 : cycles {
    cyc : 1;
    ins : 22;
}


words1 : words {
    wrd : 1;
    ins : 22;
}


alt_cycles0 : alt_cycles {
    ins : 22;
}


delay_slots0 : delay_slots {
    ins : 23;
}

delay_slots1 : delay_slots {
    del : 1;
    ins : 14;
}

delay_slots2 : delay_slots {
    del : 2;
    ins : 24;
}


pc_offset0 : pc_offset {
    ins : 25;
}

pc_offset1 : pc_offset {
    pco : 1;
    ins : 14;
}

pc_offset2 : pc_offset {
    pco : 2;
    ins : 13;
}


0 : 'tinycore2.n';
----------
----------
1 : (0,103:48,0) (0,105:48,0) (0,107:48,0) (0,109:48,0) (0,111:19,0) (0,133:46,0) (0,135:46,0) (0,137:46,0) (0,139:46,0) (0,176:63,0) (0,148:40,0) (0,155:50,0) (0,121:50,0) (0,103:32,0) (0,105:32,0) (0,107:32,0) (0,109:32,0) (0,111:11,0) (0,133:30,0) (0,135:30,0) (0,137:30,0) (0,139:30,0) (0,176:61,0) (0,148:26,0) (0,155:26,0) (0,121:11,0) (0,121:36,0);
2 : (0,103:48,0) (0,105:48,0) (0,107:48,0) (0,109:48,0) (0,133:46,0) (0,135:46,0) (0,137:46,0) (0,139:46,0) (0,176:63,0) (0,121:50,0) (0,103:28,0) (0,105:28,0) (0,107:28,0) (0,109:28,0) (0,133:26,0) (0,135:26,0) (0,137:26,0) (0,139:26,0) (0,176:49,0) (0,121:31,0);
3 : (0,103:48,0) (0,105:48,0) (0,107:48,0) (0,109:48,0) (0,133:46,0) (0,135:46,0) (0,137:46,0) (0,139:46,0) (0,176:63,0) (0,121:50,0) (0,103:28,0) (0,105:28,0) (0,107:28,0) (0,109:28,0) (0,133:26,0) (0,135:26,0) (0,137:26,0) (0,139:26,0) (0,176:49,0) (0,121:31,0);
4 : (0,103:48,0) (0,105:48,0) (0,107:48,0) (0,109:48,0) (0,133:46,0) (0,135:46,0) (0,137:46,0) (0,139:46,0) (0,103:43,0) (0,105:43,0) (0,107:43,0) (0,109:43,0) (0,133:41,0) (0,135:41,0) (0,137:41,0) (0,139:41,0);
5 : (0,103:48,0) (0,105:48,0) (0,107:48,0) (0,109:48,0) (0,133:46,0) (0,135:46,0) (0,137:46,0) (0,139:46,0) (0,103:39,0) (0,105:39,0) (0,107:39,0) (0,109:39,0) (0,133:37,0) (0,135:37,0) (0,137:37,0) (0,139:37,0);
6 : (0,103:48,0) (0,105:48,0) (0,107:48,0) (0,109:48,0) (0,133:46,0) (0,135:46,0) (0,137:46,0) (0,139:46,0) (0,103:39,0) (0,105:39,0) (0,107:39,0) (0,109:39,0) (0,133:37,0) (0,135:37,0) (0,137:37,0) (0,139:37,0);
7 : (0,103:48,0);
8 : (0,105:48,0);
9 : (0,107:48,0);
10 : (0,109:48,0) (0,121:50,0);
11 : (0,111:19,0) (0,148:40,0) (0,155:50,0) (0,121:50,0) (0,111:13,0) (0,148:28,0) (0,155:28,0) (0,121:13,0);
12 : (0,111:19,0) (0,148:40,0) (0,155:50,0) (0,121:50,0) (0,111:13,0) (0,148:28,0) (0,155:28,0) (0,121:13,0);
13 : (0,133:46,0) (0,135:46,0) (0,137:46,0) (0,139:46,0) (0,133:17,0) (0,135:17,0) (0,137:17,0) (0,139:17,0);
14 : (0,133:46,0);
15 : (0,135:46,0);
16 : (0,137:46,0);
17 : (0,139:46,0);
18 : (0,169:60,0) (0,169:37,0);
19 : (0,169:60,0) (0,169:53,0);
20 : (0,169:60,0) (0,169:53,0);
21 : (0,169:60,0);
22 : (0,162:44,0) (0,162:37,0);
23 : (0,162:44,0) (0,162:37,0);
24 : (0,162:44,0);
25 : (0,176:63,0) (0,176:26,0);
26 : (0,176:63,0) (0,176:49,0);
27 : (0,176:63,0);
28 : (0,183:40,0) (0,183:35,0);
29 : (0,183:40,0);
30 : (0,191:28,0);
31 : (0,148:40,0) (0,155:50,0) (0,121:50,0) (0,148:28,0) (0,155:45,0) (0,121:44,0);
32 : (0,148:40,0) (0,148:28,0);
33 : (0,155:50,0) (0,155:45,0);
34 : (0,155:50,0);
35 : (0,121:50,0) (0,121:44,0);

