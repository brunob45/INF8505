
// File generated by Go version N-2018.03#7d02e3ca79#180723, Tue Jan 15 15:18:14 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -A -Iisg +wisg -D__tct_patch__=300 -D__go__ tinycore2

toolrelease _18R1;
copy0 : copy { }
control_signals { }
jump_pc_offs_sig : control_signals { }
jump_pc_trgt_sig : control_signals { }

name tinycore2(14)

//Properties
prop stage_names = ( IF ID E1 E2 );
prop default_cycles = ( words );
prop program_counter = ( PC );
prop decode_stage = ( 1 );
prop control_signals = ( compact );
prop program_memory = ( PM );
prop strict_WAW_hazard_checking = ( off );
prop endianness = ( little );

//Memories are printed after the transitories

//Registers
reg R[0..7,1]<word,threebitsu> syntax { r0 r1 r2 r3 r4 r5 lnk sp } ;
reg LR<word> alias R[6] align 1;
reg SP<word> alias R[7] align 1;
reg SREG<bool>;
reg PC<word>;

//Transitories
trn ld_pm<bool>;
trn pmLdBus<pmtype>;
trn pmAddr<word>;
trn ld_dm<bool>;
trn dmLdBus<word>;
trn dmAddr<word>;
trn st_dm<bool>;
trn dmStBus<word>;
trn aluA<word>;
trn aluB<word>;
trn aluC<word>;
trn sreg_r<bool>;
trn sreg_w<bool>;
trn pc_r<word>;
trn pc_w<word>;
trn pc_offs<sbyte>;
trn pc_trgt<word>;
trn lnk_pf<word>;
trn cnv8<sbyte>;
trn __CTthreebitsu_cstP8_E1<threebitsu> exp = a pos = ( 8: u 2..0 u );
trn __R_aluA_rad<threebitsu>;
trn __CTthreebitsu_cstP11_E1<threebitsu> exp = b pos = ( 11: u 2..0 u );
trn __R_aluB_rad<threebitsu>;
trn __R_aluC_wad<threebitsu>;
trn __CTword_cstV1<word> cst = 1f;
trn __CTthreebitsu_cstP11_E2<threebitsu> exp = dst pos = ( 11: u 2..0 u );
trn __R_dmLdBus_wad<threebitsu>;
trn __R_dmStBus_rad<threebitsu>;
trn __CTsbyte_cstP6_E1<sbyte> exp = offs pos = ( 6: u 7..0 u );
trn __CTsbyte_cstP6_ID<sbyte> exp = offs pos = ( 6: u 7..0 u );
trn __CTsbyte_cstP3_7_3P11_2_0_E1<sbyte> exp = val pos = ( 3: u 7..3 u, 11: u 2..0 u );
trn __CTubyte_cstP3_7_3P11_2_0_E1<ubyte> exp = b pos = ( 3: u 7..3 u, 11: u 2..0 u );

//Memories
mem PM[0..1023,1]<pmtype,word> access {
    ld_pm: pmLdBus `1` = PM[pmAddr] `1`;
};
mem DM[0..1023,1]<word,word> access {
    ld_dm: dmLdBus `1` = DM[dmAddr] `1`;
    st_dm: DM[dmAddr] = dmStBus;
};

//Functional units
fu alu

//HW init values
hw_init PC = others => 0;
hw_init lnk_pf = others => 0;

//SW init values

//Operations
threebitsu_cstP8_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 1;
    isg : t;
    out : ( __CTthreebitsu_cstP8_E1 );
    rsc : (2) __CTthreebitsu_cstP8_E1 ;
    ins : "10xxxxxxxxxxxx",
          "1x0xxxxxxxxxxx",
          "x0000xxxxxxxxx",
          "x010x001xxxxxx",
          "x0x000xxxxxxxx",
          "x0x00x01xxxxxx";
}

__R_aluA_rad_copy0___CTthreebitsu_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 2;
    isg : t;
    inp : ( __CTthreebitsu_cstP8_E1 );
    out : ( __R_aluA_rad );
    rsc : (2) __R_aluA_rad ;
    ins : "00000xxxxxxxxx",
          "0010x001xxxxxx",
          "00x000xxxxxxxx",
          "110xxxxxxxxxxx";
}

aluA_rd_R___R_aluA_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 3;
    isg : t;
    inp : ( R __R_aluA_rad );
    out : ( aluA );
    rsc : (2) aluA ;
    ins : "00000xxxxxxxxx",
          "0010x001xxxxxx",
          "00x000xxxxxxxx",
          "110xxxxxxxxxxx";
}

threebitsu_cstP11_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 4;
    isg : t;
    out : ( __CTthreebitsu_cstP11_E1 );
    rsc : (2) __CTthreebitsu_cstP11_E1 ;
    ins : "00000xxxxxxxxx",
          "00x0001xxxxxxx",
          "00x00101xxxxxx";
}

__R_aluB_rad_copy0___CTthreebitsu_cstP11_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 5;
    isg : t;
    inp : ( __CTthreebitsu_cstP11_E1 );
    out : ( __R_aluB_rad );
    rsc : (2) __R_aluB_rad ;
    ins : "00000xxxxxxxxx",
          "00x00101xxxxxx";
}

aluB_rd_R___R_aluB_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 6;
    isg : t;
    inp : ( R __R_aluB_rad );
    out : ( aluB );
    rsc : (2) aluB ;
    ins : "00000xxxxxxxxx",
          "00x00101xxxxxx";
}

aluC_add_aluA_aluB_alu_E1 : word_add_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 7;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : "00000000xxxxxx",
          "001000x1xxxxxx";
    opr : alu;
}

aluC_sub_aluA_aluB_alu_E1 : word_sub_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 8;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : "00000001xxxxxx";
    opr : alu;
}

aluC_band_aluA_aluB_alu_E1 : word_band_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 9;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : "00000010xxxxxx";
    opr : alu;
}

aluC_bor_aluA_aluB_alu_E1 : word_bor_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 10;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : "00000011xxxxxx",
          "110xxxxxxxxxxx";
    opr : alu;
}

__R_aluC_wad_copy0___CTthreebitsu_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 11;
    isg : t;
    inp : ( __CTthreebitsu_cstP8_E1 );
    out : ( __R_aluC_wad );
    rsc : (2) __R_aluC_wad ;
    ins : "10xxxxxxxxxxxx",
          "1x0xxxxxxxxxxx",
          "x00000xxxxxxxx",
          "x0100x01xxxxxx",
          "x0x000x1xxxxxx";
}

R_wr_aluC___R_aluC_wad_E1 : write_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 12;
    isg : t;
    inp : ( aluC __R_aluC_wad );
    out : ( R );
    ins : "10xxxxxxxxxxxx",
          "1x0xxxxxxxxxxx",
          "x00000xxxxxxxx",
          "x0100x01xxxxxx",
          "x0x000x1xxxxxx";
}

SREG_wr_sreg_w_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 13;
    isg : t;
    inp : ( sreg_w );
    out : ( SREG );
    ins : "000001xxxxxxxx";
}

sreg_w_lt_aluA_aluB_alu_E1 : bool_lt_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 14;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : "00000100xxxxxx";
    opr : alu;
}

sreg_w_le_aluA_aluB_alu_E1 : bool_le_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 15;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : "00000101xxxxxx";
    opr : alu;
}

sreg_w_gt_aluA_aluB_alu_E1 : bool_gt_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 16;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : "00000110xxxxxx";
    opr : alu;
}

sreg_w_ge_aluA_aluB_alu_E1 : bool_ge_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 17;
    isg : t;
    inp : ( aluA aluB );
    out : ( sreg_w );
    rsc : (2) sreg_w ;
    ins : "00000111xxxxxx";
    opr : alu;
}

word_cstV1 : const {
    fst : -1;
    ost : ( -1 );
    rid : 18;
    isg : t;
    out : ( __CTword_cstV1 );
    rsc : (0) __CTword_cstV1 ;
    ins : "001000x1xxxxxx";
}

aluB_copy0___CTword_cstV1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 19;
    isg : t;
    inp : ( __CTword_cstV1 );
    out : ( aluB );
    rsc : (2) aluB ;
    ins : "001000x1xxxxxx";
}

dmAddr_copy0_aluA_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 20;
    isg : t;
    inp : ( aluA );
    out : ( dmAddr );
    rsc : (2) dmAddr ;
    ins : "001000xxxxxxxx";
}

threebitsu_cstP11_E2 : const {
    fst : 3;
    ost : ( 3 );
    rid : 21;
    isg : t;
    out : ( __CTthreebitsu_cstP11_E2 );
    rsc : (3) __CTthreebitsu_cstP11_E2 ;
    ins : "0010000xxxxxxx";
}

__R_dmLdBus_wad_copy0___CTthreebitsu_cstP11_E2 : copy0 {
    fst : 3;
    ist : ( 3 );
    ost : ( 3 );
    rid : 22;
    isg : t;
    inp : ( __CTthreebitsu_cstP11_E2 );
    out : ( __R_dmLdBus_wad );
    rsc : (3) __R_dmLdBus_wad ;
    ins : "0010000xxxxxxx";
}

R_wr_dmLdBus___R_dmLdBus_wad_E2 : write_file {
    fst : 3;
    ist : ( 3 3 );
    ost : ( 3 );
    rid : 23;
    isg : t;
    inp : ( dmLdBus __R_dmLdBus_wad );
    out : ( R );
    ins : "0010000xxxxxxx";
}

dmLdBus_ld_DM_dmAddr_E1 : load {
    fst : 2;
    ist : ( 3 2 );
    ost : ( 3 );
    rid : 24;
    isg : t;
    inp : ( DM dmAddr );
    out : ( dmLdBus );
    rsc : (3) dmLdBus ;
    ins : "0010000xxxxxxx";
}

DM_st_dmStBus_dmAddr_E1 : store {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 25;
    isg : t;
    inp : ( dmStBus dmAddr );
    out : ( DM );
    ins : "0010001xxxxxxx";
}

__R_dmStBus_rad_copy0___CTthreebitsu_cstP11_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 26;
    isg : t;
    inp : ( __CTthreebitsu_cstP11_E1 );
    out : ( __R_dmStBus_rad );
    rsc : (2) __R_dmStBus_rad ;
    ins : "0010001xxxxxxx";
}

dmStBus_rd_R___R_dmStBus_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 27;
    isg : t;
    inp : ( R __R_dmStBus_rad );
    out : ( dmStBus );
    rsc : (2) dmStBus ;
    ins : "0010001xxxxxxx";
}

aluC_copy0_aluB_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 28;
    isg : t;
    inp : ( aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : "00100101xxxxxx";
}

sreg_r_rd_SREG_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 29;
    isg : t;
    inp : ( SREG );
    out : ( sreg_r );
    rsc : (2) sreg_r ;
    ins : "000010xxxxxxxx";
}

sbyte_cstP6_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 30;
    isg : t;
    out : ( __CTsbyte_cstP6_E1 );
    rsc : (2) __CTsbyte_cstP6_E1 ;
    ins : "000010xxxxxxxx";
}

pc_offs_copy0___CTsbyte_cstP6_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 31;
    isg : t;
    inp : ( __CTsbyte_cstP6_E1 );
    out : ( pc_offs );
    rsc : (2) pc_offs ;
    ins : "000010xxxxxxxx";
}

vd_jumpci_sreg_r_pc_offs_E1 : void_jumpci_bool_sbyte, jump_pc_offs_sig {
    fst : 2;
    ist : ( 2 2 );
    rid : 32;
    isg : t;
    inp : ( sreg_r pc_offs );
    ins : "000010xxxxxxxx";
}

sbyte_cstP6_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 33;
    isg : t;
    out : ( __CTsbyte_cstP6_ID );
    rsc : (1) __CTsbyte_cstP6_ID ;
    ins : "000011xxxxxxxx";
}

pc_offs_copy0___CTsbyte_cstP6_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 34;
    isg : t;
    inp : ( __CTsbyte_cstP6_ID );
    out : ( pc_offs );
    rsc : (1) pc_offs ;
    ins : "000011xxxxxxxx";
}

vd_jumpi_pc_offs_ID : void_jumpi_sbyte, jump_pc_offs_sig {
    fst : 1;
    ist : ( 1 );
    rid : 35;
    isg : t;
    inp : ( pc_offs );
    ins : "000011xxxxxxxx";
}

LR_wr_lnk_pf_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 36;
    isg : t;
    inp : ( lnk_pf );
    out : ( LR );
    ins : "00101001xxxxxx";
}

pc_trgt_copy0_aluA_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 37;
    isg : t;
    inp : ( aluA );
    out : ( pc_trgt );
    rsc : (2) pc_trgt ;
    ins : "00101001xxxxxx";
}

lnk_pf_bsr_pc_trgt_E1 : word_bsr_word, jump_pc_trgt_sig {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 38;
    isg : t;
    inp : ( pc_trgt );
    out : ( lnk_pf );
    rsc : (2) lnk_pf ;
    ins : "00101001xxxxxx";
}

pc_trgt_rd_LR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 39;
    isg : t;
    inp : ( LR );
    out : ( pc_trgt );
    rsc : (2) pc_trgt ;
    ins : "00101010xxxxxx";
}

vd_rts_pc_trgt_E1 : void_rts_word, jump_pc_trgt_sig {
    fst : 2;
    ist : ( 2 );
    rid : 40;
    isg : t;
    inp : ( pc_trgt );
    ins : "00101010xxxxxx";
}

vd_nop_E1 : void_nop {
    fst : 2;
    rid : 41;
    isg : t;
    ins : "00101011xxxxxx";
}

sbyte_cstP3_7_3P11_2_0_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 42;
    isg : t;
    out : ( __CTsbyte_cstP3_7_3P11_2_0_E1 );
    rsc : (2) __CTsbyte_cstP3_7_3P11_2_0_E1 ;
    ins : "10xxxxxxxxxxxx";
}

aluC_copy0___CTsbyte_cstP3_7_3P11_2_0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 43;
    isg : t;
    inp : ( __CTsbyte_cstP3_7_3P11_2_0_E1 );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : "100xxxxxxxxxxx";
}

cnv8_copy0___CTsbyte_cstP3_7_3P11_2_0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 44;
    isg : t;
    inp : ( __CTsbyte_cstP3_7_3P11_2_0_E1 );
    out : ( cnv8 );
    rsc : (2) cnv8 ;
    ins : "101xxxxxxxxxxx";
}

aluC_ldh_cnv8_E1 : word_ldh_sbyte {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 45;
    isg : t;
    inp : ( cnv8 );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : "101xxxxxxxxxxx";
}

ubyte_cstP3_7_3P11_2_0_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 46;
    isg : t;
    out : ( __CTubyte_cstP3_7_3P11_2_0_E1 );
    rsc : (2) __CTubyte_cstP3_7_3P11_2_0_E1 ;
    ins : "110xxxxxxxxxxx";
}

aluB_copy0___CTubyte_cstP3_7_3P11_2_0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 47;
    isg : t;
    inp : ( __CTubyte_cstP3_7_3P11_2_0_E1 );
    out : ( aluB );
    rsc : (2) aluB ;
    ins : "110xxxxxxxxxxx";
}


//Hazards
sw_stall [1,1] c f <delayed_load> {
    reg : R_wr_dmLdBus___R_dmLdBus_wad_E2;
    ins : "0010000xxxxxxx";
} -> {
    reg : aluA_rd_R___R_aluA_rad_E1 aluB_rd_R___R_aluB_rad_E1 dmStBus_rd_R___R_dmStBus_rad_E1;
    ins : "00000xxxxxxxxx",
          "0010x001xxxxxx",
          "00x000xxxxxxxx",
          "00x00x01xxxxxx",
          "110xxxxxxxxxxx";
}



//Instruction properties

cycles1 : cycles {
    cyc : 1;
    ins : "xxxxxxxxxxxxxx";
}


words1 : words {
    wrd : 1;
    ins : "xxxxxxxxxxxxxx";
}


alt_cycles0 : alt_cycles {
    ins : "xxxxxxxxxxxxxx";
}


delay_slots0 : delay_slots {
    ins : "1xxxxxxxxxxxxx",
          "x1xxxxxxxxxxxx",
          "xx1xx1xxxxxxxx",
          "xx1xxx00xxxxxx",
          "xx1xxx11xxxxxx",
          "xxx1xxxxxxxxxx",
          "xxxx0xxxxxxxxx";
}

delay_slots1 : delay_slots {
    del : 1;
    ins : "000011xxxxxxxx";
}

delay_slots2 : delay_slots {
    del : 2;
    ins : "000010xxxxxxxx",
          "00x01001xxxxxx",
          "00x01010xxxxxx";
}


pc_offset0 : pc_offset {
    ins : "1xxxxxxxxxxxxx",
          "x1xxxxxxxxxxxx",
          "xx1xxxxxxxxxxx",
          "xxx1xxxxxxxxxx",
          "xxxx0xxxxxxxxx";
}

pc_offset1 : pc_offset {
    pco : 1;
    ins : "000011xxxxxxxx";
}

pc_offset2 : pc_offset {
    pco : 2;
    ins : "000010xxxxxxxx";
}


0 : 'tinycore2.n';
----------
----------
1 : (0,121:48,0) (0,123:48,0) (0,125:48,0) (0,127:48,0) (0,129:19,0) (0,151:46,0) (0,153:46,0) (0,155:46,0) (0,157:46,0) (0,198:23,0) (0,200:55,0) (0,216:23,0) (0,218:55,0) (0,170:19,0) (0,243:63,0) (0,178:40,0) (0,185:50,0) (0,139:50,0) (0,121:32,0) (0,123:32,0) (0,125:32,0) (0,127:32,0) (0,129:11,0) (0,151:30,0) (0,153:30,0) (0,155:30,0) (0,157:30,0) (0,198:22,0) (0,200:15,0) (0,200:40,0) (0,216:22,0) (0,218:15,0) (0,218:40,0) (0,170:11,0) (0,243:61,0) (0,178:26,0) (0,185:26,0) (0,139:11,0) (0,139:36,0);
2 : (0,121:48,0) (0,123:48,0) (0,125:48,0) (0,127:48,0) (0,151:46,0) (0,153:46,0) (0,155:46,0) (0,157:46,0) (0,198:23,0) (0,200:55,0) (0,216:23,0) (0,218:55,0) (0,243:63,0) (0,139:50,0) (0,121:28,0) (0,123:28,0) (0,125:28,0) (0,127:28,0) (0,151:26,0) (0,153:26,0) (0,155:26,0) (0,157:26,0) (0,198:17,0) (0,200:35,0) (0,216:17,0) (0,218:35,0) (0,243:49,0) (0,139:31,0);
3 : (0,121:48,0) (0,123:48,0) (0,125:48,0) (0,127:48,0) (0,151:46,0) (0,153:46,0) (0,155:46,0) (0,157:46,0) (0,198:23,0) (0,200:55,0) (0,216:23,0) (0,218:55,0) (0,243:63,0) (0,139:50,0) (0,121:28,0) (0,123:28,0) (0,125:28,0) (0,127:28,0) (0,151:26,0) (0,153:26,0) (0,155:26,0) (0,157:26,0) (0,198:17,0) (0,200:35,0) (0,216:17,0) (0,218:35,0) (0,243:49,0) (0,139:31,0);
4 : (0,121:48,0) (0,123:48,0) (0,125:48,0) (0,127:48,0) (0,151:46,0) (0,153:46,0) (0,155:46,0) (0,157:46,0) (0,221:37,0) (0,168:19,0) (0,121:43,0) (0,123:43,0) (0,125:43,0) (0,127:43,0) (0,151:41,0) (0,153:41,0) (0,155:41,0) (0,157:41,0) (0,221:36,0) (0,168:18,0);
5 : (0,121:48,0) (0,123:48,0) (0,125:48,0) (0,127:48,0) (0,151:46,0) (0,153:46,0) (0,155:46,0) (0,157:46,0) (0,168:19,0) (0,121:39,0) (0,123:39,0) (0,125:39,0) (0,127:39,0) (0,151:37,0) (0,153:37,0) (0,155:37,0) (0,157:37,0) (0,168:13,0);
6 : (0,121:48,0) (0,123:48,0) (0,125:48,0) (0,127:48,0) (0,151:46,0) (0,153:46,0) (0,155:46,0) (0,157:46,0) (0,168:19,0) (0,121:39,0) (0,123:39,0) (0,125:39,0) (0,127:39,0) (0,151:37,0) (0,153:37,0) (0,155:37,0) (0,157:37,0) (0,168:13,0);
7 : (0,121:48,0) (0,200:55,0) (0,218:55,0);
8 : (0,123:48,0);
9 : (0,125:48,0);
10 : (0,127:48,0) (0,139:50,0);
11 : (0,129:19,0) (0,200:55,0) (0,218:55,0) (0,170:19,0) (0,178:40,0) (0,185:50,0) (0,139:50,0) (0,129:13,0) (0,200:17,0) (0,218:17,0) (0,170:13,0) (0,178:28,0) (0,185:28,0) (0,139:13,0);
12 : (0,129:19,0) (0,200:55,0) (0,218:55,0) (0,170:19,0) (0,178:40,0) (0,185:50,0) (0,139:50,0) (0,129:13,0) (0,200:17,0) (0,218:17,0) (0,170:13,0) (0,178:28,0) (0,185:28,0) (0,139:13,0);
13 : (0,151:46,0) (0,153:46,0) (0,155:46,0) (0,157:46,0) (0,151:17,0) (0,153:17,0) (0,155:17,0) (0,157:17,0);
14 : (0,151:46,0);
15 : (0,153:46,0);
16 : (0,155:46,0);
17 : (0,157:46,0);
18 : (0,200:55,0) (0,218:55,0) (0,200:48,0) (0,218:48,0);
19 : (0,200:55,0) (0,218:55,0) (0,200:48,0) (0,218:48,0);
20 : (0,202:21,0) (0,220:21,0) (0,202:15,0) (0,220:15,0);
21 : (0,204:53,0) (0,204:13,0);
22 : (0,204:53,0) (0,204:19,0);
23 : (0,204:53,0) (0,204:19,0);
24 : (0,204:53,0) (0,204:19,0);
25 : (0,221:37,0) (0,221:19,0);
26 : (0,221:37,0) (0,221:19,0);
27 : (0,221:37,0) (0,221:19,0);
28 : (0,169:19,0) (0,169:13,0);
29 : (0,236:60,0) (0,236:37,0);
30 : (0,236:60,0) (0,236:53,0);
31 : (0,236:60,0) (0,236:53,0);
32 : (0,236:60,0);
33 : (0,229:44,0) (0,229:37,0);
34 : (0,229:44,0) (0,229:37,0);
35 : (0,229:44,0);
36 : (0,243:63,0) (0,243:26,0);
37 : (0,243:63,0) (0,243:49,0);
38 : (0,243:63,0);
39 : (0,250:40,0) (0,250:35,0);
40 : (0,250:40,0);
41 : (0,257:28,0);
42 : (0,178:40,0) (0,185:50,0) (0,178:28,0) (0,185:45,0);
43 : (0,178:40,0) (0,178:28,0);
44 : (0,185:50,0) (0,185:45,0);
45 : (0,185:50,0);
46 : (0,139:50,0) (0,139:44,0);
47 : (0,139:50,0) (0,139:44,0);

