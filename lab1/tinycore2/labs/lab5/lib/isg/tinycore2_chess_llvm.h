
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Tue Jan 15 15:18:08 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -Iisg +wisg -D__tct_patch__=300 -D__chess__ -D__programmers_view__ tinycore2

#ifndef _tinycore2_chess_llvm_h
#define _tinycore2_chess_llvm_h

#pragma clang diagnostic error "-Wpointer-arith"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#pragma clang diagnostic ignored "-Wbitwise-op-parentheses"
#pragma clang diagnostic ignored "-Wlogical-op-parentheses"
#pragma clang diagnostic ignored "-Wshift-op-parentheses"
#pragma clang diagnostic ignored "-Wunused-private-field"

enum chessllvmInternal { chessllvm_reinterpret }; //overloading hook

#ifdef __cplusplus
template <class T> struct chessllvm_remove_cv { typedef T type; };
template <class T> struct chessllvm_remove_cv<const T> { typedef T type; };
template <class T> struct chessllvm_remove_cv<volatile T> { typedef T type; };
template <class T> struct chessllvm_remove_cv<const volatile T> { typedef T type; };
template <class T> struct chessllvm_remove_reference { typedef T type; };
template <class T> struct chessllvm_remove_reference<T&> { typedef T type; };
template <class T> struct chessllvm_remove_reference<T&&> { typedef T type; };
#endif

#ifdef __cplusplus
#define __C__ "C"
#if __cplusplus >= 201103L
#define __STUB_DEFAULT__ = default;
#else
#define __STUB_DEFAULT__ {}
#endif
#else
#define asm __asm__
#define bool _Bool
#define __C__ /**/
#endif

void chess_report(bool)                 __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(char)                 __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(signed char)          __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(unsigned char)        __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(short)                __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(unsigned short)       __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(int)                  __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(unsigned int)         __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(long)                 __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(unsigned long)        __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(long long)            __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(unsigned long long)   __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(float)                __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(double)               __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(long double)          __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_report(const volatile void*) __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));

void chess_assert(bool)                 __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(char)                 __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(signed char)          __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(unsigned char)        __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(short)                __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(unsigned short)       __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(int)                  __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(unsigned int)         __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(long)                 __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(unsigned long)        __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(long long)            __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(unsigned long long)   __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(float)                __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(double)               __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(long double)          __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));
void chess_assert(const volatile void*) __attribute__((overloadable)) __attribute__((chess_inaccessiblememonly));

#ifdef __cplusplus
template <typename T>
T chess_copy(T a)       __attribute__((const)) __attribute__((nocse));
template <typename T>
T chess_dont_chain(T a) __attribute__((const));
template <typename T>
T chess_keep_dead(T a);
#else
bool                 chess_copy      (bool)                 __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
char                 chess_copy      (char)                 __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
signed char          chess_copy      (signed char)          __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
unsigned char        chess_copy      (unsigned char)        __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
short                chess_copy      (short)                __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
unsigned short       chess_copy      (unsigned short)       __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
int                  chess_copy      (int)                  __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
unsigned int         chess_copy      (unsigned int)         __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
long                 chess_copy      (long)                 __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
unsigned long        chess_copy      (unsigned long)        __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
long long            chess_copy      (long long)            __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
unsigned long long   chess_copy      (unsigned long long)   __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
float                chess_copy      (float)                __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
double               chess_copy      (double)               __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
long double          chess_copy      (long double)          __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse));
void*                chess_copy      (void*)                __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse)); //BUG does not preserve complete type
const void*          chess_copy      (const void*)          __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse)); //BUG does not preserve complete type
volatile void*       chess_copy      (volatile void*)       __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse)); //BUG does not preserve complete type
const volatile void* chess_copy      (const volatile void*) __attribute__((overloadable)) __attribute__((const)) __attribute__((nocse)); //BUG does not preserve complete type
bool                 chess_dont_chain(bool)                 __attribute__((overloadable)) __attribute__((const));
char                 chess_dont_chain(char)                 __attribute__((overloadable)) __attribute__((const));
signed char          chess_dont_chain(signed char)          __attribute__((overloadable)) __attribute__((const));
unsigned char        chess_dont_chain(unsigned char)        __attribute__((overloadable)) __attribute__((const));
short                chess_dont_chain(short)                __attribute__((overloadable)) __attribute__((const));
unsigned short       chess_dont_chain(unsigned short)       __attribute__((overloadable)) __attribute__((const));
int                  chess_dont_chain(int)                  __attribute__((overloadable)) __attribute__((const));
unsigned int         chess_dont_chain(unsigned int)         __attribute__((overloadable)) __attribute__((const));
long                 chess_dont_chain(long)                 __attribute__((overloadable)) __attribute__((const));
unsigned long        chess_dont_chain(unsigned long)        __attribute__((overloadable)) __attribute__((const));
long long            chess_dont_chain(long long)            __attribute__((overloadable)) __attribute__((const));
unsigned long long   chess_dont_chain(unsigned long long)   __attribute__((overloadable)) __attribute__((const));
float                chess_dont_chain(float)                __attribute__((overloadable)) __attribute__((const));
double               chess_dont_chain(double)               __attribute__((overloadable)) __attribute__((const));
long double          chess_dont_chain(long double)          __attribute__((overloadable)) __attribute__((const));
void*                chess_dont_chain(void*)                __attribute__((overloadable)) __attribute__((const)); //BUG does not preserve complete type
const void*          chess_dont_chain(const void*)          __attribute__((overloadable)) __attribute__((const)); //BUG does not preserve complete type
volatile void*       chess_dont_chain(volatile void*)       __attribute__((overloadable)) __attribute__((const)); //BUG does not preserve complete type
const volatile void* chess_dont_chain(const volatile void*) __attribute__((overloadable)) __attribute__((const)); //BUG does not preserve complete type
bool                 chess_keep_dead (bool)                 __attribute__((overloadable));
char                 chess_keep_dead (char)                 __attribute__((overloadable));
signed char          chess_keep_dead (signed char)          __attribute__((overloadable));
unsigned char        chess_keep_dead (unsigned char)        __attribute__((overloadable));
short                chess_keep_dead (short)                __attribute__((overloadable));
unsigned short       chess_keep_dead (unsigned short)       __attribute__((overloadable));
int                  chess_keep_dead (int)                  __attribute__((overloadable));
unsigned int         chess_keep_dead (unsigned int)         __attribute__((overloadable));
long                 chess_keep_dead (long)                 __attribute__((overloadable));
unsigned long        chess_keep_dead (unsigned long)        __attribute__((overloadable));
long long            chess_keep_dead (long long)            __attribute__((overloadable));
unsigned long long   chess_keep_dead (unsigned long long)   __attribute__((overloadable));
float                chess_keep_dead (float)                __attribute__((overloadable));
double               chess_keep_dead (double)               __attribute__((overloadable));
long double          chess_keep_dead (long double)          __attribute__((overloadable));
void*                chess_keep_dead (void*)                __attribute__((overloadable)); //BUG does not preserve complete type
const void*          chess_keep_dead (const void*)          __attribute__((overloadable)); //BUG does not preserve complete type
volatile void*       chess_keep_dead (volatile void*)       __attribute__((overloadable)); //BUG does not preserve complete type
const volatile void* chess_keep_dead (const volatile void*) __attribute__((overloadable)); //BUG does not preserve complete type
#endif

void chess_exit(int)                       __attribute__((overloadable));
void chess_stop(void)                      __attribute__((overloadable));
static void* volatile __attribute__((chess_alias_set(__chess_separator_universe))) __chess_separator_dummy;
static int   volatile __attribute__((chess_alias_set(__chess_separator_universe))) __chess_separator_idummy;
static inline __attribute__((always_inline,nodebug)) void chess_separator(void) __attribute__((overloadable)) { __chess_separator_dummy = (void*)0; }
static inline __attribute__((always_inline,nodebug)) void chess_separator_scheduler(void) __attribute__((overloadable)) { __chess_separator_dummy = (void*)1; }
static inline __attribute__((always_inline,nodebug)) void chess_separator_scheduler(int i) __attribute__((overloadable)) { __chess_separator_idummy = i; }
void chess_instruction_tracing_begin(void) __attribute__((overloadable));
void chess_instruction_tracing_end(void)   __attribute__((overloadable));
void chess_profile_begin(void)             __attribute__((overloadable));
void chess_profile_end(void)               __attribute__((overloadable));
void chess_hosted_io(void*)                __attribute__((overloadable));

#ifdef __cplusplus
#define chess_dont_care(T) chess_dont_care_<T>()
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wuninitialized"
template <typename T>
T chess_dont_care_() { T t; return t; }
#pragma clang diagnostic pop
#else
#define chess_dont_care(T) (T)0
#endif

#define __chess_pragma(x) _Pragma(#x)

#define chess_error(x) __builtin_chess_error(x)

// accept restrict also in C++/C89 mode
#define restrict __restrict

#define chess_message(x) /*native only*/

//  nil-defines for chess-specific keywords :

#define chess_alignof(x) (__alignof__(x))
#define chess_bitsof(x) (sizeof(x) * __CHAR_BIT__)
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_closed_jump_table 
#else
# define chess_closed_jump_table _Pragma("message \"'chess_closed_jump_table' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
//-nap- chess_const_eval
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_direct 
#else
# define chess_direct _Pragma("message \"'chess_direct' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#define chess_dont_warn_dead(x) (x)
#define chess_dont_warn_range(x) (x)
#define chess_dont_warn_unroll
#ifdef __cplusplus
#define chess_elementsof(x) (chessLelementsof<typename chessllvm_remove_cv<typename chessllvm_remove_reference<typeof(x)>::type>::type>::value)
#endif
#define chess_flatten_loop  __chess_pragma(chessafterloop flatten_loop)
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_frequent_else 
#else
# define chess_frequent_else _Pragma("message \"'chess_frequent_else' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_frequent_then 
#else
# define chess_frequent_then _Pragma("message \"'chess_frequent_then' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_guard 
#else
# define chess_guard _Pragma("message \"'chess_guard' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_guard_else 
#else
# define chess_guard_else _Pragma("message \"'chess_guard_else' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_inline_src_refs 
#else
# define chess_inline_src_refs _Pragma("message \"'chess_inline_src_refs' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_keep_if 
#else
# define chess_keep_if _Pragma("message \"'chess_keep_if' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_keep_sw_loop 
#else
# define chess_keep_sw_loop _Pragma("message \"'chess_keep_sw_loop' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_keep_sw_loop2 
#else
# define chess_keep_sw_loop2 _Pragma("message \"'chess_keep_sw_loop2' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#define chess_loop_count(x)   __chess_pragma(chessafterloop min_loop_count(x) max_loop_count(x))
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_loop_count_storage(x) 
#else
# define chess_loop_count_storage(x) _Pragma("message \"'chess_loop_count_storage(x)' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#define chess_loop_range(x,y) __chess_pragma(chessafterloop min_loop_count(x) max_loop_count(y))
#define chess_manifest(x) __builtin_chess_manifest(x)
#define chess_may_alias __attribute__((may_alias))
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_no_hw_loop 
#else
# define chess_no_hw_loop _Pragma("message \"'chess_no_hw_loop' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_no_inline_src_refs 
#else
# define chess_no_inline_src_refs _Pragma("message \"'chess_no_inline_src_refs' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_no_jump_table 
#else
# define chess_no_jump_table _Pragma("message \"'chess_no_jump_table' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_open_jump_table 
#else
# define chess_open_jump_table _Pragma("message \"'chess_open_jump_table' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#define chess_output
#define chess_prepare_for_pipelining  __chess_pragma(chessafterloop prepare_for_pipelining)
#define chess_no_warn_pipelining
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_protect(x) (x)
#else
# define chess_protect(x) _Pragma("message \"'chess_protect(x)' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")(x)
#endif
#define chess_protect_access __attribute__((chessLprotect_access))
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_protect_brk_cnt /*anachronistic*/
#else
# define chess_protect_brk_cnt _Pragma("message \"'chess_protect_brk_cnt' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")/*anachronistic*/
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_redirect 
#else
# define chess_redirect _Pragma("message \"'chess_redirect' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
//-nap- chess_relocator
//-nap- chess_rewrite
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_require_pipelining(x) 
#else
# define chess_require_pipelining(x) _Pragma("message \"'chess_require_pipelining(x)' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_sequential 
#else
# define chess_sequential _Pragma("message \"'chess_sequential' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_single_instruction_repeat 
#else
# define chess_single_instruction_repeat _Pragma("message \"'chess_single_instruction_repeat' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_stack 
#else
# define chess_stack _Pragma("message \"'chess_stack' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#define chess_symbol(x) 0/*false*/
//-nap- chess_tcl_break(x) (?)
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_unassign(x) (x)
#else
# define chess_unassign(x) _Pragma("message \"'chess_unassign(x)' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")(x)
#endif
#define chess_unroll_loop(x) __chess_pragma(chessafterloop unroll_loop(x))
#define chess_unroll_loop_preamble __chess_pragma(chessafterloop unroll_loop_preamble)
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_used 
#else
# define chess_used _Pragma("message \"'chess_used' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_vector_guard 
#else
# define chess_vector_guard _Pragma("message \"'chess_vector_guard' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_vector_guard_else 
#else
# define chess_vector_guard_else _Pragma("message \"'chess_vector_guard_else' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_vector_sequential 
#else
# define chess_vector_sequential _Pragma("message \"'chess_vector_sequential' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif

// g++ and VC++ 8.0 or newer support variadic macro arguments
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_const(...) 0/*false*/
#else
# define chess_const(...) _Pragma("message \"'chess_const(...)' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")0/*false*/
#endif
#ifdef LLVM_NO_WARN_IGNORED_CHESS
# define chess_string_segment(...) 
#else
# define chess_string_segment(...) _Pragma("message \"'chess_string_segment(...)' is ignored in the LLVM flow. (Use -DLLVM_NO_WARN_IGNORED_CHESS to disable this warning)\"")
#endif

// auxiliary macro to stringify macro arguments (after expansion)
#define chessLstr(...)              #__VA_ARGS__
// chess_storage annotations
#define chess_storage(...)          __attribute__((chessLstorage(__VA_ARGS__)))
// function pass-through attributes
#define clobbers(...)               __attribute__((chessFP(clobbers,chessLstr(__VA_ARGS__))))
#define clobbers_not(...)           __attribute__((chessFP(clobbers_not,chessLstr(__VA_ARGS__))))
#define property(...)               __attribute__((chessFP(property,chessLstr(__VA_ARGS__))))
#define value_across_call(...)      __attribute__((chessFP(value_across_call,chessLstr(__VA_ARGS__))))
#define value_across_call_not(...)  __attribute__((chessFP(value_across_call_not,chessLstr(__VA_ARGS__))))

unsigned chess_cycle_count(void) __attribute__((overloadable));



//  Application types (declaration)

#ifdef __cplusplus
template <typename T> struct chessLelementsof;
#endif


//  Application types (definition)

//  Application types (additional)

#ifndef do_not_generate_additional_appl_types /*trouble-shooting hook*/

#endif /*do_not_generate_additional_appl_types*/


//  Reserved register variables

#ifndef do_not_generate_res_reg_vars /*trouble-shooting hook*/
#endif /*do_not_generate_res_reg_vars*/

//  Extern variables

#ifndef do_not_generate_ext_vars /*trouble-shooting hook*/
#endif /*do_not_generate_ext_vars*/

//  Operations

extern __C__ __regcall void chess_storage(PM) * chessintr___PPMvoid_chess_return_address(void) __attribute__((const));
inline __attribute__((always_inline,nodebug)) void chess_storage(PM) *chess_return_address(void) __attribute__((overloadable))
{
    return chessintr___PPMvoid_chess_return_address();
}



// do_generate[_llvm] inline functions


#undef __C__
#ifdef __cplusplus
#undef __STUB_DEFAULT__
#else
#undef bool
#endif

#pragma clang diagnostic pop

#endif /*_tinycore2_chess_llvm_h*/
