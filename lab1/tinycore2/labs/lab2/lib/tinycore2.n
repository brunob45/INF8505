/*
-- File : tinycore2.n (solution lab2)
--
-- Contents : nML description of tinycore2 processor.
--
-- Copyright (c) 2014-2017 Synopsys, Inc. This Synopsys processor model 
-- captures an ASIP Designer Design Technique. The model and all associated 
-- documentation are proprietary to Synopsys, Inc. and may only be used 
-- pursuant to the terms and conditions of a written license agreement with 
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution 
-- of the Synopsys processor model or the associated  documentation is 
-- strictly prohibited. 
*/

// -------------------
// Structural skeleton
// -------------------

// Lab 2.3 (2): add declaration of stage names
enum stage_names { IF, ID, E1 };

// Memories and registers:

def dmSize = 2**10;

mem PM[dmSize] <pmtype, word> access {
    ld_pm: pmLdBus `1` = PM[pmAddr `0`] `1`;
};

mem DM[dmSize] <word, word> access {
    ld_dm: dmLdBus `1` = DM[dmAddr `0`] `1`;
    st_dm: DM[dmAddr] = dmStBus;
};
properties {
    program_memory  : PM;
    program_counter : PC;
    unconnected : PM, DM;
}

enum eR { r0, r1, r2, r3, r4, r5, lnk, sp };
reg R[8]<word,threebitsu> syntax (eR)
                          read   (aluA aluB dmStBus)
                          write  (aluC dmLdBus);

reg LR<word> alias R[6];
reg SP<word> alias R[7];

reg SREG<bool> read (sreg_r) write (sreg_w);

reg PC<word> read (pc_r) write (pc_w);

// Lab 2.4 (7 and 8): define top level OR rule and start rule here

start tinycore2;

opn tinycore2 (alu_opn | nop)
{
    image
        : "000000"::alu_opn
        | "00101011xxxxxx"::nop
        ;
}

// Lab 2.3 (3): add declaration of ALU structural elements 
enum alu_op {ADD " + ", SUB " - ", AND " & ", OR " | "};

trn aluA <word>;
trn aluB <word>;
trn aluC <word>;

// Lab 2.3 (4): add alu_opn rule
opn alu_opn (op : alu_op, a : eR, b : eR)
{
  action {
    stage E1:
        aluA = R[a];
        aluB = R[b];
        switch (op) {
            case ADD : aluC = add (aluA, aluB);
            case SUB : aluC = sub (aluA, aluB);
            case AND : aluC = band (aluA, aluB);
            case OR  : aluC = bor (aluA, aluB);
        }
        R[a] = aluC;
    }
    syntax : a " = " a op b ;
    image : op::a::b;
}

// Lab 2.4 (6): add NOP rule
opn nop ()
{
    action : stage E1: nop();
    syntax : "nop";
}
