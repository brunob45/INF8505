
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Fri Jan 11 17:23:01 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -D__tct_patch__=300 +NOrlt -D__chess__ -D__programmers_view__ tinycore2

#ifdef __chess__
#error "generated native file not intended for compilation by chess"
#endif

// Native C++ types and functions

#ifndef _tinycore2_chess_types_h
#define _tinycore2_chess_types_h

#include "chess.h"
#include "vbit.h"

#include "tinycore2_iss_types.h"


//  Application types (declarations)

//  (none)



//  Built-in type wrappers (bit-true behaviour or used as vector element type)

namespace tinycore2_BT {

//class BTbool /* std C conforming */

} //namespace tinycore2_BT


//  Application types (definitions)

//  Application types (additional)

#ifndef do_not_generate_additional_appl_types /*trouble-shooting hook*/

#endif /*do_not_generate_additional_appl_types*/


//  Conversions


//  Operations

//TBD

//  Chess_message hook for printing text between chess_reports (native only)

#define chess_message(msg) std::cout << msg << std::endl


#ifndef do_not_generate_chess_assert /*trouble-shooting hook*/

//  Chess_assert ancillary functions (native emulating ISS)

#define chess_assert(val)  (void)(chess_assert_(val)||chess_assert_msg(__FILE__,__LINE__))

inline int chess_assert_msg(const char* file, int line) {
    std::cout.flush();
    std::cerr << "ERROR Assertion failed in \"" << file << "\", line " << line << '.' << std::endl;
    return 0;
}

//  Overloaded chess_assert functions (allow to assert types without operator bool())

inline int chess_assert_(bool a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(tinycore2_primitive::word a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tinycore2_primitive::pmtype a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tinycore2_primitive::sbyte a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tinycore2_primitive::threebitsu a) {
  return toVBit(a) != 0 ? 1 : 0;
}

#endif /*!do_not_generate_chess_assert*/


#ifndef do_not_generate_chess_report /*trouble-shooting hook*/

//  Chess_report ancillary functions (common to ISS and native)

inline void chess_report_hex(int bits, long long val, std::ostream& os)
    { os << " 0x" << std::hex << std::setfill('0') << std::setw((bits+3)/4) << CHESS_MASKLL(val,bits); }
inline void chess_report_signed  (long long  val, std::ostream& os)
    { os << ' ' << std::dec << val; }
inline void chess_report_unsigned(unsigned long long val, std::ostream& os)
    { os << ' ' << std::dec << val; }

//  Overloaded chess_report functions

inline void chess_report(bool a) {
    std::ostream& os = std::cout;
    os << "chess_report(bool):";
    chess_report_hex(1, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(tinycore2_primitive::word a) {
    std::ostream& os = std::cout;
    os << "chess_report(tinycore2_primitive::word):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tinycore2_primitive::pmtype a) {
    std::ostream& os = std::cout;
    os << "chess_report(tinycore2_primitive::pmtype):";
    chess_report_hex(14, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tinycore2_primitive::sbyte a) {
    std::ostream& os = std::cout;
    os << "chess_report(tinycore2_primitive::sbyte):";
    chess_report_hex(8, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tinycore2_primitive::threebitsu a) {
    std::ostream& os = std::cout;
    os << "chess_report(tinycore2_primitive::threebitsu):";
    chess_report_hex(3, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}

#endif /*!do_not_generate_chess_report*/


#ifndef do_not_generate_chess_cycle_count /*trouble-shooting hook*/

// no chess_cycle_count found (no suitable return argument register)

#endif /*!do_not_generate_chess_cycle_count*/


#ifndef do_not_generate_chess_return_address /*trouble-shooting hook*/

// no chess_return_address found (no suitable return argument register)

#endif /*!do_not_generate_chess_return_address*/


#ifndef do_not_generate_chess_stop_exit /*trouble-shooting hook*/

#include <stdlib.h>
#define chess_stop()  _Exit(0)

#define chess_exit(x) _Exit(x)

#endif /*!do_not_generate_chess_stop_exit*/


#ifndef do_not_generate_chess_dont_care /*trouble-shooting hook*/

#define chess_dont_care(T) chess_dont_care_<T>()
template<typename T>
T chess_dont_care_() { return T(); }
#endif /*!do_not_generate_chess_dont_care*/


#define chess_error(x) chess_stop()



#endif /*_tinycore2_chess_types_h*/
