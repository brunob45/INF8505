
// File generated by animal version N-2018.03#7d02e3ca79#180723, Fri Jan 11 17:23:03 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// animal -a -B -Iisg +wisg -D__tct_patch__=300 -h -D__checkers__ tinycore2

toolrelease _18R1;
copy0 : copy { }

name tinycore2(14)

//Properties
prop stage_names = ( IF ID E1 );
prop program_memory = ( PM );
prop program_counter = ( PC );
prop unconnected = ( PM DM );
prop strict_WAW_hazard_checking = ( off );

//Memories are printed after the transitories

//Registers
reg R[0..7,1]<word,threebitsu> syntax { r0 r1 r2 r3 r4 r5 lnk sp } ;
reg LR<word> alias R[6] align 1;
reg SP<word> alias R[7] align 1;
reg SREG<bool>;
reg PC<word>;

//Transitories
trn ld_pm<bool>;
trn pmLdBus<pmtype>;
trn pmAddr<word>;
trn ld_dm<bool>;
trn dmLdBus<word>;
trn dmAddr<word>;
trn st_dm<bool>;
trn dmStBus<word>;
trn aluA<word>;
trn aluB<word>;
trn aluC<word>;
trn sreg_r<bool>;
trn sreg_w<bool>;
trn pc_r<word>;
trn pc_w<word>;
trn __CTthreebitsu_cstP8_E1<threebitsu> exp = a pos = ( 8: u 2..0 u );
trn __R_aluA_rad<threebitsu>;
trn __CTthreebitsu_cstP11_E1<threebitsu> exp = b pos = ( 11: u 2..0 u );
trn __R_aluB_rad<threebitsu>;
trn __R_aluC_wad<threebitsu>;

//Memories
mem PM[0..1023,1]<pmtype,word> access {
    ld_pm: pmLdBus `1` = PM[pmAddr] `1`;
};
mem DM[0..1023,1]<word,word> access {
    ld_dm: dmLdBus `1` = DM[dmAddr] `1`;
    st_dm: DM[dmAddr] = dmStBus;
};

//Functional units

//HW init values

//SW init values

//Operations
threebitsu_cstP8_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 1;
    isg : t;
    out : ( __CTthreebitsu_cstP8_E1 );
    rsc : (2) __CTthreebitsu_cstP8_E1 ;
    ins : 0;
}

__R_aluA_rad_copy0___CTthreebitsu_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 2;
    isg : t;
    inp : ( __CTthreebitsu_cstP8_E1 );
    out : ( __R_aluA_rad );
    rsc : (2) __R_aluA_rad ;
    ins : 0;
}

aluA_rd_R___R_aluA_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 3;
    isg : t;
    inp : ( R __R_aluA_rad );
    out : ( aluA );
    rsc : (2) aluA ;
    ins : 0;
}

threebitsu_cstP11_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 4;
    isg : t;
    out : ( __CTthreebitsu_cstP11_E1 );
    rsc : (2) __CTthreebitsu_cstP11_E1 ;
    ins : 0;
}

__R_aluB_rad_copy0___CTthreebitsu_cstP11_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 5;
    isg : t;
    inp : ( __CTthreebitsu_cstP11_E1 );
    out : ( __R_aluB_rad );
    rsc : (2) __R_aluB_rad ;
    ins : 0;
}

aluB_rd_R___R_aluB_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 6;
    isg : t;
    inp : ( R __R_aluB_rad );
    out : ( aluB );
    rsc : (2) aluB ;
    ins : 0;
}

aluC_add_aluA_aluB_E1 : word_add_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 7;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 1;
}

aluC_sub_aluA_aluB_E1 : word_sub_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 8;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 2;
}

aluC_band_aluA_aluB_E1 : word_band_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 9;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 3;
}

aluC_bor_aluA_aluB_E1 : word_bor_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 10;
    isg : t;
    inp : ( aluA aluB );
    out : ( aluC );
    rsc : (2) aluC ;
    ins : 4;
}

__R_aluC_wad_copy0___CTthreebitsu_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 11;
    isg : t;
    inp : ( __CTthreebitsu_cstP8_E1 );
    out : ( __R_aluC_wad );
    rsc : (2) __R_aluC_wad ;
    ins : 0;
}

R_wr_aluC___R_aluC_wad_E1 : write_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 12;
    isg : t;
    inp : ( aluC __R_aluC_wad );
    out : ( R );
    ins : 0;
}

vd_nop_E1 : void_nop {
    fst : 2;
    rid : 13;
    isg : t;
    ins : 5;
}


//Hazards


//Instruction properties
i_class_chckrs_tinycore2 : instruction_class {
    ins : 6;
}


cycles1 : cycles {
    cyc : 1;
    ins : 7;
}


words1 : words {
    wrd : 1;
    ins : 7;
}


alt_cycles0 : alt_cycles {
    ins : 7;
}


delay_slots0 : delay_slots {
    ins : 7;
}


pc_offset0 : pc_offset {
    ins : 7;
}



0 : 'tinycore2.n';
----------
----------
1 : (0,76:19,0) (0,84:19,0) (0,76:18,0) (0,84:11,0);
2 : (0,76:19,0) (0,76:13,0);
3 : (0,76:19,0) (0,76:13,0);
4 : (0,77:19,0) (0,77:18,0);
5 : (0,77:19,0) (0,77:13,0);
6 : (0,77:19,0) (0,77:13,0);
7 : (0,79:46,0);
8 : (0,80:46,0);
9 : (0,81:47,0);
10 : (0,82:46,0);
11 : (0,84:19,0) (0,84:13,0);
12 : (0,84:19,0) (0,84:13,0);
13 : (0,93:28,0);


