
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Fri Jan 11 17:23:01 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -D__tct_patch__=300 +NOrlt -D__chess__ -D__programmers_view__ tinycore2

toolrelease _18R1;

//-- SPILLING --

pattern {
}

constant_load_parent : pattern {
}
stack_load_parent : pattern {
}
stack_store_parent : pattern {
}

constant_load : constant_load_parent {
}
stack_load : stack_load_parent {
}
stack_store : stack_store_parent {
}

constant_load_indirect : constant_load_parent {
}
stack_load_indirect : stack_load_parent {
}
stack_store_indirect : stack_store_parent {
}

init_rp : pattern {
}
update_cp : pattern {
}
update_rp : pattern {
}
pop_regs : pattern {
}
push_regs : pattern {
}

complex_pattern : pattern {
}

complex_ctpat : complex_pattern {
}
complex_load : complex_pattern {
}
complex_store : complex_pattern {
}
complex_move : complex_pattern {
}

complex_tie : event_opn {
}

complex_ctpat_tie : complex_tie {
}
complex_load_tie : complex_tie {
}
complex_store_tie : complex_tie {
}

// auxiliary patterns defined in the source function sfg file:

aux_pattern {
}

complex_const : aux_pattern {
}


//-- APPLICATION LAYER TYPES --


// type promotions

// spill & constant memory differentiation

// chess_properties
prop release_q = ( q18R1 );
prop default_memory = ( DM );
prop nr_stacks = ( 0 );
prop reserved = ( PC );


//-- APPLICATION LAYER OPERATIONS --

// void chess_stop()
chess_stop : chess_hosted, volatile {
}

// void chess_separator()
chess_separator : called {
}

// void chess_separator_scheduler()
chess_separator_scheduler : chess_separator {
}

// void chess_separator_scheduler(int)
chess_separator_scheduler : chess_separator {
}

// void chess_instruction_tracing_begin()
chess_instruction_tracing_begin : chess_separator_scheduler {
}

// void chess_instruction_tracing_end()
chess_instruction_tracing_end : chess_separator_scheduler {
}

// void chess_profile_begin()
chess_profile_begin : chess_separator_scheduler {
}

// void chess_profile_end()
chess_profile_end : chess_separator_scheduler {
}

// void chess_assert(word)
void_chess_assert_word : chess_assert {
    fnm : "chess_assert" 'void chess_assert(word)'; 
    arg : ( word:i );
}

// void chess_report(word)
void_chess_report_word : chess_report {
    fnm : "chess_report" 'void chess_report(word)'; 
    arg : ( word:i );
}

// void chess_assert(pmtype)
void_chess_assert_pmtype : chess_assert {
    fnm : "chess_assert" 'void chess_assert(pmtype)'; 
    arg : ( pmtype:i );
}

// void chess_report(pmtype)
void_chess_report_pmtype : chess_report {
    fnm : "chess_report" 'void chess_report(pmtype)'; 
    arg : ( pmtype:i );
}

// void chess_assert(sbyte)
void_chess_assert_sbyte : chess_assert {
    fnm : "chess_assert" 'void chess_assert(sbyte)'; 
    arg : ( sbyte:i );
}

// void chess_report(sbyte)
void_chess_report_sbyte : chess_report {
    fnm : "chess_report" 'void chess_report(sbyte)'; 
    arg : ( sbyte:i );
}

// void chess_assert(threebitsu)
void_chess_assert_threebitsu : chess_assert {
    fnm : "chess_assert" 'void chess_assert(threebitsu)'; 
    arg : ( threebitsu:i );
}

// void chess_report(threebitsu)
void_chess_report_threebitsu : chess_report {
    fnm : "chess_report" 'void chess_report(threebitsu)'; 
    arg : ( threebitsu:i );
}

