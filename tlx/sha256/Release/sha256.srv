
// File generated by darts version N-2018.03#7d02e3ca79#180723, Wed Apr 10 23:52:58 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// darts -B -I../lib +p -d -h -I../lib/runtime/include -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -L +Ihex +u Release/sha256 tlx

// Release: ipd N-2018.03-SP3
.label _main_init
.function _main_init _main_init
.src_ref 0 "tlx_init.s" 5 first
	     0      "01001000000000010000000000000000" // 	lhi r1, #0
.src_ref 0 "tlx_init.s" 6 first
	     1      "01010100001000011000000000000000" // 	ori r1,r1,#32768
.src_ref 0 "tlx_init.s" 7 first
	     2      "00000000000000000000000000000000" // 	nop
.label _main
.function main _main
.src_ref 1 "sha256.c" 12 first
	     3      "01001000000001000000000000000000" // 	lhi r4, #0
.src_ref 1 "sha256.c" 12 4
	     4      "00001000001000010000000000001000" // 	addi r1,r1,#8
	     5      "01010100100001110000000000000100" // 	ori r7,r4,#4
	     6      "01001000000010010000000000000000" // 	lhi r9, #0
	     7      "01001000000001010000000000000000" // 	lhi r5, #0
	     8      "01001000000000110000000000000000" // 	lhi r3, #0
	     9      "01001000000010000000000000000000" // 	lhi r8, #0
	    10      "01010101001010010000001110110100" // 	ori r9,r9,#948
.src_ref 1 "sha256.c" 28 58 first
	    11      "01010000111001110000000000000000" // 	lw r7,0(r7)
	    12      "10101000001000101111111111111100" // 	sw r2,-4(r1)
	    13      "10101000001010011111111111111000" // 	sw r9,-8(r1)
	    14      "01001000000001000000000000000000" // 	lhi r4, #0
	    15      "01010100101001010000000110010100" // 	ori r5,r5,#404
	    16      "01010100011001100000000000001000" // 	ori r6,r3,#8
	    17      "01010101000010000000000010001100" // 	ori r8,r8,#140
.src_ref 1 "sha256.c" 28 4
.no_stack_arguments
	    18      "00101000000000000000000011001101" // 	jal #205
.delay_slot
	    19      "01010100100001000000001000011000" // 	ori r4,r4,#536
.return_address
	    20      "01001000000001000000000000000000" // 	lhi r4, #0
.src_ref 1 "sha256.c" 29 4 first
	    21      "00101000000000000000000100111001" // 	jal #313
.delay_slot
	    22      "01010100100001000000010001101000" // 	ori r4,r4,#1128
.src_ref 1 "sha256.c" 30 4 first
.return_address
.no_stack_arguments
	    23      "00101000000000000000000001001100" // 	jal #76
.src_ref 1 "sha256.c" 30 17
.delay_slot
	    24      "01010000001001001111111111111000" // 	lw r4,-8(r1)
.src_ref 1 "sha256.c" 36 4
.return_address
	    25      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.src_ref 1 "sha256.c" 36 4 first
.end_of_main
.rts 172
	    26      "00110000100000000000000000000000" // 	jr r4
.src_ref 1 "sha256.c" 36 11
.delay_slot
	    27      "01001000000000110000000000000000" // 	lhi r3, #0
.src_ref 1 "sha256.c" 36 4
.delay_slot
	    28      "00001000001000011111111111111000" // 	addi r1,r1,#-8
.label void_array_add___P__uint___P__uint___P__uint
.function array_add void_array_add___P__uint___P__uint___P__uint
.src_ref 1 "ops.h" 31 first
	    29      "01001000000010010000000000000000" // 	lhi r9, #0
	    30      "01010101001010110000000000101000" // 	ori r11,r9,#40
	    31      "01001000000010100000000000000000" // 	lhi r10, #0
	    32      "01010101010011000000000000101100" // 	ori r12,r10,#44
	    33      "00001000101010000000000010000000" // 	addi r8,r5,#128
	    34      "00001000100010010000000010000000" // 	addi r9,r4,#128
	    35      "00001000110010100000000010000000" // 	addi r10,r6,#128
.src_ref 1 "ops.h" 36 4 first
	    36      "10111100000000000000000000100001" // 	bor lc,r0,#33
.src_ref 1 "ops.h" 36 4
	    37      "10111101011000010000000000000000" // 	bor ls,r11,#0
.src_ref 1 "ops.h" 36 4
	    38      "10111101100000100000000000000000" // 	bor le,r12,#0
.src_ref 1 "ops.h" 33 36 first
	    39      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 39 28 first
.begin_of_loop
	    40      "00000001001000111110000000110100" // 	lw r3,(r9+=-4)
.src_ref 1 "ops.h" 39 36
	    41      "00000001000001001110000000110100" // 	lw r4,(r8+=-4)
.src_ref 1 "ops.h" 39 17
	    42      "00000000000000000000000000100110" // 	rsa_add
.src_ref 1 "ops.h" 39 11
	    43      "00000001010001111110000000110111" // 	sw r7,(r10+=-4)
.src_ref 1 "ops.h" 39 17
.end_of_loop
	    44      "00000000000001100010100000001010" // 	or r5,r0,r6
	    45      "01001000000010000000000000000000" // 	lhi r8, #0
	    46      "01010101000010000000001110100100" // 	ori r8,r8,#932
.src_ref 1 "ops.h" 46 4 first
	    47      "01010001000010010000000000000000" // 	lw r9,0(r8)
.src_ref 1 "ops.h" 46 11
	    48      "00001001001010010000000000000001" // 	addi r9,r9,#1
.src_ref 1 "ops.h" 47 first
.rts 172
	    49      "00110000010000000000000000000000" // 	jr r2
.src_ref 1 "ops.h" 46 4 first
.delay_slot
	    50      "10101001000010010000000000000000" // 	sw r9,0(r8)
.delay_slot
.swstall delay_slot
	    51      "00000000000000000000000000000000" // 	nop
.label void_array_div2___P__uint___P__uint
.function array_div2 void_array_div2___P__uint___P__uint
.src_ref 1 "ops.h" 49 first
	    52      "01001000000010000000000000000000" // 	lhi r8, #0
	    53      "01010101000010000000000000111110" // 	ori r8,r8,#62
	    54      "01001000000001100000000000000000" // 	lhi r6, #0
.src_ref 1 "ops.h" 54 4 first
	    55      "10111101000000010000000000000000" // 	bor ls,r8,#0
	    56      "01010100110010010000000001000001" // 	ori r9,r6,#65
.src_ref 1 "ops.h" 57 28
	    57      "01010100100010000000000000000000" // 	ori r8,r4,#0
.src_ref 1 "ops.h" 54 4
	    58      "10111100000000000000000000100001" // 	bor lc,r0,#33
.src_ref 1 "ops.h" 54 4
	    59      "10111101001000100000000000000000" // 	bor le,r9,#0
.src_ref 1 "ops.h" 51 22 first
	    60      "01001000000001000000000000000000" // 	lhi r4, #0
.src_ref 1 "ops.h" 57 11
	    61      "01010100101001100000000000000000" // 	ori r6,r5,#0
.src_ref 1 "ops.h" 57 28 first
.begin_of_loop
	    62      "00000001000000110010000000110100" // 	lw r3,(r8+=4)
.src_ref 1 "ops.h" 57 17
	    63      "00000000000000000000000000100101" // 	rsa_div2
.src_ref 1 "ops.h" 57 11
	    64      "00000000110001110010000000110111" // 	sw r7,(r6+=4)
.src_ref 1 "ops.h" 57 17
.end_of_loop
	    65      "00000000000001010010000000001010" // 	or r4,r0,r5
	    66      "01001000000001100000000000000000" // 	lhi r6, #0
	    67      "01010100110001100000001110101000" // 	ori r6,r6,#936
.src_ref 1 "ops.h" 64 4 first
	    68      "01010000110010000000000000000000" // 	lw r8,0(r6)
.src_ref 1 "ops.h" 64 11
	    69      "00001001000010000000000000000001" // 	addi r8,r8,#1
.src_ref 1 "ops.h" 65 first
.rts 172
	    70      "00110000010000000000000000000000" // 	jr r2
.src_ref 1 "ops.h" 64 4 first
.delay_slot
	    71      "10101000110010000000000000000000" // 	sw r8,0(r6)
.delay_slot
.swstall delay_slot
	    72      "00000000000000000000000000000000" // 	nop
.label void_array_reset___P__uint
.function array_reset void_array_reset___P__uint
.src_ref 1 "ops.h" 67 first
	    73      "01001000000001010000000000000000" // 	lhi r5, #0
	    74      "01001000000000110000000000000000" // 	lhi r3, #0
	    75      "01010100101001010000000001010001" // 	ori r5,r5,#81
	    76      "01010100011000110000000001010001" // 	ori r3,r3,#81
.src_ref 1 "ops.h" 70 4 first
	    77      "10111100000000000000000000100001" // 	bor lc,r0,#33
.src_ref 1 "ops.h" 70 4
	    78      "10111100101000010000000000000000" // 	bor ls,r5,#0
.src_ref 1 "ops.h" 70 4
	    79      "10111100011000100000000000000000" // 	bor le,r3,#0
.swstall sha_n_L70
	    80      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 72 13 first
.end_of_loop
.begin_of_loop
	    81      "00000000100000000010000000110111" // 	sw r0,(r4+=4)
.src_ref 1 "ops.h" 74 first
.rts 172
	    82      "00110000010000000000000000000000" // 	jr r2
.delay_slot
.swstall delay_slot
	    83      "00000000000000000000000000000000" // 	nop
.delay_slot
.swstall delay_slot
	    84      "00000000000000000000000000000000" // 	nop
.label __uint_array_bit_test___P__uint___uint
.function array_bit_test __uint_array_bit_test___P__uint___uint
.src_ref 1 "ops.h" 90 4 first
	    85      "01001000000000110000000000000000" // 	lhi r3, #0
.src_ref 1 "ops.h" 88 35 first
	    86      "10011100101001100000000000000011" // 	srli r6,r5,#3
.src_ref 1 "ops.h" 88 28
	    87      "01010100000001110000000000100000" // 	ori r7,r0,#32
	    88      "01010100011000110000001110101100" // 	ori r3,r3,#940
.src_ref 1 "ops.h" 88 28
	    89      "00000000111001100011000000011000" // 	sub r6,r7,r6
.src_ref 1 "ops.h" 87 4 first
	    90      "01010000011001110000000000000000" // 	lw r7,0(r3)
.src_ref 1 "ops.h" 87 12
	    91      "00001000111001110000000000000001" // 	addi r7,r7,#1
.src_ref 1 "ops.h" 90 14 first
	    92      "10001000110001100000000000000010" // 	slli r6,r6,#2
.src_ref 1 "ops.h" 87 4 first
	    93      "10101000011001110000000000000000" // 	sw r7,0(r3)
.src_ref 1 "ops.h" 90 14 first
	    94      "00000000100001100010000000000001" // 	add r4,r4,r6
.src_ref 1 "ops.h" 89 16 first
	    95      "00010000101001010000000000000111" // 	andi r5,r5,#7
.src_ref 1 "ops.h" 90 14 first
	    96      "01010000100001000000000000000000" // 	lw r4,0(r4)
.src_ref 1 "ops.h" 90 4
.rts 172
	    97      "00110000010000000000000000000000" // 	jr r2
.src_ref 1 "ops.h" 90 22
.delay_slot
	    98      "00000000100001010010100000010111" // 	srl r5,r4,r5
.src_ref 1 "ops.h" 90 32
.delay_slot
	    99      "00010000101000110000000000000001" // 	andi r3,r5,#1
.label void_array_print___P__uint
.function array_print void_array_print___P__uint
.src_ref 1 "ops.h" 93 first
.src_ref 1 "ops.h" 93 5
	   100      "00001000001000010000000000011000" // 	addi r1,r1,#24
	   101      "01001000000000110000000000000000" // 	lhi r3, #0
	   102      "10101000001001001111111111111000" // 	sw r4,-8(r1)
	   103      "10101000001000101111111111110100" // 	sw r2,-12(r1)
.src_ref 1 "ops.h" 96 4 first
	   104      "00101000000000000000000011100110" // 	jal #230
.delay_slot
	   105      "01010100011001000000010000111000" // 	ori r4,r3,#1080
.return_address
	   106      "01001000000000110000000000000000" // 	lhi r3, #0
	   107      "01010100011001110000000010001110" // 	ori r7,r3,#142
	   108      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 99 29
	   109      "01010000001000111111111111111000" // 	lw r3,-8(r1)
	   110      "01001000000001000000000000000000" // 	lhi r4, #0
	   111      "01010100101001010000010001000100" // 	ori r5,r5,#1092
	   112      "01001000000001100000000000000000" // 	lhi r6, #0
	   113      "10101000001001011111111111111000" // 	sw r5,-8(r1)
	   114      "01010100100001000000010000111011" // 	ori r4,r4,#1083
	   115      "01010100110001100000000001111001" // 	ori r6,r6,#121
.src_ref 1 "ops.h" 97 4 first
	   116      "10111100000000000000000000100001" // 	bor lc,r0,#33
.src_ref 1 "ops.h" 97 4
	   117      "10111100110000010000000000000000" // 	bor ls,r6,#0
.src_ref 1 "ops.h" 97 4
	   118      "10111100111000100000000000000000" // 	bor le,r7,#0
	   119      "10101000001001001111111111110000" // 	sw r4,-16(r1)
.src_ref 1 "ops.h" 97 13
	   120      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 99 29 first
.begin_of_loop
	   121      "00000000011001100010000000110100" // 	lw r6,(r3+=4)
	   122      "10101000001001101111111111111100" // 	sw r6,-4(r1)
	   123      "10101000001000111111111111101100" // 	sw r3,-20(r1)
	   124      "10101000001001011111111111101000" // 	sw r5,-24(r1)
.src_ref 1 "ops.h" 99 8
	   125      "00101000000000000000000011010001" // 	jal #209
.src_ref 1 "ops.h" 99 15
.delay_slot
	   126      "01010000001001001111111111110000" // 	lw r4,-16(r1)
.src_ref 1 "ops.h" 100 14
.return_address
	   127      "01010000001001001111111111101000" // 	lw r4,-24(r1)
.src_ref 1 "ops.h" 100 14 first
	   128      "10011000100000110000000000011111" // 	srai r3,r4,#31
.src_ref 1 "ops.h" 100 14
	   129      "00010000011000110000000000000011" // 	andi r3,r3,#3
.src_ref 1 "ops.h" 100 14
	   130      "00000000011001000001100000000001" // 	add r3,r3,r4
.src_ref 1 "ops.h" 100 14
	   131      "10011000011000110000000000000010" // 	srai r3,r3,#2
.src_ref 1 "ops.h" 100 14
	   132      "10001000011000110000000000000010" // 	slli r3,r3,#2
.src_ref 1 "ops.h" 100 14
	   133      "00000000100000110001100000011000" // 	sub r3,r4,r3
.src_ref 1 "ops.h" 100 18
	   134      "10010100011001010000000000000011" // 	snei r5,r3,#3
.src_ref 1 "ops.h" 100 8
	   135      "00100000101000000000000000000101" // 	bnez r5,#5
.src_ref 1 "ops.h" 99 29
.delay_slot
	   136      "01010000001000111111111111101100" // 	lw r3,-20(r1)
.delay_slot
.swstall delay_slot
	   137      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 102 12 first
	   138      "00101000000000000000000011000100" // 	jal #196
.src_ref 1 "ops.h" 102 19
.delay_slot
	   139      "01010000001001001111111111111000" // 	lw r4,-8(r1)
.src_ref 1 "ops.h" 97 34
.return_address
	   140      "01010000001001001111111111101000" // 	lw r4,-24(r1)
.src_ref 1 "ops.h" 99 29
	   141      "01010000001000111111111111101100" // 	lw r3,-20(r1)
.src_ref 1 "ops.h" 97 34
.end_of_loop
	   142      "00001000100001010000000000000001" // 	addi r5,r4,#1
	   143      "01001000000001000000000000000000" // 	lhi r4, #0
.src_ref 1 "ops.h" 105 4
	   144      "01010000001000101111111111110100" // 	lw r2,-12(r1)
	   145      "01010100100001000000010001001000" // 	ori r4,r4,#1096
.src_ref 1 "ops.h" 105 4 first
.tail_call
	   146      "00100100000000000000000010111100" // 	j #188
.src_ref 1 "ops.h" 106 first
.delay_slot
	   147      "00001000001000011111111111101000" // 	addi r1,r1,#-24
.label void_array_copy___P__uint___P__uint
.function array_copy void_array_copy___P__uint___P__uint
.src_ref 1 "ops.h" 108 first
.src_ref 1 "ops.h" 111 11 first
	   148      "00000000100001010001100000001011" // 	seq r3,r4,r5
.src_ref 1 "ops.h" 111 4 first
	   149      "00100000011000000000000000001011" // 	bnez r3,#11
.delay_slot
.swstall delay_slot
	   150      "00000000000000000000000000000000" // 	nop
.delay_slot
.swstall delay_slot
	   151      "00000000000000000000000000000000" // 	nop
	   152      "01001000000001100000000000000000" // 	lhi r6, #0
	   153      "01001000000000110000000000000000" // 	lhi r3, #0
	   154      "01010100110001100000000010011111" // 	ori r6,r6,#159
	   155      "01010100011000110000000010100001" // 	ori r3,r3,#161
.src_ref 1 "ops.h" 113 8 first
	   156      "10111100000000000000000000100001" // 	bor lc,r0,#33
.src_ref 1 "ops.h" 113 8
	   157      "10111100110000010000000000000000" // 	bor ls,r6,#0
.src_ref 1 "ops.h" 113 8
	   158      "10111100011000100000000000000000" // 	bor le,r3,#0
.src_ref 1 "ops.h" 115 23 first
.begin_of_loop
	   159      "00000000100000110010000000110100" // 	lw r3,(r4+=4)
.src_ref 1 "ops.h" 115 15
	   160      "00000000101000110010000000110111" // 	sw r3,(r5+=4)
.end_of_loop
.swstall dm_addr_conflict
	   161      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 111 4 first
.rts 172
	   162      "00110000010000000000000000000000" // 	jr r2
.delay_slot
.swstall delay_slot
	   163      "00000000000000000000000000000000" // 	nop
.delay_slot
.swstall delay_slot
	   164      "00000000000000000000000000000000" // 	nop
.label void_ModularMultiplication___P__uint___P__uint___P__uint___uint___P__uint
.function ModularMultiplication void_ModularMultiplication___P__uint___P__uint___P__uint___uint___P__uint
.src_ref 1 "ops.h" 120 first
.src_ref 1 "ops.h" 120 5
	   165      "00001000001000010000000000011100" // 	addi r1,r1,#28
	   166      "01010100101010010000000000000000" // 	ori r9,r5,#0
	   167      "01001000000000110000000000000000" // 	lhi r3, #0
	   168      "01010100011001010000001010011100" // 	ori r5,r3,#668
	   169      "10101000001010001111111111111100" // 	sw r8,-4(r1)
	   170      "10101000001001111111111111111000" // 	sw r7,-8(r1)
	   171      "10101000001001101111111111110100" // 	sw r6,-12(r1)
	   172      "10101000001010011111111111110000" // 	sw r9,-16(r1)
	   173      "10101000001000101111111111101100" // 	sw r2,-20(r1)
	   174      "10101000001001011111111111101000" // 	sw r5,-24(r1)
.src_ref 1 "ops.h" 124 4 first
.no_stack_arguments
	   175      "00101011111111111111111111100100" // 	jal #-28
.delay_slot
.swstall delay_slot
	   176      "00000000000000000000000000000000" // 	nop
.return_address
	   177      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 125 15
	   178      "01010000001001001111111111110000" // 	lw r4,-16(r1)
	   179      "01010100101001010000001100100000" // 	ori r5,r5,#800
	   180      "10101000001001011111111111110000" // 	sw r5,-16(r1)
.src_ref 1 "ops.h" 125 4 first
.no_stack_arguments
	   181      "00101011111111111111111111011110" // 	jal #-34
.delay_slot
.swstall delay_slot
	   182      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 126 4 first
.return_address
.no_stack_arguments
	   183      "00101011111111111111111110010001" // 	jal #-111
.src_ref 1 "ops.h" 126 16
.delay_slot
	   184      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.return_address
	   185      "00100100000000000000000000011001" // 	j #25
.src_ref 1 "ops.h" 128 11
.delay_slot
	   186      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 130 12 first
.no_stack_arguments
	   187      "00101011111111111111111110011001" // 	jal #-103
.src_ref 1 "ops.h" 130 32
.delay_slot
	   188      "01010000001001001111111111101000" // 	lw r4,-24(r1)
.src_ref 1 "ops.h" 130 8
.return_address
	   189      "00010100011000000000000000000110" // 	beqz r3,#6
.src_ref 1 "ops.h" 128 11
.delay_slot
	   190      "01001000000001010000000000000000" // 	lhi r5, #0
.delay_slot
.swstall delay_slot
	   191      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 132 34
	   192      "01010000001001101111111111111100" // 	lw r6,-4(r1)
.src_ref 1 "ops.h" 132 22
	   193      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.src_ref 1 "ops.h" 132 12 first
.no_stack_arguments
	   194      "00101011111111111111111101011010" // 	jal #-166
.src_ref 1 "ops.h" 132 25
.delay_slot
	   195      "01010000001001011111111111110000" // 	lw r5,-16(r1)
.src_ref 1 "ops.h" 128 11
.return_address
	   196      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 134 12 first
.no_stack_arguments
	   197      "00101011111111111111111110001111" // 	jal #-113
.src_ref 1 "ops.h" 134 27
.delay_slot
	   198      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.src_ref 1 "ops.h" 134 8
.return_address
	   199      "00010100011000000000000000000101" // 	beqz r3,#5
.delay_slot
.swstall delay_slot
	   200      "00000000000000000000000000000000" // 	nop
.delay_slot
.swstall delay_slot
	   201      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 136 32
	   202      "01010000001001101111111111111100" // 	lw r6,-4(r1)
.src_ref 1 "ops.h" 136 22
	   203      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.src_ref 1 "ops.h" 136 12 first
.no_stack_arguments
	   204      "00101011111111111111111101010000" // 	jal #-176
.src_ref 1 "ops.h" 136 27
.delay_slot
	   205      "01010000001001011111111111110100" // 	lw r5,-12(r1)
.src_ref 1 "ops.h" 138 19
.return_address
	   206      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.src_ref 1 "ops.h" 138 8 first
.no_stack_arguments
	   207      "00101011111111111111111101100100" // 	jal #-156
.src_ref 1 "ops.h" 138 24
.delay_slot
	   208      "01010000001001011111111111111100" // 	lw r5,-4(r1)
.return_address
	   209      "01010000001001011111111111100100" // 	lw r5,-28(r1)
	   210      "00001000101001010000000000000001" // 	addi r5,r5,#1
.src_ref 1 "ops.h" 128 18
	   211      "01010000001001001111111111111000" // 	lw r4,-8(r1)
.src_ref 1 "ops.h" 128 18 first
	   212      "00000000101001000010000000010100" // 	sltu r4,r5,r4
.src_ref 1 "ops.h" 128 4
	   213      "00100000100000001111111111100100" // 	bnez r4,#-28
.delay_slot
	   214      "10101000001001011111111111100100" // 	sw r5,-28(r1)
.delay_slot
.swstall delay_slot
	   215      "00000000000000000000000000000000" // 	nop
	   216      "01001000000001010000000000000000" // 	lhi r5, #0
	   217      "01010100101001000000001110110000" // 	ori r4,r5,#944
.src_ref 1 "ops.h" 141
	   218      "01010000001001011111111111101100" // 	lw r5,-20(r1)
.src_ref 1 "ops.h" 140 4 first
	   219      "01010000100000110000000000000000" // 	lw r3,0(r4)
.src_ref 1 "ops.h" 140 11
	   220      "00001000011000110000000000000001" // 	addi r3,r3,#1
.src_ref 1 "ops.h" 141 first
.rts 172
	   221      "00110000101000000000000000000000" // 	jr r5
.src_ref 1 "ops.h" 140 4 first
.delay_slot
	   222      "10101000100000110000000000000000" // 	sw r3,0(r4)
.src_ref 1 "ops.h" 141 first
.delay_slot
	   223      "00001000001000011111111111100100" // 	addi r1,r1,#-28
.label void_ModularExponentiation___P__uint___P__uint___P__uint___uint___P__uint___P__uint
.function ModularExponentiation void_ModularExponentiation___P__uint___P__uint___P__uint___uint___P__uint___P__uint
.src_ref 1 "ops.h" 143 first
.src_ref 1 "ops.h" 143 5
	   224      "00001000001000010000000001000000" // 	addi r1,r1,#64
	   225      "01001000000011000000000000000000" // 	lhi r12, #0
	   226      "01001000000010110000000000000000" // 	lhi r11, #0
	   227      "01001000000010100000000000000000" // 	lhi r10, #0
	   228      "01001000000000110000000000000000" // 	lhi r3, #0
	   229      "01010101100011000000001110100100" // 	ori r12,r12,#932
	   230      "01010101011010110000001110101000" // 	ori r11,r11,#936
	   231      "01010101010010100000001110110000" // 	ori r10,r10,#944
	   232      "01010100011000110000001110101100" // 	ori r3,r3,#940
	   233      "10101000001001011111111111001100" // 	sw r5,-52(r1)
.src_ref 1 "ops.h" 147 34 first
	   234      "10101000011000000000000000000000" // 	sw r0,0(r3)
.src_ref 1 "ops.h" 147 24
	   235      "10101001010000000000000000000000" // 	sw r0,0(r10)
.src_ref 1 "ops.h" 147 14
	   236      "10101001011000000000000000000000" // 	sw r0,0(r11)
.src_ref 1 "ops.h" 147 4
	   237      "10101001100000000000000000000000" // 	sw r0,0(r12)
	   238      "10101000001010011111111111011100" // 	sw r9,-36(r1)
	   239      "10101000001010001111111111011000" // 	sw r8,-40(r1)
	   240      "10101000001001111111111111010100" // 	sw r7,-44(r1)
	   241      "10101000001001101111111111010000" // 	sw r6,-48(r1)
	   242      "10101000001001001111111111001000" // 	sw r4,-56(r1)
	   243      "10101000001000101111111111000100" // 	sw r2,-60(r1)
	   244      "10101000001000111111111111101100" // 	sw r3,-20(r1)
	   245      "10101000001010101111111111101000" // 	sw r10,-24(r1)
	   246      "10101000001010111111111111100100" // 	sw r11,-28(r1)
	   247      "10101000001011001111111111100000" // 	sw r12,-32(r1)
.src_ref 1 "ops.h" 149 29
	   248      "01010101000001010000000000000000" // 	ori r5,r8,#0
.src_ref 1 "ops.h" 149 4 first
.no_stack_arguments
	   249      "00101011111111111111111110101011" // 	jal #-85
.src_ref 1 "ops.h" 149 40
.delay_slot
	   250      "01010100100010000000000000000000" // 	ori r8,r4,#0
.return_address
	   251      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 150 26
	   252      "01010000001001001111111111011000" // 	lw r4,-40(r1)
	   253      "01010100101001010000000100010000" // 	ori r5,r5,#272
.src_ref 1 "ops.h" 150 39
	   254      "01010000001001111111111111010100" // 	lw r7,-44(r1)
.src_ref 1 "ops.h" 150 34
	   255      "01010000001001101111111111010000" // 	lw r6,-48(r1)
	   256      "10101000001001011111111111011000" // 	sw r5,-40(r1)
.src_ref 1 "ops.h" 150 4 first
.no_stack_arguments
	   257      "00101011111111111111111110100011" // 	jal #-93
.src_ref 1 "ops.h" 150 42
.delay_slot
	   258      "01010000001010001111111111011100" // 	lw r8,-36(r1)
.return_address
	   259      "00100100000000000000000000010011" // 	j #19
.src_ref 1 "ops.h" 147 43
.delay_slot
	   260      "01001000000001010000000000000000" // 	lhi r5, #0
.src_ref 1 "ops.h" 155 12 first
.no_stack_arguments
	   261      "00101011111111111111111101001111" // 	jal #-177
.src_ref 1 "ops.h" 155 27
.delay_slot
	   262      "01010000001001001111111111001100" // 	lw r4,-52(r1)
.src_ref 1 "ops.h" 155 8
.return_address
	   263      "00010100011000000000000000000111" // 	beqz r3,#7
.src_ref 1 "ops.h" 157 39
.src_ref 1 "ops.h" 159 33
.delay_slot
	   264      "01010000001001011111111111001000" // 	lw r5,-56(r1)
.delay_slot
.swstall delay_slot
	   265      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 157 42
	   266      "01010000001001101111111111010000" // 	lw r6,-48(r1)
.src_ref 1 "ops.h" 157 50
	   267      "01010000001010001111111111011100" // 	lw r8,-36(r1)
.src_ref 1 "ops.h" 157 34
	   268      "01010000001001001111111111011100" // 	lw r4,-36(r1)
.src_ref 1 "ops.h" 157 12 first
.no_stack_arguments
	   269      "00101011111111111111111110010111" // 	jal #-105
.src_ref 1 "ops.h" 157 47
.delay_slot
	   270      "01010000001001111111111111010100" // 	lw r7,-44(r1)
.src_ref 1 "ops.h" 159 33
.return_address
	   271      "01010000001001011111111111001000" // 	lw r5,-56(r1)
.src_ref 1 "ops.h" 159 36
	   272      "01010000001001101111111111010000" // 	lw r6,-48(r1)
.src_ref 1 "ops.h" 159 44
	   273      "01010000001010001111111111001000" // 	lw r8,-56(r1)
.src_ref 1 "ops.h" 159 30
	   274      "01010000001001001111111111001000" // 	lw r4,-56(r1)
.src_ref 1 "ops.h" 159 8 first
.no_stack_arguments
	   275      "00101011111111111111111110010001" // 	jal #-111
.src_ref 1 "ops.h" 159 41
.delay_slot
	   276      "01010000001001111111111111010100" // 	lw r7,-44(r1)
.return_address
	   277      "01010000001001011111111111000000" // 	lw r5,-64(r1)
	   278      "00001000101001010000000000000001" // 	addi r5,r5,#1
.src_ref 1 "ops.h" 153 18
	   279      "01010000001001111111111111010100" // 	lw r7,-44(r1)
.src_ref 1 "ops.h" 153 18 first
	   280      "00000000101001110011100000010100" // 	sltu r7,r5,r7
.src_ref 1 "ops.h" 153 4
	   281      "00100000111000001111111111101010" // 	bnez r7,#-22
.delay_slot
	   282      "10101000001001011111111111000000" // 	sw r5,-64(r1)
.delay_slot
.swstall delay_slot
	   283      "00000000000000000000000000000000" // 	nop
.src_ref 1 "ops.h" 161 41
	   284      "01010000001001111111111111010100" // 	lw r7,-44(r1)
.src_ref 1 "ops.h" 161 36
	   285      "01010000001001101111111111010000" // 	lw r6,-48(r1)
.src_ref 1 "ops.h" 161 44
.src_ref 1 "ops.h" 161 26
	   286      "01010000001010001111111111011100" // 	lw r8,-36(r1)
.src_ref 1 "ops.h" 161 29
	   287      "01010000001001011111111111011000" // 	lw r5,-40(r1)
.src_ref 1 "ops.h" 161 4 first
.no_stack_arguments
	   288      "00101011111111111111111110000100" // 	jal #-124
.src_ref 1 "ops.h" 161 26
.delay_slot
	   289      "01010101000001000000000000000000" // 	ori r4,r8,#0
.src_ref 1 "ops.h" 163 76
.return_address
	   290      "01010000001001001111111111101000" // 	lw r4,-24(r1)
.src_ref 1 "ops.h" 163 66
	   291      "01010000001001101111111111101100" // 	lw r6,-20(r1)
.src_ref 1 "ops.h" 163 57
	   292      "01010000001001011111111111100100" // 	lw r5,-28(r1)
.src_ref 1 "ops.h" 163 48
	   293      "01010000001001111111111111100000" // 	lw r7,-32(r1)
.src_ref 1 "ops.h" 163 76 first
	   294      "01010000100010000000000000000000" // 	lw r8,0(r4)
.src_ref 1 "ops.h" 163 48
	   295      "01010000111001110000000000000000" // 	lw r7,0(r7)
.src_ref 1 "ops.h" 163 57
	   296      "01010000101001010000000000000000" // 	lw r5,0(r5)
.src_ref 1 "ops.h" 163 66
	   297      "01010000110001100000000000000000" // 	lw r6,0(r6)
	   298      "10101000001010001111111111110000" // 	sw r8,-16(r1)
	   299      "10101000001001101111111111110100" // 	sw r6,-12(r1)
	   300      "10101000001001011111111111111000" // 	sw r5,-8(r1)
	   301      "10101000001001111111111111111100" // 	sw r7,-4(r1)
	   302      "01001000000001000000000000000000" // 	lhi r4, #0
.src_ref 1 "ops.h" 163 4
	   303      "00101000000000000000000000011111" // 	jal #31
.delay_slot
	   304      "01010100100001000000010001001010" // 	ori r4,r4,#1098
.src_ref 1 "ops.h" 164
.return_address
	   305      "01010000001001011111111111000100" // 	lw r5,-60(r1)
.src_ref 1 "ops.h" 164 first
.rts 172
	   306      "00110000101000000000000000000000" // 	jr r5
.src_ref 1 "ops.h" 164
.delay_slot
	   307      "00001000001000011111111111000000" // 	addi r1,r1,#-64
.delay_slot
.swstall delay_slot
	   308      "00000000000000000000000000000000" // 	nop
.label _hosted_clib_io
.function _hosted_clib_io _hosted_clib_io
.src_ref 2 "stdio.c" 93 first
.src_ref 3 "stdio.c" 83 first
.src_ref 2 "stdio.c" 95 first
	   309      "00000000000000000000000000000000" // 	nop
.src_ref 3 "stdio.c" 84 first
	   310      "00000000000000000000000000000000" // 	nop
.src_ref 3 "stdio.c" 85 first
	   311      "00000000000000000000000000000000" // 	nop
.src_ref 3 "stdio.c" 87 first
	   312      "00000000000000000000000000000000" // 	nop
.src_ref 2 "stdio.c" 96 17
	   313      "01010100000000110000000000010000" // 	ori r3,r0,#16
.src_ref 2 "stdio.c" 97 4 first
.rts 172
	   314      "00110000010000000000000000000000" // 	jr r2
.src_ref 2 "stdio.c" 96 5 first
.delay_slot
	   315      "10101000100000110000000000000000" // 	sw r3,0(r4)
.delay_slot
.swstall delay_slot
	   316      "00000000000000000000000000000000" // 	nop
.label __sint_vfprintf___PFILE___P__cchar___Pvoid
.function vfprintf __sint_vfprintf___PFILE___P__cchar___Pvoid
.src_ref 2 "stdio.c" 316 first
.src_ref 2 "stdio.c" 318 11
	   317      "01010100100000110000000000000000" // 	ori r3,r4,#0
.src_ref 2 "stdio.c" 316 4
	   318      "00001000001000010000000001001000" // 	addi r1,r1,#72
.src_ref 2 "stdio.c" 318 11 first
	   319      "01010000011010000000000000000000" // 	lw r8,0(r3)
.src_ref 2 "stdio.c" 318 11
	   320      "00001000001001001111111110111000" // 	addi r4,r1,#-72
.src_ref 2 "stdio.c" 318 11
	   321      "00001000000000111111111111111111" // 	addi r3,r0,#-1
.src_ref 2 "stdio.c" 318 11
	   322      "01010100000001110000000000000010" // 	ori r7,r0,#2
.src_ref 2 "stdio.c" 318 11
	   323      "10101000001010001111111110111100" // 	sw r8,-68(r1)
.src_ref 2 "stdio.c" 318 11
	   324      "10101000001001011111111111001100" // 	sw r5,-52(r1)
.src_ref 2 "stdio.c" 318 11
	   325      "10101000001001101111111111111000" // 	sw r6,-8(r1)
.src_ref 2 "stdio.c" 318 11
	   326      "10101000001000111111111111000000" // 	sw r3,-64(r1)
.src_ref 2 "stdio.c" 318 11
	   327      "10101000100001110000000000000000" // 	sw r7,0(r4)
	   328      "10101000001000101111111111111100" // 	sw r2,-4(r1)
.src_ref 2 "stdio.c" 318 11
.no_stack_arguments
	   329      "00101011111111111111111111101011" // 	jal #-21
.delay_slot
.swstall delay_slot
	   330      "00000000000000000000000000000000" // 	nop
.src_ref 2 "stdio.c" 318 4
.return_address
	   331      "01010000001001001111111111111100" // 	lw r4,-4(r1)
.src_ref 2 "stdio.c" 318 4
.rts 172
	   332      "00110000100000000000000000000000" // 	jr r4
.src_ref 2 "stdio.c" 318 11
.delay_slot
	   333      "01010000001000111111111111000000" // 	lw r3,-64(r1)
.src_ref 2 "stdio.c" 318 4
.delay_slot
	   334      "00001000001000011111111110111000" // 	addi r1,r1,#-72
.label __sint_printf___P__cchar
.function printf __sint_printf___P__cchar
.src_ref 2 "stdio.c" 330 first
	   335      "01001000000001100000000000000000" // 	lhi r6, #0
	   336      "01010100110000110000010101110100" // 	ori r3,r6,#1396
.src_ref 2 "stdio.c" 330 4
	   337      "00001000001001100000000000000000" // 	addi r6,r1,#0
.src_ref 2 "stdio.c" 334 13
	   338      "01010100100001010000000000000000" // 	ori r5,r4,#0
.src_ref 2 "stdio.c" 334 13 first
.tail_call
	   339      "00100111111111111111111111101001" // 	j #-23
.src_ref 2 "stdio.c" 334 13
.delay_slot
	   340      "01010000011001000000000000000000" // 	lw r4,0(r3)
.dir 0 "%PROCDIR%"
.dir 1 "/users/Cours/inf8505/12/Documents/inf8505/tlx/sha256"
.dir 2 "%PROCDIR%/runtime/src"
.dir 3 "%PROCDIR%/runtime/%PROCDIR%/runtime/src"
