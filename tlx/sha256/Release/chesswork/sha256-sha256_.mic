
// File generated by mist version N-2018.03#7d02e3ca79#180723, Thu Jan 24 11:30:38 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../lib -I../../../lib/isg -r +f +i sha256-sha256_ tlx


// m22, jump target: m1 (next offset: 23)
000000  1 0  "00001000001000010000000001101100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_2_B1 (108,SP,SP); 
000001  1 0  "01001000000010101011101101100111"   // (R[10]) = lhi_const_1_B1 (-17561); 
000002  1 0  "10101000001001101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[6],SP,-12); 
000003  1 0  "10101000001001011111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[5],SP,-8); 
000004  1 0  "10101000001001011111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[5],SP,-4); 
000005  1 0  "01001000000000110110101000001001"   // (R[3]) = lhi_const_1_B1 (27145); 
000006  1 0  "01010101010001101010111010000101"   // (R[6]) = w32_const_bor_1_B1 (R[10],44677); 
000007  1 0  "01001000000001110011110001101110"   // (R[7]) = lhi_const_1_B1 (15470); 
000008  1 0  "01001000000010001010010101001111"   // (R[8]) = lhi_const_1_B1 (-23217); 
000009  1 0  "01001000000010010101000100001110"   // (R[9]) = lhi_const_1_B1 (20750); 
000010  1 0  "01001000000011001001101100000101"   // (R[12]) = lhi_const_1_B1 (-25851); 
000011  1 0  "01001000000010110001111110000011"   // (R[11]) = lhi_const_1_B1 (8067); 
000012  1 0  "01010100101011100000000000000000"   // R[14] = R[5]; 
000013  1 0  "10101000001000101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[2],SP,-16); 
000014  1 0  "01010100011001011110011001100111"   // (R[5]) = w32_const_bor_1_B1 (R[3],58983); 
000015  1 0  "01010100111001111111001101110010"   // (R[7]) = w32_const_bor_1_B1 (R[7],62322); 
000016  1 0  "01010101000010001111010100111010"   // (R[8]) = w32_const_bor_1_B1 (R[8],62778); 
000017  1 0  "01010101001010010101001001111111"   // (R[9]) = w32_const_bor_1_B1 (R[9],21119); 
000018  1 0  "01010101100010100110100010001100"   // (R[10]) = w32_const_bor_1_B1 (R[12],26764); 
000019  1 0  "01010101011010111101100110101011"   // (R[11]) = w32_const_bor_1_B1 (R[11],55723); 
000020  1 0  "01001000000011010101101111100000"   // (R[13]) = lhi_const_1_B1 (23520); 
000021  1 0  "00100100000000000000000000001001"   // () = j_const_1_B1 (9); 
000022  1 0  "01010101101011001100110100011001"   // (R[12]) = w32_const_bor_1_B1 (R[13],52505); 

// m16;   next: m17 (next offset: 26)
000023  1 0  "10101000001001001111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[4],SP,-20); 
000024  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000025  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m17 subroutine call;   next: m18 (next offset: 26)

// m18;   next: m1 (next offset: 31)
000026  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000027  1 0  "00001000100011101111111111000000"   // (R[14],MC) = _pl_const_4_B1 (R[4]); 
000028  1 0  "01010000001001001111111111101100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000029  1 0  "00001000100001000000000001000000"   // (R[4],MC) = _pl_const_5_B1 (R[4]); 
000030  1 0  "10101000001011101111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[14],SP,-8); 

// m1;   next: m19 (next offset: 31)

// m19;   next: m24, jump target: m16 (next offset: 35)
000031  1 0  "01110001110000110000000001000000"   // (R[3]) = _ge_const_1_B1 (R[14]); 
000032  1 0  "00100000011000001111111111110101"   // () = nez_br_const_1_B1 (R[3],-11); 
000033  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000034  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m24;   next: m434, jump target: m433 (next offset: 40)
000035  1 0  "01010000001011101111111111111000"   // (R[14]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000036  1 0  "10010001110011010000000000111000"   // (R[13]) = _lt_const_1_B1 (R[14]); 
000037  1 0  "00100001101000000000000000110010"   // () = nez_br_const_1_B1 (R[13],50); 
000038  1 0  "01001000000000110000000000000000"   // (R[3]) = const_3_B3 (); 
000039  1 0  "00000001110000000001000000010001"   // (R[2]) = _le_const_1_B2 (R[14]); 

// m434;   next: m432, jump target: m66 (next offset: 44)
000040  1 0  "01010100100011110000000000000000"   // R[15] = R[4]; 
000041  1 0  "00100000010000000000000000001101"   // () = nez_br_const_1_B1 (R[2],13); 
000042  1 0  "00001000001001001111111110010100"   // (R[4],MC) = _pl_rd_res_reg_const_1_B1 (-108,SP); 
000043  1 0  "01010100100011010000000000000000"   // R[13] = R[4]; 

// m432;   next: m62 (next offset: 53)
000044  1 0  "01001000000011010000000000110101"   // (R[13]) = lhi_const_1_B1 (53); 
000045  1 0  "01001000000000110000000000110111"   // (R[3]) = lhi_const_1_B1 (55); 
000046  1 0  "01010101101011010000000000110101"   // (R[13]) = w32_const_bor_1_B1 (R[13],53); 
000047  1 0  "01010100011000110000000000110111"   // (R[3]) = w32_const_bor_1_B1 (R[3],55); 
000048  1 0  "10111101101000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[13]); 
000049  1 0  "10111100011000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[3]); 
000050  1 0  "10111101110000000000000000000000"   // (LC) = wr_res_reg_3_B1 (R[14]); 
000051  1 0  "01001000000000110000000000000000"   // (R[3]) = const_3_B3 (); 
000052  1 0  "01010100100011010000000000000000"   // R[13] = R[4]; 

// m62;   next: m438, loop target: m62 (next offset: 56)
000053  1 0  "00000001111011100000100000110001"   // (R[14],R[15]) = load__pl_const_1_B1 (R[15],DMb,DMb,DMb); 
000054  1 0  "00000001101011100000100000110101"   // (R[13],DMb[-108]) = store__pl_const_2_B1 (R[14],R[13],DMb[-108]); 
000055  1 0  "00001000011000110000000000000001"   // (R[3],MC) = _pl_const_3_B1 (R[3]); 

// m438;   next: m68 (next offset: 56)

// m66;   next: m68 (next offset: 56)

// m68;   next: m139, jump target: m79 (next offset: 62)
000056  1 0  "00001000011011100000000000000001"   // (R[14],MC) = _pl_const_3_B1 (R[3]); 
000057  1 0  "01110001110011110000000001000000"   // (R[15]) = _ge_const_1_B1 (R[14]); 
000058  1 0  "01010100000000100000000010000000"   // (R[2]) = const_4_B2 (); 
000059  1 0  "00100001111000000000000000001100"   // () = nez_br_const_1_B1 (R[15],12); 
000060  1 0  "00000000100011100001100000000001"   // (R[3],) = _pl_1_B1 (R[4],R[14]); 
000061  1 0  "01011101101000100000000000000000"   // (DMb[-108]) = store_2_B1 (R[2],R[13],DMb[-108]); 

// m139;   next: m75 (next offset: 72)
000062  1 0  "01010100000011110000000001000000"   // (R[15]) = const_5_B2 (); 
000063  1 0  "00000001111011100111000000011000"   // (R[14],MC) = _mi_1_B1 (R[15],R[14]); 
000064  1 0  "01001000000011010000000001001000"   // (R[13]) = lhi_const_1_B1 (72); 
000065  1 0  "01001000000000100000000001001000"   // (R[2]) = lhi_const_1_B1 (72); 
000066  1 0  "01010101101011010000000001001000"   // (R[13]) = w32_const_bor_1_B1 (R[13],72); 
000067  1 0  "01010100010011110000000001001000"   // (R[15]) = w32_const_bor_1_B1 (R[2],72); 
000068  1 0  "10111101110000000000000000000000"   // (LC) = wr_res_reg_3_B1 (R[14]); 
000069  1 0  "10111101101000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[13]); 
000070  1 0  "10111101111000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[15]); 
000071  1 0  "00000000000000000000000000000000"  .swstall "sha_n_L74"   // () = vd_nop_ID (); 

// m75;   next: m439, loop target: m75 (next offset: 73)
000072  1 0  "00000000011000000000100000110101"   // (R[3],DMb[-108]) = store_const__pl_const_1_B1 (R[3],DMb[-108]); 

// m439;   next: m81 (next offset: 73)

// m79;   next: m81 (next offset: 73)

// m81;   next: m82 (next offset: 75)
000073  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000074  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m82 subroutine call;   next: m83 (next offset: 75)

// m83;   next: m84 (next offset: 87)
000075  1 0  "10101000001001101111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[6],SP,-44); 
000076  1 0  "10101000001011001111111111100000"   // (__spill_DMw[-32]) = stack_store_bndl_B3 (R[12],SP,-32); 
000077  1 0  "10101000001010111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[11],SP,-8); 
000078  1 0  "10101000001010101111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[10],SP,-20); 
000079  1 0  "10101000001010011111111111011100"   // (__spill_DMw[-36]) = stack_store_bndl_B3 (R[9],SP,-36); 
000080  1 0  "10101000001010001111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[8],SP,-24); 
000081  1 0  "10101000001001111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[7],SP,-28); 
000082  1 0  "10101000001001011111111111011000"   // (__spill_DMw[-40]) = stack_store_bndl_B3 (R[5],SP,-40); 
000083  1 0  "00001000001001001111111110010100"   // (R[4],MC) = _pl_rd_res_reg_const_1_B1 (-108,SP); 
000084  1 0  "01010100000001100000000000111000"   // (R[6]) = const_2_B2 (); 
000085  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000086  1 0  "01001000000001010000000000000000"   // (R[5]) = const_3_B3 (); 

// m84 subroutine call;   next: m440 (next offset: 87)

// m440, jump target: m413 (next offset: 89)
000087  1 0  "00100100000000000000000000101101"   // () = j_const_1_B1 (45); 
000088  1 0  "01010000001001101111111111111100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m433;   next: m430, jump target: m39 (next offset: 96)
000089  1 0  "10101000001010111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[11],SP,-8); 
000090  1 0  "10101000001010101111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[10],SP,-20); 
000091  1 0  "10101000001010001111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[8],SP,-24); 
000092  1 0  "00001000001011011111111110010100"   // (R[13],MC) = _pl_rd_res_reg_const_1_B1 (-108,SP); 
000093  1 0  "00100000010000000000000000001100"   // () = nez_br_const_1_B1 (R[2],12); 
000094  1 0  "10101000001001111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[7],SP,-28); 
000095  1 0  "01010101101001110000000000000000"   // R[7] = R[13]; 

// m430;   next: m35 (next offset: 104)
000096  1 0  "01001000000001110000000001101010"   // (R[7]) = lhi_const_1_B1 (106); 
000097  1 0  "01001000000010000000000001101000"   // (R[8]) = lhi_const_1_B1 (104); 
000098  1 0  "01010100111001110000000001101010"   // (R[7]) = w32_const_bor_1_B1 (R[7],106); 
000099  1 0  "10111100111000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[7]); 
000100  1 0  "01010101000010000000000001101000"   // (R[8]) = w32_const_bor_1_B1 (R[8],104); 
000101  1 0  "10111101110000000000000000000000"   // (LC) = wr_res_reg_3_B1 (R[14]); 
000102  1 0  "10111101000000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[8]); 
000103  1 0  "01010101101001110000000000000000"   // R[7] = R[13]; 

// m35;   next: m435, loop target: m35 (next offset: 107)
000104  1 0  "00000000100010000000100000110001"   // (R[8],R[4]) = load__pl_const_1_B1 (R[4],DMb,DMb,DMb); 
000105  1 0  "00000000111010000000100000110101"   // (R[7],DMb[-108]) = store__pl_const_2_B1 (R[8],R[7],DMb[-108]); 
000106  1 0  "00001000011000110000000000000001"   // (R[3],MC) = _pl_const_3_B1 (R[3]); 

// m435;   next: m41 (next offset: 107)

// m39;   next: m41 (next offset: 107)

// m41;   next: m135, jump target: m52 (next offset: 117)
000107  1 0  "10101000001011001111111111100000"   // (__spill_DMw[-32]) = stack_store_bndl_B3 (R[12],SP,-32); 
000108  1 0  "00001000011011000000000000000001"   // (R[12],MC) = _pl_const_3_B1 (R[3]); 
000109  1 0  "10101000001001011111111111011000"   // (__spill_DMw[-40]) = stack_store_bndl_B3 (R[5],SP,-40); 
000110  1 0  "01110001100010000000000000111000"   // (R[8]) = _ge_const_2_B1 (R[12]); 
000111  1 0  "10101000001010011111111111011100"   // (__spill_DMw[-36]) = stack_store_bndl_B3 (R[9],SP,-36); 
000112  1 0  "01010100000010100000000010000000"   // (R[10]) = const_4_B2 (); 
000113  1 0  "01010100000001010000000000111000"   // (R[5]) = const_2_B2 (); 
000114  1 0  "00100001000000000000000000001110"   // () = nez_br_const_1_B1 (R[8],14); 
000115  1 0  "01011100111010100000000000000000"   // (DMb[-108]) = store_2_B1 (R[10],R[7],DMb[-108]); 
000116  1 0  "00000001100011010101100000000001"   // (R[11],) = _pl_1_B1 (R[13],R[12]); 

// m135;   next: m48 (next offset: 126)
000117  1 0  "00000000101011000010100000011000"   // (R[5],MC) = _mi_1_B1 (R[5],R[12]); 
000118  1 0  "01001000000010010000000001111110"   // (R[9]) = lhi_const_1_B1 (126); 
000119  1 0  "01001000000001110000000001111110"   // (R[7]) = lhi_const_1_B1 (126); 
000120  1 0  "01010101001010010000000001111110"   // (R[9]) = w32_const_bor_1_B1 (R[9],126); 
000121  1 0  "01010100111011000000000001111110"   // (R[12]) = w32_const_bor_1_B1 (R[7],126); 
000122  1 0  "10111100101000000000000000000000"   // (LC) = wr_res_reg_3_B1 (R[5]); 
000123  1 0  "10111101001000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[9]); 
000124  1 0  "10111101100000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[12]); 
000125  1 0  "00000000000000000000000000000000"  .swstall "sha_n_L74"   // () = vd_nop_ID (); 

// m48;   next: m436, loop target: m48 (next offset: 127)
000126  1 0  "00000001011000000000100000110101"   // (R[11],DMb[-108]) = store_const__pl_const_1_B1 (R[11],DMb[-108]); 

// m436, jump target: m413 (next offset: 130)
000127  1 0  "10101000001001101111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[6],SP,-44); 
000128  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000129  1 0  "01010000001001101111111111111100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m52;   next: m413 (next offset: 133)
000130  1 0  "10101000001001101111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[6],SP,-44); 
000131  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000132  1 0  "01010000001001101111111111111100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m413;   next: m87 (next offset: 155)
000133  1 0  "10001000110001100000000000000011"   // (R[6]) = _ls_const_1_B1 (R[6]); 
000134  1 0  "10011100110001010000000000001000"   // (R[5]) = _rs_const_1_B1 (R[6]); 
000135  1 0  "01011100001001101111111111010011"   // (DMb[-108]) = store___uchar__pl_rd_res_reg_const_1_B1 (R[6],-45,DMb[-108],SP); 
000136  1 0  "10011100110010010000000000010000"   // (R[9]) = _rs_const_2_B1 (R[6]); 
000137  1 0  "01011100001001011111111111010010"   // (DMb[-108]) = store___uchar__pl_rd_res_reg_const_1_B1 (R[5],-46,DMb[-108],SP); 
000138  1 0  "01011100001010011111111111010001"   // (DMb[-108]) = store___uchar__pl_rd_res_reg_const_1_B1 (R[9],-47,DMb[-108],SP); 
000139  1 0  "10011100110001100000000000011000"   // (R[6]) = _rs_const_3_B1 (R[6]); 
000140  1 0  "01011100001001101111111111010000"   // (DMb[-108]) = store__pl_rd_res_reg_const_1_B1 (R[6],-48,DMb[-108],SP); 
000141  1 0  "01011100001000001111111111001111"   // (DMb[-108]) = store_const__pl_rd_res_reg_const_1_B1 (-49,DMb[-108],SP); 
000142  1 0  "01011100001000001111111111001110"   // (DMb[-108]) = store_const__pl_rd_res_reg_const_1_B1 (-50,DMb[-108],SP); 
000143  1 0  "01011100001000001111111111001101"   // (DMb[-108]) = store_const__pl_rd_res_reg_const_1_B1 (-51,DMb[-108],SP); 
000144  1 0  "01011100001000001111111111001100"   // (DMb[-108]) = store_const__pl_rd_res_reg_const_1_B1 (-52,DMb[-108],SP); 
000145  1 0  "00001000001001001111111110010100"   // (R[4],MC) = _pl_rd_res_reg_const_1_B1 (-108,SP); 
000146  1 0  "01010000001011001111111111100000"   // (R[12]) = stack_load_bndl_B3 (__spill_DMw[-32],SP,-32); 
000147  1 0  "01010000001010111111111111111000"   // (R[11]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000148  1 0  "01010000001010101111111111101100"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000149  1 0  "01010000001010011111111111011100"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-36],SP,-36); 
000150  1 0  "01010000001010001111111111101000"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000151  1 0  "01010000001001111111111111100100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 
000152  1 0  "01010000001001011111111111011000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-40],SP,-40); 
000153  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000154  1 0  "01010000001001101111111111010100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-44],SP,-44); 

// m87 subroutine call;   next: m117 (next offset: 155)

// m117;   next: m96 (next offset: 164)
000155  1 0  "01001000000000110000000010100100"   // (R[3]) = lhi_const_1_B1 (164); 
000156  1 0  "01001000000001000000000010111101"   // (R[4]) = lhi_const_1_B1 (189); 
000157  1 0  "01010100011000110000000010100100"   // (R[3]) = w32_const_bor_1_B1 (R[3],164); 
000158  1 0  "01010100100001000000000010111101"   // (R[4]) = w32_const_bor_1_B1 (R[4],189); 
000159  1 0  "10111100011000010000000000000000"   // (LS) = wr_res_reg_1_B1 (R[3]); 
000160  1 0  "10111100100000100000000000000000"   // (LE) = wr_res_reg_2_B1 (R[4]); 
000161  1 0  "10111100000000000000000000000100"   // (LC) = wr_res_reg_const_1_B1 (4); 
000162  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000163  1 0  "01010100000000110000000000011000"   // (R[3]) = const_1_B2 (); 

// m96;   next: m102, loop target: m96 (next offset: 190)
000164  1 0  "00000000101000110111000000010111"   // (R[14]) = _rs_1_B1 (R[5],R[3]); 
000165  1 0  "00010001110011100000000011111111"   // (R[14]) = _ad_const_1_B1 (R[14]); 
000166  1 0  "00000000110000110110100000010111"   // (R[13]) = _rs_1_B1 (R[6],R[3]); 
000167  1 0  "00000000100011100010000000110101"   // (R[4],DMb,DMb,DMb) = store__pl_const_1_B1 (R[14],R[4],DMb,DMb,DMb); 
000168  1 0  "00010001101011010000000011111111"   // (R[13]) = _ad_const_1_B1 (R[13]); 
000169  1 0  "00000000111000110111100000010111"   // (R[15]) = _rs_1_B1 (R[7],R[3]); 
000170  1 0  "00000000100011010010000000110101"   // (R[4],DMb,DMb,DMb) = store__pl_const_1_B1 (R[13],R[4],DMb,DMb,DMb); 
000171  1 0  "00010001111011110000000011111111"   // (R[15]) = _ad_const_1_B1 (R[15]); 
000172  1 0  "00000000100011110010000000110101"   // (R[4],DMb,DMb,DMb) = store__pl_const_1_B1 (R[15],R[4],DMb,DMb,DMb); 
000173  1 0  "00000001000000110111000000010111"   // (R[14]) = _rs_1_B1 (R[8],R[3]); 
000174  1 0  "00010001110011110000000011111111"   // (R[15]) = _ad_const_1_B1 (R[14]); 
000175  1 0  "00000000100011110010000000110101"   // (R[4],DMb,DMb,DMb) = store__pl_const_1_B1 (R[15],R[4],DMb,DMb,DMb); 
000176  1 0  "00000001001000110110100000010111"   // (R[13]) = _rs_1_B1 (R[9],R[3]); 
000177  1 0  "00010001101011110000000011111111"   // (R[15]) = _ad_const_1_B1 (R[13]); 
000178  1 0  "00000001010000110111000000010111"   // (R[14]) = _rs_1_B1 (R[10],R[3]); 
000179  1 0  "00000000100011110010000000110101"   // (R[4],DMb,DMb,DMb) = store__pl_const_1_B1 (R[15],R[4],DMb,DMb,DMb); 
000180  1 0  "00000001011000110110100000010111"   // (R[13]) = _rs_1_B1 (R[11],R[3]); 
000181  1 0  "00010001110011100000000011111111"   // (R[14]) = _ad_const_1_B1 (R[14]); 
000182  1 0  "00000001100000110111100000010111"   // (R[15]) = _rs_1_B1 (R[12],R[3]); 
000183  1 0  "00000000100011100010000000110101"   // (R[4],DMb,DMb,DMb) = store__pl_const_1_B1 (R[14],R[4],DMb,DMb,DMb); 
000184  1 0  "00010001101011010000000011111111"   // (R[13]) = _ad_const_1_B1 (R[13]); 
000185  1 0  "00000000100011010010000000110101"   // (R[4],DMb,DMb,DMb) = store__pl_const_1_B1 (R[13],R[4],DMb,DMb,DMb); 
000186  1 0  "00010001111011100000000011111111"   // (R[14]) = _ad_const_1_B1 (R[15]); 
000187  1 0  "01011100100011100000000000000000"   // (DMb,DMb,DMb) = store_1_B1 (R[14],R[4],DMb,DMb,DMb); 
000188  1 0  "00001000011000111111111111111000"   // (R[3],MC) = _pl_const_1_B1 (R[3]); 
000189  1 0  "00001000100001001111111111100101"   // (R[4],MC) = _pl_const_2_B1 (R[4]); 

// m102 (next offset: /)
000190  1 0  "01010000001001101111111111110000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000191  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000192  1 0  "00001000001000011111111110010100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (-108,SP,SP); 
000193  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

