
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Wed Apr 10 23:52:56 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I../lib -I../lib/isg -I../lib/runtime/include -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -itlx_chess.h +wRelease/chesswork sha256.c tlx

toolrelease _18R1;

// int printf(const char *, ...)
F__sint_printf___P__cchar : user_defined, called {
    fnm : "printf" 'int printf(const char *, ...)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// void array_add(ARRAY_TYPE, ARRAY_TYPE, ARRAY_TYPE)
Fvoid_array_add___P__uint___P__uint___P__uint : user_defined, called {
    fnm : "array_add" 'void array_add(ARRAY_TYPE, ARRAY_TYPE, ARRAY_TYPE)'; 
    arg : ( w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void array_div2(ARRAY_TYPE, ARRAY_TYPE)
Fvoid_array_div2___P__uint___P__uint : user_defined, called {
    fnm : "array_div2" 'void array_div2(ARRAY_TYPE, ARRAY_TYPE)'; 
    arg : ( w32:i w32:i w32:i );
    loc : ( R[2] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// byte array_bit_test(ARRAY_TYPE, uint)
F__uint_array_bit_test___P__uint___uint : user_defined, called {
    fnm : "array_bit_test" 'byte array_bit_test(ARRAY_TYPE, uint)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void array_reset(ARRAY_TYPE)
Fvoid_array_reset___P__uint : user_defined, called {
    fnm : "array_reset" 'void array_reset(ARRAY_TYPE)'; 
    arg : ( w32:i w32:i );
    loc : ( R[2] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void array_copy(ARRAY_TYPE, ARRAY_TYPE)
Fvoid_array_copy___P__uint___P__uint : user_defined, called {
    fnm : "array_copy" 'void array_copy(ARRAY_TYPE, ARRAY_TYPE)'; 
    arg : ( w32:i w32:i w32:i );
    loc : ( R[2] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void ModularMultiplication(ARRAY_TYPE, ARRAY_TYPE, ARRAY_TYPE, uint, ARRAY_TYPE)
Fvoid_ModularMultiplication___P__uint___P__uint___P__uint___uint___P__uint : user_defined, called {
    fnm : "ModularMultiplication" 'void ModularMultiplication(ARRAY_TYPE, ARRAY_TYPE, ARRAY_TYPE, uint, ARRAY_TYPE)'; 
    arg : ( w32:i w32:i w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[4] R[5] R[6] R[7] R[8] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void ModularExponentiation(ARRAY_TYPE, ARRAY_TYPE, ARRAY_TYPE, uint, ARRAY_TYPE, ARRAY_TYPE)
Fvoid_ModularExponentiation___P__uint___P__uint___P__uint___uint___P__uint___P__uint : user_defined, called {
    fnm : "ModularExponentiation" 'void ModularExponentiation(ARRAY_TYPE, ARRAY_TYPE, ARRAY_TYPE, uint, ARRAY_TYPE, ARRAY_TYPE)'; 
    arg : ( w32:i w32:i w32:i w32:i w32:i w32:i w32:i );
    loc : ( R[2] R[4] R[5] R[6] R[7] R[8] R[9] );
    frm : ( b=16 );
    llv : 1 0 0 0 0 ;
}

// void array_set(ARRAY_TYPE, uint)
Fvoid_array_set___P__uint___uint : user_defined, called {
    fnm : "array_set" 'void array_set(ARRAY_TYPE, uint)'; 
    arg : ( w32:i w32:i w32:i );
    loc : ( R[2] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void array_print(ARRAY_TYPE)
Fvoid_array_print___P__uint : user_defined, called {
    fnm : "array_print" 'void array_print(ARRAY_TYPE)'; 
    arg : ( w32:i w32:i );
    loc : ( R[2] R[4] );
    frm : ( b=4 );
    llv : 1 0 0 0 0 ;
}

// int main()
F_main : user_defined, called {
    fnm : "main" 'int main()'; 
    arg : ( w32:i w32:r );
    loc : ( R[2] R[3] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int VA0F__sint_printf___P__cchar(const char *, ...)
VA0F__sint_printf___P__cchar : user_defined, called {
    fnm : "VA0F__sint_printf___P__cchar" 'int VA0F__sint_printf___P__cchar(const char *, ...)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// int VA1F__sint_printf___P__cchar(const char *, ...)
VA1F__sint_printf___P__cchar : user_defined, called {
    fnm : "VA1F__sint_printf___P__cchar" 'int VA1F__sint_printf___P__cchar(const char *, ...)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// int VA2F__sint_printf___P__cchar(const char *, ...)
VA2F__sint_printf___P__cchar : user_defined, called {
    fnm : "VA2F__sint_printf___P__cchar" 'int VA2F__sint_printf___P__cchar(const char *, ...)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// int VA3F__sint_printf___P__cchar(const char *, ...)
VA3F__sint_printf___P__cchar : user_defined, called {
    fnm : "VA3F__sint_printf___P__cchar" 'int VA3F__sint_printf___P__cchar(const char *, ...)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// int VA4F__sint_printf___P__cchar(const char *, ...)
VA4F__sint_printf___P__cchar : user_defined, called {
    fnm : "VA4F__sint_printf___P__cchar" 'int VA4F__sint_printf___P__cchar(const char *, ...)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

// int VA5F__sint_printf___P__cchar(const char *, ...)
VA5F__sint_printf___P__cchar : user_defined, called {
    fnm : "VA5F__sint_printf___P__cchar" 'int VA5F__sint_printf___P__cchar(const char *, ...)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    llv : 0 0 0 0 0 ;
}

