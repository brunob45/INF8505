
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sat Apr 13 19:04:06 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../lib -I../../../lib/isg -r +f +i coder-writebits_add_ tlx


// m3;   next: m8, jump target: m6 (next offset: 24)
000000  1 0  "01001000000010100000000000000000"   // (R[10]) = lhi_const_1_B1 (0); 
000001  1 0  "01001000000010010000000000000000"   // (R[9]) = lhi_const_1_B1 (0); 
000002  1 0  "01010101010010110000000000000000"   // (R[11]) = w32_const_bor_1_B1 (R[10],0); 
000003  1 0  "00000000000001000001100000001010"   // RA = R[4]; 
000004  1 0  "01010101001010010000000000000000"   // (R[9]) = w32_const_bor_1_B1 (R[9],0); 
000005  1 0  "00000000000001010010000000001010"   // RB = R[5]; 
000006  1 0  "01001000000010100000000000000000"   // (R[10]) = lhi_const_1_B1 (0); 
000007  1 0  "01010101010010100000000000000000"   // (R[10]) = w32_const_bor_1_B1 (R[10],0); 
000008  1 0  "01010001011001010000000000000000"   // (RC) = load_1_B1 (R[11],DMb_stat); 
000009  1 0  "01010001001001100000000000000000"   // (RD) = load_1_B1 (R[9],DMb_stat); 
000010  1 0  "00000000000000000000000000100111"   // (RC,RD,RE,RF) = wb_add_ci_1_B1 (RA,RB,RC,RD); 
000011  1 0  "00001000001000010000000000011000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_2_B1 (24,SP,SP); 
000012  1 0  "01001000000011100000000000000000"   // (R[14]) = lhi_const_1_B1 (0); 
000013  1 0  "01001000000011010000000100000000"   // (R[13]) = lhi_const_1_B1 (256); 
000014  1 0  "01010001010011000000000000000000"   // (R[12]) = load_1_B1 (R[10],DMb_stat); 
000015  1 0  "01010101110001000000000000000000"   // (R[4]) = w32_const_bor_1_B1 (R[14],0); 
000016  1 0  "01010101101011010000000100000000"   // (R[13]) = w32_const_bor_1_B1 (R[13],256); 
000017  1 0  "00000001100011010111000000010100"   // (R[14]) = _lt_1_B1 (R[12],R[13]); 
000018  1 0  "10101001001001100000000000000000"   // (DMb_stat) = store_1_B1 (RD,R[9],DMb_stat); 
000019  1 0  "10101000001000101111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[2],SP,-4); 
000020  1 0  "10101000001010101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[10],SP,-12); 
000021  1 0  "00100001110000000000000000001111"   // () = nez_br_const_1_B1 (R[14],15); 
000022  1 0  "10101001011001010000000000000000"   // (DMb_stat) = store_1_B1 (RC,R[11],DMb_stat); 
000023  1 0  "10101000001001001111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[4],SP,-8); 

// m8;   next: m9 (next offset: 29)
000024  1 0  "10101000001010001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (RF,SP,-16); 
000025  1 0  "10101000001011011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[13],SP,-20); 
000026  1 0  "10101000001001111111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (RE,SP,-24); 
000027  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000028  1 0  "01010100000001010000000100000000"   // (R[5]) = const_1_B2 (); 

// m9 subroutine call;   next: m10 (next offset: 29)

// m10, jump target: m12 (next offset: 38)
000029  1 0  "01010000001010011111111111111000"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000030  1 0  "01010101001001000000000000000000"   // R[4] = R[9]; 
000031  1 0  "01010000001001111111111111101000"   // (RE) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000032  1 0  "01010000001010001111111111110000"   // (RF) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000033  1 0  "01010000001011011111111111101100"   // (R[13]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000034  1 0  "01010000001010101111111111110100"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000035  1 0  "00000001001001110000100000110101"   // (R[9],DMb_stat) = store___uchar__pl_const_1_B1 (R[9],RE,DMb_stat); 
000036  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000037  1 0  "10101001010010010000000000000000"   // (DMb_stat) = store_1_B1 (R[9],R[10],DMb_stat); 

// m6;   next: m12 (next offset: 41)
000038  1 0  "00001001100010010000000000000001"   // (R[9],MC) = _pl_const_1_B1 (R[12]); 
000039  1 0  "10101001010010010000000000000000"   // (DMb_stat) = store_1_B1 (R[9],R[10],DMb_stat); 
000040  1 0  "01011101100001110000000000000000"   // (DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat) = store___uchar_1_B1 (R[12],RE,DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat); 

// m12;   next: m16, jump target: m25 (next offset: 45)
000041  1 0  "10010100111010010000000011111111"   // (R[9]) = _ne_const_1_B1 (RE); 
000042  1 0  "00100001001000000000000000010101"   // () = nez_br_const_1_B1 (R[9],21); 
000043  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000044  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m16;   next: m21, jump target: m19 (next offset: 50)
000045  1 0  "01010001010010010000000000000000"   // (R[9]) = load_1_B1 (R[10],DMb_stat); 
000046  1 0  "00000001001011010101100000010100"   // (R[11]) = _lt_1_B1 (R[9],R[13]); 
000047  1 0  "00100001011000000000000000001101"   // () = nez_br_const_1_B1 (R[11],13); 
000048  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000049  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m21;   next: m22 (next offset: 54)
000050  1 0  "10101000001010001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (RF,SP,-16); 
000051  1 0  "10101000001011011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[13],SP,-20); 
000052  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000053  1 0  "01010100000001010000000100000000"   // (R[5]) = const_1_B2 (); 

// m22 subroutine call;   next: m23 (next offset: 54)

// m23, jump target: m54 (next offset: 62)
000054  1 0  "01010000001010011111111111111000"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000055  1 0  "01010101001001000000000000000000"   // R[4] = R[9]; 
000056  1 0  "01010000001010101111111111110100"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000057  1 0  "01010000001010001111111111110000"   // (RF) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000058  1 0  "00000001001000000000100000110101"   // (R[9],DMb_stat) = store_const__pl_const_1_B1 (R[9],DMb_stat); 
000059  1 0  "10101001010010010000000000000000"   // (DMb_stat) = store_1_B1 (R[9],R[10],DMb_stat); 
000060  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000061  1 0  "01010000001011011111111111101100"   // (R[13]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m19;   next: m54 (next offset: 65)
000062  1 0  "00001001001010110000000000000001"   // (R[11],MC) = _pl_const_1_B1 (R[9]); 
000063  1 0  "10101001010010110000000000000000"   // (DMb_stat) = store_1_B1 (R[11],R[10],DMb_stat); 
000064  1 0  "01011101001000000000000000000000"   // (DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat) = store_const_1_B1 (R[9],DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat); 

// m54;   next: m27 (next offset: 65)

// m25;   next: m27 (next offset: 65)

// m27;   next: m32, jump target: m30 (next offset: 71)
000065  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000066  1 0  "01010001010010010000000000000000"   // (R[9]) = load_1_B1 (R[10],DMb_stat); 
000067  1 0  "00000001001011010101100000010100"   // (R[11]) = _lt_1_B1 (R[9],R[13]); 
000068  1 0  "00100001011000000000000000001101"   // () = nez_br_const_1_B1 (R[11],13); 
000069  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000070  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m32;   next: m33 (next offset: 75)
000071  1 0  "10101000001011011111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[13],SP,-16); 
000072  1 0  "10101000001010001111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (RF,SP,-20); 
000073  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000074  1 0  "01010100000001010000000100000000"   // (R[5]) = const_1_B2 (); 

// m33 subroutine call;   next: m34 (next offset: 75)

// m34, jump target: m36 (next offset: 83)
000075  1 0  "01010000001010011111111111111000"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000076  1 0  "01010101001001000000000000000000"   // R[4] = R[9]; 
000077  1 0  "01010000001010001111111111101100"   // (RF) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000078  1 0  "01010000001011011111111111110000"   // (R[13]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000079  1 0  "01010000001010101111111111110100"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000080  1 0  "00000001001010000000100000110101"   // (R[9],DMb_stat) = store___uchar__pl_const_1_B1 (R[9],RF,DMb_stat); 
000081  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000082  1 0  "10101001010010010000000000000000"   // (DMb_stat) = store_1_B1 (R[9],R[10],DMb_stat); 

// m30;   next: m36 (next offset: 86)
000083  1 0  "00001001001010110000000000000001"   // (R[11],MC) = _pl_const_1_B1 (R[9]); 
000084  1 0  "10101001010010110000000000000000"   // (DMb_stat) = store_1_B1 (R[11],R[10],DMb_stat); 
000085  1 0  "01011101001010000000000000000000"   // (DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat) = store___uchar_1_B1 (R[9],RF,DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat); 

// m36;   next: m40, jump target: m49 (next offset: 90)
000086  1 0  "10010101000010010000000011111111"   // (R[9]) = _ne_const_1_B1 (RF); 
000087  1 0  "00100001001000000000000000010100"   // () = nez_br_const_1_B1 (R[9],20); 
000088  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000089  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m40;   next: m45, jump target: m43 (next offset: 95)
000090  1 0  "01010001010010010000000000000000"   // (R[9]) = load_1_B1 (R[10],DMb_stat); 
000091  1 0  "00000001001011010101000000010100"   // (R[10]) = _lt_1_B1 (R[9],R[13]); 
000092  1 0  "00100001010000000000000000001001"   // () = nez_br_const_1_B1 (R[10],9); 
000093  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000094  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m45;   next: m46 (next offset: 97)
000095  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000096  1 0  "01010100000001010000000100000000"   // (R[5]) = const_1_B2 (); 

// m46 subroutine call;   next: m47 (next offset: 97)

// m47, jump target: m52 (next offset: 103)
000097  1 0  "01010000001010011111111111111000"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000098  1 0  "01010000001010101111111111111100"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000099  1 0  "01010000001010111111111111110100"   // (R[11]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000100  1 0  "00000001001000000000100000110101"   // (R[9],DMb_stat) = store_const__pl_const_1_B1 (R[9],DMb_stat); 
000101  1 0  "00100100000000000000000000001000"   // () = j_const_1_B1 (8); 
000102  1 0  "10101001011010010000000000000000"   // (DMb_stat) = store_1_B1 (R[9],R[11],DMb_stat); 

// m43, jump target: m52 (next offset: 109)
000103  1 0  "01010000001010111111111111110100"   // (R[11]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000104  1 0  "00001001001011000000000000000001"   // (R[12],MC) = _pl_const_1_B1 (R[9]); 
000105  1 0  "01010000001010101111111111111100"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000106  1 0  "10101001011011000000000000000000"   // (DMb_stat) = store_1_B1 (R[12],R[11],DMb_stat); 
000107  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000108  1 0  "01011101001000000000000000000000"   // (DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat) = store_const_1_B1 (R[9],DMb,DMb,DMb,DMb,DMb,DMb_stat,DMb_stat,DMb_stat,DMb_stat); 

// m49;   next: m52 (next offset: 110)
000109  1 0  "01010000001010101111111111111100"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m52 (next offset: /)
000110  1 0  "00110001010000000000000000000000"   // () = __rts_jr_1_B1 (R[10]); 
000111  1 0  "00001000001000011111111111101000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (-24,SP,SP); 
000112  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

