
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:08 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-estimateDiv64To32_ tlx


// m4;   next: m10, jump target: m11 (next offset: 5)
000000  1 0  "01010100101010010000000000000000"   // R[9] = R[5]; 
000001  1 0  "00000000110001000010100000001111"   // (R[5]) = _gt_1_B1 (R[6],R[4]); 
000002  1 0  "00100000101000000000000000000100"   // () = nez_br_const_1_B1 (R[5],4); 
000003  1 0  "00001000001000010000000000011000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (24,SP,SP); 
000004  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m10 (next offset: 8)
000005  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000006  1 0  "00001000000000111111111111111111"   // (R[3]) = const_5_B1 (); 
000007  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 

// m11;   next: m13 (next offset: 8)

// m13;   next: m79, jump target: m16 (next offset: 14)
000008  1 0  "10011100110001010000000000010000"   // (R[5]) = _rs_const_1_B1 (R[6]); 
000009  1 0  "10001000101000110000000000010000"   // (R[3]) = _ls_const_1_B1 (R[5]); 
000010  1 0  "00000000011001000101000000010001"   // (R[10]) = _le_1_B1 (R[3],R[4]); 
000011  1 0  "00100001010000000000000000010001"   // () = nez_br_const_1_B1 (R[10],17); 
000012  1 0  "01001000000010001111111111111111"   // (R[8]) = const_4_B1 (); 
000013  1 0  "01001000000001111111111111111111"   // (R[7]) = const_4_B1 (); 

// m79;   next: m80 (next offset: 22)
000014  1 0  "10101000001000101111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[2],SP,-4); 
000015  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 
000016  1 0  "10101000001010011111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[9],SP,-12); 
000017  1 0  "10101000001001101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[6],SP,-16); 
000018  1 0  "10101000001001011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[5],SP,-20); 
000019  1 0  "10101000001001001111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[4],SP,-24); 
000020  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000021  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m80 subroutine call;   next: m77 (next offset: 22)

// m77;   next: m68 (next offset: 30)
000022  1 0  "10001000011010000000000000010000"   // (R[8]) = _ls_const_1_B1 (R[3]); 
000023  1 0  "01010000001001001111111111101000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000024  1 0  "01010000001010011111111111110100"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000025  1 0  "01010000001001101111111111110000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000026  1 0  "01010000001001011111111111101100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000027  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000028  1 0  "01010000001000101111111111111100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000029  1 0  "01001000000001111111111111111111"   // (R[7]) = const_4_B1 (); 

// m16;   next: m68 (next offset: 30)

// m68;   next: m72, jump target: m71 (next offset: 41)
000030  1 0  "00010001000011001111111111111111"   // (R[12]) = __ushort_1_B1 (R[8]); 
000031  1 0  "00010000110010111111111111111111"   // (R[11]) = __ushort_1_B1 (R[6]); 
000032  1 0  "10011101000011100000000000010000"   // (R[14]) = _rs_const_2_B1 (R[8]); 
000033  1 0  "00000001011011100110100000100000"   // (R[13]) = _ml_1_B1 (R[11],R[14]); 
000034  1 0  "00000000101011000101000000100000"   // (R[10]) = _ml_1_B1 (R[5],R[12]); 
000035  1 0  "00000001011011000101100000100000"   // (R[11]) = _ml_1_B1 (R[11],R[12]); 
000036  1 0  "00000001010011010110100000000001"   // (R[13],MC) = _pl_3_B1 (R[13],R[10]); 
000037  1 0  "00000001101010100110000000010100"   // (R[12]) = _lt_1_B1 (R[13],R[10]); 
000038  1 0  "00100001100000000000000000000010"   // () = nez_br_const_1_B1 (R[12],2); 
000039  1 0  "00000000101011100111000000100000"   // (R[14]) = _ml_1_B1 (R[5],R[14]); 
000040  1 0  "01001000000010100000000000000001"   // (R[10]) = const_3_B1 (); 

// m72;   next: m66 (next offset: 42)
000041  1 0  "01001000000010100000000000000000"   // (R[10]) = const_2_B3 (); 

// m71;   next: m66 (next offset: 42)

// m66;   next: m20 (next offset: 49)
000042  1 0  "10011101101011000000000000010000"   // (R[12]) = _rs_const_1_B1 (R[13]); 
000043  1 0  "10001001101011010000000000010000"   // (R[13]) = _ls_const_1_B1 (R[13]); 
000044  1 0  "00000001010011000101000000000001"   // (R[10],MC) = _pl_2_B1 (R[10],R[12]); 
000045  1 0  "00000001011011010101100000000001"   // (R[11],MC) = _pl_3_B1 (R[11],R[13]); 
000046  1 0  "00000001010011100101000000000001"   // (R[10],MC) = _pl_3_B1 (R[14],R[10]); 
000047  1 0  "00000001011011010110000000010100"   // (R[12]) = _lt_1_B1 (R[11],R[13]); 
000048  1 0  "00000001010011000101000000000001"   // (R[10],MC) = _pl_4_B1 (R[10],R[12]); 

// m20 chess_separator_scheduler;   next: m21 (next offset: 49)

// m21;   next: m22 (next offset: 51)
000049  1 0  "00000001001010110100100000011000"   // (R[9],MC) = sub_1_B1 (R[9],R[11]); 
000050  1 0  "00000000100010100010000000011001"   // (R[4],MC) = subx_1_B1 (R[4],R[10],MC); 

// m22 chess_separator_scheduler;   next: m34 (next offset: 51)

// m34, jump target: m1 (next offset: 54)
000051  1 0  "10101000001000101111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[2],SP,-4); 
000052  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000053  1 0  "10001000110001100000000000010000"   // (R[6]) = _ls_const_1_B1 (R[6]); 

// m30;   next: m1 (next offset: 57)
000054  1 0  "00000000110010010100100000000001"   // (R[9],MC) = add_1_B1 (R[9],R[6]); 
000055  1 0  "00000000100001010010000000000010"   // (R[4],MC) = addx_1_B1 (R[4],R[5],MC); 
000056  1 0  "00000000111010000100000000000001"   // (R[8],MC) = _pl_1_B1 (R[8],R[7]); 

// m1;   next: m31 (next offset: 57)

// m31;   next: m36, jump target: m30 (next offset: 61)
000057  1 0  "00000000100000000101000000010011"   // (R[10]) = _lt_const_1_B2 (R[4]); 
000058  1 0  "00100001010000001111111111111010"   // () = nez_br_const_1_B1 (R[10],-6); 
000059  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000060  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m36;   next: m83, jump target: m39 (next offset: 68)
000061  1 0  "10001000100001000000000000010000"   // (R[4]) = _ls_const_1_B1 (R[4]); 
000062  1 0  "10011101001001100000000000010000"   // (R[6]) = _rs_const_1_B1 (R[9]); 
000063  1 0  "00000000100001100010000000001010"   // (R[4]) = _or_1_B1 (R[4],R[6]); 
000064  1 0  "00000000011001000011000000010001"   // (R[6]) = _le_1_B1 (R[3],R[4]); 
000065  1 0  "00100000110000000000000000000101"   // () = nez_br_const_1_B1 (R[6],5); 
000066  1 0  "10101000001010001111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[8],SP,-8); 
000067  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m83;   next: m84 (next offset: 70)
000068  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000069  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m84 subroutine call;   next: m88 (next offset: 70)

// m88, jump target: m44 (next offset: 72)
000070  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000071  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m39;   next: m44 (next offset: 73)
000072  1 0  "01010100000000111111111111111111"   // (R[3]) = const_1_B1 (); 

// m44 (next offset: /)
000073  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000074  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000075  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000076  1 0  "00000000011001000001100000001010"   // (R[3]) = _or_1_B1 (R[4],R[3]); 
000077  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 

