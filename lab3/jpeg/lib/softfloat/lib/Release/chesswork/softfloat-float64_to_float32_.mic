
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:11 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-float64_to_float32_ tlx


// m3;   next: m329, jump target: m289 (next offset: 10)
000000  1 0  "10011100100000110000000000010100"   // (R[3]) = _rs_const_2_B1 (R[4]); 
000001  1 0  "00010000011000110000011111111111"   // (R[3]) = _ad_const_1_B1 (R[3]); 
000002  1 0  "01001000000001100000000000001111"   // (R[6]) = lhi_const_1_B1 (15); 
000003  1 0  "00001000001000010000000000101100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (44,SP,SP); 
000004  1 0  "10010100011010000000011111111111"   // (R[8]) = _ne_const_1_B1 (R[3]); 
000005  1 0  "01010100110001101111111111111111"   // (R[6]) = w32_const_bor_1_B1 (R[6],65535); 
000006  1 0  "01010100100001110000000000000000"   // R[7] = R[4]; 
000007  1 0  "00100001000000000000000000100011"   // () = nez_br_const_1_B1 (R[8],35); 
000008  1 0  "00000000100001100011000000000011"   // (R[6]) = _ad_1_B1 (R[4],R[6]); 
000009  1 0  "10011100100001000000000000011111"   // (R[4]) = _rs_const_4_B1 (R[4]); 

// m329;   next: m283, jump target: m284 (next offset: 14)
000010  1 0  "00000000101001100011000000001010"   // (R[6]) = _or_2_B1 (R[6],R[5]); 
000011  1 0  "00010100110000000000000000011010"   // () = eqz_br_const_1_B1 (R[6],26); 
000012  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000013  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m283 (next offset: 39)
000014  1 0  "10011100101001100000000000010100"   // (R[6]) = _rs_const_2_B1 (R[5]); 
000015  1 0  "10001000111000110000000000001100"   // (R[3]) = _ls_const_3_B1 (R[7]); 
000016  1 0  "10101000001001001111111111101100"   // (DMb,PM,DMb[-20]) = _pl_rd_res_reg_const_store_1_B1 (R[4],-20,DMb,PM,DMb[-20],SP); 
000017  1 0  "00000000011001100010000000001010"   // (R[4]) = _or_2_B1 (R[3],R[6]); 
000018  1 0  "10101000001001001111111111110000"   // (DMb,PM,DMb[-20]) = _pl_rd_res_reg_const_store_1_B1 (R[4],-16,DMb,PM,DMb[-20],SP); 
000019  1 0  "10001000101001010000000000001100"   // (R[5]) = _ls_const_3_B1 (R[5]); 
000020  1 0  "10101000001001011111111111110100"   // (DMb,PM,DMb[-20]) = _pl_rd_res_reg_const_store_1_B1 (R[5],-12,DMb,PM,DMb[-20],SP); 
000021  1 0  "01001000000001000111111111000000"   // (R[4]) = const_3_B1 (); 
000022  1 0  "01010000001001011111111111101100"   // (R[5]) = _pl_rd_res_reg_const_load_1_B1 (-20,DMb,PM,DMb[-20],SP); 
000023  1 0  "10101000001001011111111111100000"   // (DMb,PM,DMb[-32],DMb,DMb) = _pl_rd_res_reg_const_store_2_B1 (R[5],-32,DMb,PM,DMb[-32],DMb,DMb,SP); 
000024  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000025  1 0  "01010000001001011111111111110000"   // (R[5]) = _pl_rd_res_reg_const_load_1_B1 (-16,DMb,PM,DMb[-20],SP); 
000026  1 0  "10101000001001011111111111100100"   // (DMb,PM,DMb[-32],DMb,DMb) = _pl_rd_res_reg_const_store_2_B1 (R[5],-28,DMb,PM,DMb[-32],DMb,DMb,SP); 
000027  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000028  1 0  "01010000001001011111111111110100"   // (R[5]) = _pl_rd_res_reg_const_load_1_B1 (-12,DMb,PM,DMb[-20],SP); 
000029  1 0  "10101000001001011111111111101000"   // (DMb,PM,DMb[-32],DMb,DMb) = _pl_rd_res_reg_const_store_2_B1 (R[5],-24,DMb,PM,DMb[-32],DMb,DMb,SP); 
000030  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000031  1 0  "01010000001001101111111111100000"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-32,DMb,SP); 
000032  1 0  "01010000001001011111111111100100"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb,SP); 
000033  1 0  "10001000110001100000000000011111"   // (R[6]) = _ls_const_2_B1 (R[6]); 
000034  1 0  "10011100101001010000000000001001"   // (R[5]) = _rs_const_3_B1 (R[5]); 
000035  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 
000036  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000037  1 0  "00000000100001100010000000001010"   // (R[4]) = _or_1_B1 (R[6],R[4]); 
000038  1 0  "00000000100001010001100000001010"   // (R[3]) = _or_2_B1 (R[4],R[5]); 

// m284;   next: m288 (next offset: 39)

// m288 (next offset: 44)
000039  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 
000040  1 0  "01001000000001010111111110000000"   // (R[5]) = const_2_B1 (); 
000041  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000042  1 0  "10001000100001000000000000011111"   // (R[4]) = _ls_const_2_B1 (R[4]); 
000043  1 0  "00000000100001010001100000000001"   // (R[3],) = _pl_1_B1 (R[4],R[5]); 

// m289;   next: m352 (next offset: 44)

// m352;   next: m319, jump target: m320 (next offset: 52)
000044  1 0  "10001000101001110000000000001010"   // (R[7]) = _ls_const_1_B1 (R[5]); 
000045  1 0  "10011100101001010000000000010110"   // (R[5]) = _rs_const_1_B1 (R[5]); 
000046  1 0  "10001000110001100000000000001010"   // (R[6]) = _ls_const_1_B1 (R[6]); 
000047  1 0  "00000000101001100010100000001010"   // (R[5]) = _or_2_B1 (R[6],R[5]); 
000048  1 0  "00000000111000000011000000010101"   // (R[6]) = nez_1_B1 (R[7]); 
000049  1 0  "00010100011000000000000000000101"   // () = eqz_br_const_1_B1 (R[3],5); 
000050  1 0  "00000000101001100010100000001010"   // (R[5]) = _or_3_B1 (R[5],R[6]); 
000051  1 0  "10101000001001011111111111111100"   // (DMb[-4]) = store__pl_rd_res_reg_const_1_B1 (R[5],-4,DMb[-4],SP); 

// m319;   next: m324 (next offset: 56)
000052  1 0  "01001000000001010100000000000000"   // (R[5]) = const_1_B1 (); 
000053  1 0  "01010000001001101111111111111100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-4,DMb[-4],SP); 
000054  1 0  "00000000101001100010100000001010"   // (R[5]) = _or_1_B1 (R[6],R[5]); 
000055  1 0  "10101000001001011111111111111100"   // (DMb[-4]) = store__pl_rd_res_reg_const_1_B1 (R[5],-4,DMb[-4],SP); 

// m320;   next: m324 (next offset: 56)

// m324;   next: m323 (next offset: 60)
000056  1 0  "00001000011001011111110001111111"   // (R[5],MC) = _pl_const_1_B1 (R[3]); 
000057  1 0  "01010000001001101111111111111100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-4,DMb[-4],SP); 
000058  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000059  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 

// m323 subroutine call;   next: m325 (next offset: 60)

// m325 (next offset: /)

