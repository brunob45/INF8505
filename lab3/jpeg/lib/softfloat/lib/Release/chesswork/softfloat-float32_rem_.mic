
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:10 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-float32_rem_ tlx


// m234;   next: m242, jump target: m33 (next offset: 23)
000000  1 0  "00001000001000010000000000011000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (24,SP,SP); 
000001  1 0  "01001000000001100000000001111111"   // (R[6]) = lhi_const_1_B1 (127); 
000002  1 0  "01010100110000111111111111111111"   // (R[3]) = w32_const_bor_1_B1 (R[6],65535); 
000003  1 0  "10011100100001110000000000010111"   // (R[7]) = _rs_const_3_B1 (R[4]); 
000004  1 0  "00000000011001000011000000000011"   // (R[6]) = _ad_1_B1 (R[4],R[3]); 
000005  1 0  "10011100100010010000000000011111"   // (R[9]) = _rs_const_4_B1 (R[4]); 
000006  1 0  "10101000001001001111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[4],SP,-4); 
000007  1 0  "00010000111010110000000011111111"   // (R[11]) = _ad_const_2_B1 (R[7]); 
000008  1 0  "10011100101001000000000000010111"   // (R[4]) = _rs_const_3_B1 (R[5]); 
000009  1 0  "00010000100001110000000011111111"   // (R[7]) = _ad_const_2_B1 (R[4]); 
000010  1 0  "10010101011011000000000011111111"   // (R[12]) = _ne_const_1_B1 (R[11]); 
000011  1 0  "00000000011001010010000000000011"   // (R[4]) = _ad_1_B1 (R[5],R[3]); 
000012  1 0  "10101000001001101111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[6],SP,-8); 
000013  1 0  "10101000001010111111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[11],SP,-12); 
000014  1 0  "10101000001000101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[2],SP,-16); 
000015  1 0  "00000000110000000011000000010101"   // (R[6]) = nez_1_B1 (R[6]); 
000016  1 0  "00000000100000000100000000010101"   // (R[8]) = nez_1_B1 (R[4]); 
000017  1 0  "01100100111010100000000011111111"   // (R[10]) = _eq_const_1_B1 (R[7]); 
000018  1 0  "10010100111010110000000011111111"   // (R[11]) = _ne_const_1_B1 (R[7]); 
000019  1 0  "10101000001010011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[9],SP,-20); 
000020  1 0  "00100001100000000000000000001011"   // () = nez_br_const_1_B1 (R[12],11); 
000021  1 0  "01001000000000110111111111111111"   // (R[3]) = lhi_const_1_B1 (32767); 
000022  1 0  "01010100011000111111111111111111"   // (R[3]) = w32_const_bor_1_B1 (R[3],65535); 

// m242;   next: m26, jump target: m28 (next offset: 28)
000023  1 0  "00000001000010100010000000000011"   // (R[4]) = land_1_B1 (R[10],R[8]); 
000024  1 0  "00000000100001100011000000001010"   // (R[6]) = lor_1_B1 (R[6],R[4]); 
000025  1 0  "00010100110000000000000000000011"   // () = eqz_br_const_1_B1 (R[6],3); 
000026  1 0  "01010000001000101111111111110000"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000027  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 

// m26;   next: m25 (next offset: 30)
000028  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000029  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 

// m25 subroutine call;   next: m27 (next offset: 30)

// m27 (next offset: 30)

// m28;   next: m32 (next offset: 30)

// m32 (next offset: 33)
000030  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000031  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 
000032  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m33;   next: m342 (next offset: 33)

// m342;   next: m339, jump target: m51 (next offset: 36)
000033  1 0  "00100001011000000000000000001010"   // () = nez_br_const_1_B1 (R[11],10); 
000034  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000035  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m339;   next: m45, jump target: m47 (next offset: 39)
000036  1 0  "00010100100000000000000000000100"   // () = br_eqz_const_1_B1 (R[4],4); 
000037  1 0  "01010000001000111111111111111100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000038  1 0  "01010000001000101111111111110000"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 

// m45;   next: m44 (next offset: 42)
000039  1 0  "01010100011001000000000000000000"   // R[4] = R[3]; 
000040  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000041  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 

// m44 subroutine call;   next: m46 (next offset: 42)

// m46 (next offset: 42)

// m47;   next: m50 (next offset: 42)

// m50 (next offset: 45)
000042  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000043  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 
000044  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m51;   next: m245 (next offset: 45)

// m245;   next: m340, jump target: m68 (next offset: 48)
000045  1 0  "00100000111000000000000000001111"   // () = br_nez_const_1_B1 (R[7],15); 
000046  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000047  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m340;   next: m63, jump target: m64 (next offset: 51)
000048  1 0  "00100000100000000000000000000101"   // () = br_nez_const_1_B1 (R[4],5); 
000049  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000050  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m63 (next offset: 55)
000051  1 0  "01010000001001011111111111110000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000052  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000053  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 
000054  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m64;   next: m66 (next offset: 55)

// m66;   next: m67 (next offset: 58)
000055  1 0  "01010100100001100000000000000000"   // R[6] = R[4]; 
000056  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000057  1 0  "01010100111001010000000000000000"   // R[5] = R[7]; 

// m67 subroutine call;   next: m343 (next offset: 58)

// m343, jump target: m251 (next offset: 62)
000058  1 0  "01010100101001110000000000000000"   // R[7] = R[5]; 
000059  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 
000060  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000061  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 

// m68;   next: m251 (next offset: 63)
000062  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 

// m251;   next: m341, jump target: m84 (next offset: 66)
000063  1 0  "00100000101000000000000000001111"   // () = br_nez_const_1_B1 (R[5],15); 
000064  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000065  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m341;   next: m79, jump target: m80 (next offset: 70)
000066  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000067  1 0  "00100000110000000000000000000101"   // () = br_nez_const_1_B1 (R[6],5); 
000068  1 0  "10101000001001111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[7],SP,-8); 
000069  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m79 (next offset: 74)
000070  1 0  "01010000001001011111111111110000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000071  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000072  1 0  "01010000001000111111111111111100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000073  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 

// m80;   next: m82 (next offset: 74)

// m82;   next: m83 (next offset: 77)
000074  1 0  "10101000001001001111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[4],SP,-12); 
000075  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000076  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 

// m83 subroutine call;   next: m344 (next offset: 77)

// m344;   next: m86 (next offset: 80)
000077  1 0  "01010000001001111111111111111000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000078  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000079  1 0  "10101000001001101111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[6],SP,-8); 

// m84;   next: m86 (next offset: 80)

// m86;   next: m90, jump target: m99 (next offset: 91)
000080  1 0  "01001000000001100000000010000000"   // (R[6]) = const_3_B1 (); 
000081  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000082  1 0  "00000000011001100001100000001010"   // (R[3]) = _or_1_B1 (R[3],R[6]); 
000083  1 0  "00000000100001100010000000001010"   // (R[4]) = _or_1_B1 (R[4],R[6]); 
000084  1 0  "10001000100001100000000000001000"   // (R[6]) = _ls_const_1_B1 (R[4]); 
000085  1 0  "00000000101001110010100000011000"   // (R[5],MC) = _mi_1_B1 (R[5],R[7]); 
000086  1 0  "10001000011001000000000000001000"   // (R[4]) = _ls_const_1_B1 (R[3]); 
000087  1 0  "00000000101000000001100000001100"   // (R[3]) = _ge_const_1_B2 (R[5]); 
000088  1 0  "00100000011000000000000000001010"   // () = nez_br_const_1_B1 (R[3],10); 
000089  1 0  "10101000001001111111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[7],SP,-12); 
000090  1 0  "10101000001001101111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[6],SP,-8); 

// m90;   next: m95, jump target: m96 (next offset: 95)
000091  1 0  "01101100101000111111111111111111"   // (R[3]) = _ge_const_2_B1 (R[5]); 
000092  1 0  "00100000011000000000000000000101"   // () = nez_br_const_1_B1 (R[3],5); 
000093  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000094  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m95 (next offset: 99)
000095  1 0  "01010000001001011111111111110000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000096  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000097  1 0  "01010000001000111111111111111100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000098  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 

// m96;   next: m98 (next offset: 99)

// m98;   next: m302 (next offset: 100)
000099  1 0  "10011100100001000000000000000001"   // (R[4]) = _rs_const_2_B1 (R[4]); 

// m99;   next: m302 (next offset: 100)

// m302;   next: m104, jump target: m105 (next offset: 104)
000100  1 0  "00000000110001000001100000001111"   // (R[3]) = _gt_1_B1 (R[6],R[4]); 
000101  1 0  "00100000011000000000000000000010"   // () = nez_br_const_1_B1 (R[3],2); 
000102  1 0  "00000000110001000011100000010001"   // (R[7]) = _le_1_B1 (R[6],R[4]); 
000103  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m104;   next: m126 (next offset: 105)
000104  1 0  "00000000100001100010000000011000"   // (R[4],MC) = _mi_1_B1 (R[4],R[6]); 

// m105;   next: m126 (next offset: 105)

// m126, jump target: m1 (next offset: 110)
000105  1 0  "10011100110000110000000000000010"   // (R[3]) = _rs_const_1_B1 (R[6]); 
000106  1 0  "00001000101001101111111111100000"   // (R[6],MC) = _pl_const_6_B1 (R[5]); 
000107  1 0  "10101000001000111111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[3],SP,-4); 
000108  1 0  "00100100000000000000000000001101"   // () = j_const_1_B1 (13); 
000109  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 

// m114;   next: m115 (next offset: 112)
000110  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000111  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 

// m115 subroutine call;   next: m116 (next offset: 112)

// m116;   next: m119, jump target: m120 (next offset: 117)
000112  1 0  "10000100011001100000000000000010"   // (R[6]) = _le_const_1_B1 (R[3]); 
000113  1 0  "01001000000001110000000000000000"   // (R[7]) = const_2_B3 (); 
000114  1 0  "00100000110000000000000000000010"   // () = nez_br_const_1_B1 (R[6],2); 
000115  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 
000116  1 0  "01010000001001001111111111101000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 

// m119;   next: m122 (next offset: 118)
000117  1 0  "00001000011001111111111111111110"   // (R[7],MC) = _pl_const_3_B1 (R[3]); 

// m120;   next: m122 (next offset: 118)

// m122;   next: m1 (next offset: 122)
000118  1 0  "01010000001001101111111111111100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000119  1 0  "00000000110001110001100000100000"   // (R[3]) = _ml_1_B1 (R[6],R[7]); 
000120  1 0  "00001000100001101111111111100010"   // (R[6],MC) = _pl_const_5_B1 (R[4]); 
000121  1 0  "00000000000000110010000000011000"   // (R[4],MC) = _mi_const_1_B1 (R[3]); 

// m1;   next: m123 (next offset: 122)

// m123;   next: m128, jump target: m114 (next offset: 127)
000122  1 0  "10101000001001101111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[6],SP,-24); 
000123  1 0  "00000000110000000011000000001110"   // (R[6]) = _gt_const_1_B2 (R[6]); 
000124  1 0  "00100000110000001111111111110000"   // () = nez_br_const_1_B1 (R[6],-16); 
000125  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000126  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m128;   next: m141, jump target: m132 (next offset: 133)
000127  1 0  "01010000001001101111111111101000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000128  1 0  "00001000110000110000000000100000"   // (R[3],MC) = _pl_const_4_B1 (R[6]); 
000129  1 0  "00000000011000000011000000001110"   // (R[6]) = _gt_const_1_B2 (R[3]); 
000130  1 0  "00100000110000000000000000000101"   // () = nez_br_const_1_B1 (R[6],5); 
000131  1 0  "10101000001001001111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[4],SP,-24); 
000132  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m141, jump target: m338 (next offset: 137)
000133  1 0  "10011100100001100000000000000010"   // (R[6]) = _rs_const_1_B1 (R[4]); 
000134  1 0  "01010000001000111111111111111100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000135  1 0  "00100100000000000000000000010101"   // () = j_const_1_B1 (21); 
000136  1 0  "01010000001001001111111111101100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m132;   next: m133 (next offset: 141)
000137  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000138  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 
000139  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000140  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m133 subroutine call;   next: m134 (next offset: 141)

// m134;   next: m137, jump target: m138 (next offset: 145)
000141  1 0  "10000100011001100000000000000010"   // (R[6]) = _le_const_1_B1 (R[3]); 
000142  1 0  "00100000110000000000000000000010"   // () = nez_br_const_1_B1 (R[6],2); 
000143  1 0  "01010000001001001111111111101000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000144  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 

// m137;   next: m140 (next offset: 146)
000145  1 0  "00001000011001011111111111111110"   // (R[5],MC) = _pl_const_3_B1 (R[3]); 

// m138;   next: m140 (next offset: 146)

// m140;   next: m338 (next offset: 157)
000146  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000147  1 0  "01010100000000110000000000100000"   // (R[3]) = const_1_B2 (); 
000148  1 0  "00000000011001100001100000011000"   // (R[3],MC) = _mi_1_B1 (R[3],R[6]); 
000149  1 0  "00000000101000110011100000010111"   // (R[7]) = _rs_1_B1 (R[5],R[3]); 
000150  1 0  "10011100100001000000000000000001"   // (R[4]) = _rs_const_2_B1 (R[4]); 
000151  1 0  "00001000110001101111111111111111"   // (R[6],MC) = _pl_const_2_B1 (R[6]); 
000152  1 0  "00000000100001100010100000010010"   // (R[5]) = _ls_1_B1 (R[4],R[6]); 
000153  1 0  "01010000001000111111111111111100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000154  1 0  "00000000011001110010000000100000"   // (R[4]) = _ml_1_B1 (R[3],R[7]); 
000155  1 0  "00000000101001000011000000011000"   // (R[6],MC) = _mi_1_B1 (R[5],R[4]); 
000156  1 0  "01010000001001001111111111101100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m338;   next: m145 (next offset: 157)

// m145;   next: m274, jump target: m145 (next offset: 163)
000157  1 0  "01010100110001010000000000000000"   // R[5] = R[6]; 
000158  1 0  "00000000110000110011000000011000"   // (R[6],MC) = _mi_1_B1 (R[6],R[3]); 
000159  1 0  "00000000110000000100000000001100"   // (R[8]) = _ge_const_1_B2 (R[6]); 
000160  1 0  "00100001000000001111111111111011"   // () = nez_br_const_1_B1 (R[8],-5); 
000161  1 0  "00001000111001110000000000000001"   // (R[7],MC) = _pl_const_1_B1 (R[7]); 
000162  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m274;   next: m162, jump target: m163 (next offset: 173)
000163  1 0  "00000000101001100100000000000001"   // (R[8],) = _pl_1_B1 (R[6],R[5]); 
000164  1 0  "00010000111001110000000000000001"   // (R[7]) = _ad_const_1_B1 (R[7]); 
000165  1 0  "00000001000000000001100000001011"   // (R[3]) = eqz_1_B1 (R[8]); 
000166  1 0  "00000000111000000011100000010101"   // (R[7]) = nez_1_B1 (R[7]); 
000167  1 0  "00000001000000000100000000010011"   // (R[8]) = _lt_const_1_B2 (R[8]); 
000168  1 0  "00000000011001110001100000000011"   // (R[3]) = land_1_B1 (R[3],R[7]); 
000169  1 0  "00000000011010000001100000001010"   // (R[3]) = lor_1_B1 (R[8],R[3]); 
000170  1 0  "00010100011000000000000000000010"   // () = eqz_br_const_1_B1 (R[3],2); 
000171  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000172  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m162;   next: m165 (next offset: 174)
000173  1 0  "01010100101001100000000000000000"   // R[6] = R[5]; 

// m163;   next: m165 (next offset: 174)

// m165;   next: m168, jump target: m169 (next offset: 178)
000174  1 0  "00000000110000000011100000001100"   // (R[7]) = _ge_const_1_B2 (R[6]); 
000175  1 0  "00100000111000000000000000000010"   // () = nez_br_const_1_B1 (R[7],2); 
000176  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000177  1 0  "00000000110000000001100000010011"   // (R[3]) = _lt_const_1_B2 (R[6]); 

// m168;   next: m173 (next offset: 179)
000178  1 0  "00000000000001100011000000011000"   // (R[6],MC) = _mi_const_1_B1 (R[6]); 

// m169;   next: m173 (next offset: 179)

// m173;   next: m172 (next offset: 183)
000179  1 0  "00000000011001000010000000011010"   // (R[4]) = _er_1_B1 (R[4],R[3]); 
000180  1 0  "01010000001000101111111111110000"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000181  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000182  1 0  "00001000001000011111111111101000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-24,SP,SP); 

// m172 subroutine call;   next: m174 (next offset: 183)

// m174 (next offset: /)

