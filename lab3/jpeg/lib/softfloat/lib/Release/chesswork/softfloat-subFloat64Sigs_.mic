
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:12 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-subFloat64Sigs_ tlx


// m17;   next: m246, jump target: m429 (next offset: 34)
000000  1 0  "00001000001000010000000000101000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (40,SP,SP); 
000001  1 0  "01001000000010010000000000001111"   // (R[9]) = lhi_const_1_B1 (15); 
000002  1 0  "01010101001010101111111111111111"   // (R[10]) = w32_const_bor_1_B1 (R[9],65535); 
000003  1 0  "00000000100010100100100000000011"   // (R[9]) = _ad_1_B1 (R[4],R[10]); 
000004  1 0  "10011100100000110000000000010100"   // (R[3]) = _rs_const_1_B1 (R[4]); 
000005  1 0  "10101000001001001111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[4],SP,-48); 
000006  1 0  "00000000110010100010000000000011"   // (R[4]) = _ad_1_B1 (R[6],R[10]); 
000007  1 0  "10001000100001000000000000001010"   // (R[4]) = _ls_const_2_B1 (R[4]); 
000008  1 0  "10011100111010100000000000010110"   // (R[10]) = _rs_const_2_B1 (R[7]); 
000009  1 0  "00000000100010100101000000001010"   // (R[10]) = _or_1_B1 (R[4],R[10]); 
000010  1 0  "10001001001010010000000000001010"   // (R[9]) = _ls_const_2_B1 (R[9]); 
000011  1 0  "10011100101010110000000000010110"   // (R[11]) = _rs_const_2_B1 (R[5]); 
000012  1 0  "10101000001010001111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[8],SP,-12); 
000013  1 0  "00000001001010110110100000001010"   // (R[13]) = _or_1_B1 (R[9],R[11]); 
000014  1 0  "10001000101010000000000000001010"   // (R[8]) = _ls_const_2_B1 (R[5]); 
000015  1 0  "10011100110001000000000000010100"   // (R[4]) = _rs_const_1_B1 (R[6]); 
000016  1 0  "00010000011000110000011111111111"   // (R[3]) = _ad_const_2_B1 (R[3]); 
000017  1 0  "00010000100010010000011111111111"   // (R[9]) = _ad_const_2_B1 (R[4]); 
000018  1 0  "00000001000011010111100000001010"   // (R[15]) = _or_1_B1 (R[13],R[8]); 
000019  1 0  "10001000111010110000000000001010"   // (R[11]) = _ls_const_2_B1 (R[7]); 
000020  1 0  "00000000011010010110000000011000"   // (R[12],MC) = _mi_1_B1 (R[3],R[9]); 
000021  1 0  "10101000001011111111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[15],SP,-16); 
000022  1 0  "01001000000011100100000000000000"   // (R[14]) = const_4_B1 (); 
000023  1 0  "10101000001000101111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[2],SP,-20); 
000024  1 0  "10010100011011110000011111111111"   // (R[15]) = _ne_const_1_B1 (R[3]); 
000025  1 0  "10101000001010001111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[8],-32,DMb[-32],SP); 
000026  1 0  "10101000001010111111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[11],-40,DMb[-40],SP); 
000027  1 0  "00000001010011100010000000001010"   // (R[4]) = _or_3_B1 (R[10],R[14]); 
000028  1 0  "00000001100000000001000000001110"   // (R[2]) = _gt_const_1_B2 (R[12]); 
000029  1 0  "10101000001011011111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[13],-28,DMb[-28],SP); 
000030  1 0  "10101000001010101111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[10],-36,DMb[-36],SP); 
000031  1 0  "00100000010000000000000010001100"   // () = nez_br_const_1_B1 (R[2],140); 
000032  1 0  "00000001101011100111000000001010"   // (R[14]) = _or_3_B1 (R[13],R[14]); 
000033  1 0  "10101000001001001111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[4],SP,-24); 

// m246;   next: m428, jump target: m79 (next offset: 38)
000034  1 0  "00000001100000000001000000010011"   // (R[2]) = _lt_const_3_B2 (R[12]); 
000035  1 0  "00100000010000000000000000110110"   // () = nez_br_const_1_B1 (R[2],54); 
000036  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000037  1 0  "10110000100001000000000000000001"   // (R[4]) = _er_const_1_B1 (R[4]); 

// m428;   next: m242, jump target: m98 (next offset: 41)
000038  1 0  "00100001111000000000000000011000"   // () = nez_br_const_1_B1 (R[15],24); 
000039  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000040  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m242;   next: m89, jump target: m93 (next offset: 47)
000041  1 0  "01010000001001001111111111110000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000042  1 0  "00000000100010100010000000001010"   // (R[4]) = _or_1_B1 (R[4],R[10]); 
000043  1 0  "00000000100010110100000000001010"   // (R[8]) = _or_1_B1 (R[4],R[11]); 
000044  1 0  "00010101000000000000000000001010"   // () = eqz_br_const_1_B1 (R[8],10); 
000045  1 0  "01010000001001001111111111010000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-48],SP,-48); 
000046  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m89;   next: m90 (next offset: 49)
000047  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000048  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m90 subroutine call;   next: m92 (next offset: 49)

// m92 (next offset: 56)
000049  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000050  1 0  "01010000001001111111111111111100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000051  1 0  "01010000001001101111111111101100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000052  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000053  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000054  1 0  "10101000001001111111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[7],SP,-44); 
000055  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m93;   next: m97 (next offset: 58)
000056  1 0  "01010000001001111111111111101100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000057  1 0  "00001000000001101111111111111111"   // (R[6]) = const_5_B1 (); 

// m97 (next offset: 64)
000058  1 0  "01001000000001010111111111111111"   // (R[5]) = lhi_const_1_B1 (32767); 
000059  1 0  "10101000001001101111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[6],SP,-44); 
000060  1 0  "01010100101001011111111111111111"   // (R[5]) = w32_const_bor_1_B1 (R[5],65535); 
000061  1 0  "00110000111000000000000000000000"   // () = __rts_jr_1_B1 (R[7]); 
000062  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000063  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m98;   next: m433 (next offset: 64)

// m433;   next: m103, jump target: m104 (next offset: 67)
000064  1 0  "00100000011000000000000000000011"   // () = br_nez_const_1_B1 (R[3],3); 
000065  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000066  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m103;   next: m106 (next offset: 69)
000067  1 0  "01010100000000110000000000000001"   // (R[3]) = const_2_B2 (); 
000068  1 0  "01010100011010010000000000000000"   // R[9] = R[3]; 

// m104;   next: m106 (next offset: 69)

// m106;   next: m111, jump target: m1 (next offset: 73)
000069  1 0  "00000001010011010011100000010100"   // (R[7]) = _lt_1_B1 (R[10],R[13]); 
000070  1 0  "00100000111000000000000010100110"   // () = nez_br_const_1_B1 (R[7],166); 
000071  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000072  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m111;   next: m113 (next offset: 73)

// m113;   next: m118, jump target: m2 (next offset: 77)
000073  1 0  "00000001101010100011100000010100"   // (R[7]) = _lt_1_B1 (R[13],R[10]); 
000074  1 0  "00100000111000000000000001011010"   // () = nez_br_const_1_B1 (R[7],90); 
000075  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000076  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m118;   next: m120 (next offset: 77)

// m120;   next: m125, jump target: m1 (next offset: 81)
000077  1 0  "00000001011010000011100000010100"   // (R[7]) = _lt_1_B1 (R[11],R[8]); 
000078  1 0  "00100000111000000000000010011110"   // () = nez_br_const_1_B1 (R[7],158); 
000079  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000080  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m125;   next: m127 (next offset: 81)

// m127;   next: m132, jump target: m2 (next offset: 85)
000081  1 0  "00000001000010110011100000010100"   // (R[7]) = _lt_1_B1 (R[8],R[11]); 
000082  1 0  "00100000111000000000000001010010"   // () = nez_br_const_1_B1 (R[7],82); 
000083  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000084  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m132;   next: m136 (next offset: 87)
000085  1 0  "01010000001001111111111111101100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000086  1 0  "01001000000001100000000000000000"   // (R[6]) = const_3_B3 (); 

// m136 (next offset: 91)
000087  1 0  "10101000001001101111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[6],SP,-44); 
000088  1 0  "00110000111000000000000000000000"   // () = __rts_jr_1_B1 (R[7]); 
000089  1 0  "10101000001000001111111111010000"   // (dmw_wr) = const_3_B5 (); (__spill_DMw[-48]) = stack_store_bndl_B3 (__CTr2_w32_cstV0cv,SP,-48); 
000090  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m79;   next: m138 (next offset: 93)
000091  1 0  "01010000001011111111111111010000"   // (R[15]) = stack_load_bndl_B3 (__spill_DMw[-48],SP,-48); 
000092  1 0  "01010000001011011111111111101000"   // (R[13]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 

// m138;   next: m251, jump target: m155 (next offset: 97)
000093  1 0  "10010101001000100000011111111111"   // (R[2]) = _ne_const_1_B1 (R[9]); 
000094  1 0  "00100000010000000000000000010111"   // () = nez_br_const_1_B1 (R[2],23); 
000095  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000096  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m251;   next: m146, jump target: m150 (next offset: 101)
000097  1 0  "00000001010010110100000000001010"   // (R[8]) = _or_1_B1 (R[10],R[11]); 
000098  1 0  "00010101000000000000000000001010"   // () = eqz_br_const_1_B1 (R[8],10); 
000099  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000100  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m146;   next: m147 (next offset: 103)
000101  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000102  1 0  "01010101111001000000000000000000"   // R[4] = R[15]; 

// m147 subroutine call;   next: m149 (next offset: 103)

// m149 (next offset: 110)
000103  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000104  1 0  "01010000001001111111111111111100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000105  1 0  "01010000001001101111111111101100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000106  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000107  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000108  1 0  "10101000001001111111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[7],SP,-44); 
000109  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m150;   next: m154 (next offset: 112)
000110  1 0  "01010000001001111111111111101100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000111  1 0  "01001000000001100000000000000000"   // (R[6]) = const_3_B3 (); 

// m154 (next offset: 119)
000112  1 0  "10001000100001010000000000011111"   // (R[5]) = _ls_const_1_B1 (R[4]); 
000113  1 0  "01001000000001000111111111110000"   // (R[4]) = const_1_B1 (); 
000114  1 0  "00000000100001010010100000000001"   // (R[5],MC) = _pl_1_B1 (R[5],R[4]); 
000115  1 0  "10101000001001101111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[6],SP,-44); 
000116  1 0  "00110000111000000000000000000000"   // () = __rts_jr_1_B1 (R[7]); 
000117  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000118  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m155;   next: m434 (next offset: 119)

// m434;   next: m161, jump target: m160 (next offset: 122)
000119  1 0  "00010100011000000000000000000011"   // () = eqz_br_const_1_B1 (R[3],3); 
000120  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000121  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m161, jump target: m258 (next offset: 124)
000122  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000123  1 0  "10101000001011101111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[14],-28,DMb[-28],SP); 

// m160;   next: m258 (next offset: 125)
000124  1 0  "00001001100011000000000000000001"   // (R[12],MC) = _pl_const_2_B1 (R[12]); 

// m258;   next: m168, jump target: m166 (next offset: 130)
000125  1 0  "00000000000011000011100000011000"   // (R[7],MC) = _mi_const_1_B1 (R[12]); 
000126  1 0  "00000000000001110011000000011000"   // (R[6],MC) = _mi_const_1_B1 (R[7]); 
000127  1 0  "00010100111000000000000000100010"   // () = eqz_br_const_1_B1 (R[7],34); 
000128  1 0  "00010000110000110000000000011111"   // (R[3]) = _ad_const_1_B1 (R[6]); 
000129  1 0  "01010000001001101111111111100100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 

// m168;   next: m173, jump target: m343 (next offset: 134)
000130  1 0  "10001100111010100000000000100000"   // (R[10]) = _lt_const_2_B1 (R[7]); 
000131  1 0  "00100001010000000000000000011000"   // () = nez_br_const_1_B1 (R[10],24); 
000132  1 0  "00000000110000110010100000010010"   // (R[5]) = _ls_1_B1 (R[6],R[3]); 
000133  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m173;   next: m178, jump target: m354 (next offset: 138)
000134  1 0  "01100100111000110000000000100000"   // (R[3]) = _eq_const_1_B1 (R[7]); 
000135  1 0  "00100000011000000000000000010000"   // () = nez_br_const_1_B1 (R[3],16); 
000136  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000137  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m178;   next: m423, jump target: m368 (next offset: 142)
000138  1 0  "10001100111000110000000001000000"   // (R[3]) = _lt_const_1_B1 (R[7]); 
000139  1 0  "00100000011000000000000000000101"   // () = nez_br_const_1_B1 (R[3],5); 
000140  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000141  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m423, jump target: m437 (next offset: 146)
000142  1 0  "00000000110010000011100000001010"   // (R[7]) = _or_1_B1 (R[6],R[8]); 
000143  1 0  "01001000000001100000000000000000"   // (R[6]) = const_3_B3 (); 
000144  1 0  "00100100000000000000000000010010"   // () = j_const_1_B1 (18); 
000145  1 0  "00000000111000000100000000010101"   // (R[8]) = nez_1_B1 (R[7]); 

// m368, jump target: m437 (next offset: 153)
000146  1 0  "00010000111001110000000000011111"   // (R[7]) = _ad_const_1_B1 (R[7]); 
000147  1 0  "00000000101010000010100000001010"   // (R[5]) = _or_1_B1 (R[5],R[8]); 
000148  1 0  "00000000110001110011100000010111"   // (R[7]) = _rs_1_B1 (R[6],R[7]); 
000149  1 0  "00000000101000000011000000010101"   // (R[6]) = nez_1_B1 (R[5]); 
000150  1 0  "00000000110001110100000000001010"   // (R[8]) = _or_2_B1 (R[7],R[6]); 
000151  1 0  "00100100000000000000000000001011"   // () = j_const_1_B1 (11); 
000152  1 0  "01001000000001100000000000000000"   // (R[6]) = const_3_B3 (); 

// m354, jump target: m437 (next offset: 157)
000153  1 0  "00000001000000000011100000010101"   // (R[7]) = nez_1_B1 (R[8]); 
000154  1 0  "00000000110001110100000000001010"   // (R[8]) = _or_2_B1 (R[6],R[7]); 
000155  1 0  "00100100000000000000000000000111"   // () = j_const_1_B1 (7); 
000156  1 0  "01001000000001100000000000000000"   // (R[6]) = const_3_B3 (); 

// m343;   next: m437 (next offset: 163)
000157  1 0  "00000001000001110101000000010111"   // (R[10]) = _rs_1_B1 (R[8],R[7]); 
000158  1 0  "00000001000000110100000000010010"   // (R[8]) = _ls_1_B1 (R[8],R[3]); 
000159  1 0  "00000001000000000100000000010101"   // (R[8]) = nez_1_B1 (R[8]); 
000160  1 0  "00000000101010100010100000001010"   // (R[5]) = _or_1_B1 (R[5],R[10]); 
000161  1 0  "00000000110001110011000000010111"   // (R[6]) = _rs_1_B1 (R[6],R[7]); 
000162  1 0  "00000000101010000100000000001010"   // (R[8]) = _or_2_B1 (R[5],R[8]); 

// m437;   next: m188 (next offset: 163)

// m166;   next: m188 (next offset: 163)

// m188;   next: m2 (next offset: 166)
000163  1 0  "10101000001010001111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[8],-32,DMb[-32],SP); 
000164  1 0  "10101000001001101111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[6],-28,DMb[-28],SP); 
000165  1 0  "10101000001011011111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[13],-36,DMb[-36],SP); 

// m2;   next: m189 (next offset: 166)

// m189;   next: m190 (next offset: 170)
000166  1 0  "01010101001000110000000000000000"   // R[3] = R[9]; 
000167  1 0  "01010000001001101111111111011100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000168  1 0  "01010000001001011111111111100100"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 
000169  1 0  "01010000001001111111111111100000"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-32,DMb[-32],SP); 

// m190 chess_separator_scheduler;   next: m191 (next offset: 170)

// m191, jump target: m195 (next offset: 173)
000170  1 0  "00000001011001110011100000011000"   // (R[7],MC) = sub_1_B1 (R[11],R[7]); 
000171  1 0  "00100100000000000000000001001001"   // () = j_const_1_B1 (73); 
000172  1 0  "00000000110001010011000000011001"   // (R[6],MC) = subx_1_B1 (R[6],R[5],MC); 

// m429;   next: m201, jump target: m37 (next offset: 176)
000173  1 0  "00100001111000000000000000010011"   // () = nez_br_const_1_B1 (R[15],19); 
000174  1 0  "01010000001001001111111111101000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000175  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m201;   next: m29, jump target: m33 (next offset: 180)
000176  1 0  "01010000001010001111111111110000"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000177  1 0  "00010101000000000000000000001010"   // () = eqz_br_const_1_B1 (R[8],10); 
000178  1 0  "01010000001001001111111111010000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-48],SP,-48); 
000179  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m29;   next: m30 (next offset: 182)
000180  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000181  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m30 subroutine call;   next: m32 (next offset: 182)

// m32 (next offset: 189)
000182  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000183  1 0  "01010000001001111111111111111100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000184  1 0  "01010000001001101111111111101100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000185  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000186  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000187  1 0  "10101000001001111111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[7],SP,-44); 
000188  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m33;   next: m36 (next offset: 191)
000189  1 0  "01010000001001111111111111101100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000190  1 0  "10101000001001011111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[5],SP,-44); 

// m36 (next offset: 194)
000191  1 0  "00110000111000000000000000000000"   // () = __rts_jr_1_B1 (R[7]); 
000192  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 
000193  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m37;   next: m204 (next offset: 194)

// m204;   next: m43, jump target: m42 (next offset: 197)
000194  1 0  "00010101001000000000000000000011"   // () = eqz_br_const_1_B1 (R[9],3); 
000195  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000196  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m43, jump target: m210 (next offset: 199)
000197  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000198  1 0  "10101000001001001111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[4],-36,DMb[-36],SP); 

// m42;   next: m210 (next offset: 200)
000199  1 0  "00001001100011001111111111111111"   // (R[12],MC) = _pl_const_3_B1 (R[12]); 

// m210;   next: m50, jump target: m48 (next offset: 204)
000200  1 0  "00000000000011000011100000011000"   // (R[7],MC) = _mi_const_1_B1 (R[12]); 
000201  1 0  "00010101100000000000000000100000"   // () = eqz_br_const_1_B1 (R[12],32); 
000202  1 0  "00010000111001010000000000011111"   // (R[5]) = _ad_const_1_B1 (R[7]); 
000203  1 0  "01010000001001111111111111011100"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 

// m50;   next: m55, jump target: m292 (next offset: 208)
000204  1 0  "10001101100001000000000000100000"   // (R[4]) = _lt_const_2_B1 (R[12]); 
000205  1 0  "00100000100000000000000000010110"   // () = nez_br_const_1_B1 (R[4],22); 
000206  1 0  "00000000111001010011000000010010"   // (R[6]) = _ls_1_B1 (R[7],R[5]); 
000207  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m55;   next: m60, jump target: m303 (next offset: 212)
000208  1 0  "01100101100001010000000000100000"   // (R[5]) = _eq_const_1_B1 (R[12]); 
000209  1 0  "00100000101000000000000000001110"   // () = nez_br_const_1_B1 (R[5],14); 
000210  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000211  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m60;   next: m404, jump target: m317 (next offset: 216)
000212  1 0  "10001101100001010000000001000000"   // (R[5]) = _lt_const_1_B1 (R[12]); 
000213  1 0  "00100000101000000000000000000100"   // () = nez_br_const_1_B1 (R[5],4); 
000214  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000215  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m404, jump target: m431 (next offset: 219)
000216  1 0  "00000000111010110011100000001010"   // (R[7]) = _or_1_B1 (R[7],R[11]); 
000217  1 0  "00100100000000000000000000001001"   // () = j_const_1_B1 (9); 
000218  1 0  "00000000111000000101100000010101"   // (R[11]) = nez_1_B1 (R[7]); 

// m317, jump target: m431 (next offset: 225)
000219  1 0  "00010001100001010000000000011111"   // (R[5]) = _ad_const_1_B1 (R[12]); 
000220  1 0  "00000000110010110011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[11]); 
000221  1 0  "00000000111001010011100000010111"   // (R[7]) = _rs_1_B1 (R[7],R[5]); 
000222  1 0  "00000000110000000011000000010101"   // (R[6]) = nez_1_B1 (R[6]); 
000223  1 0  "00100100000000000000000000000011"   // () = j_const_1_B1 (3); 
000224  1 0  "00000000110001110101100000001010"   // (R[11]) = _or_2_B1 (R[7],R[6]); 

// m303;   next: m431 (next offset: 227)
000225  1 0  "00000001011000000011000000010101"   // (R[6]) = nez_1_B1 (R[11]); 
000226  1 0  "00000000110001110101100000001010"   // (R[11]) = _or_2_B1 (R[7],R[6]); 

// m431, jump target: m432 (next offset: 229)
000227  1 0  "00100100000000000000000000000111"   // () = j_const_1_B1 (7); 
000228  1 0  "01001000000001110000000000000000"   // (R[7]) = const_3_B3 (); 

// m292;   next: m432 (next offset: 235)
000229  1 0  "00000001011011000010000000010111"   // (R[4]) = _rs_1_B1 (R[11],R[12]); 
000230  1 0  "00000001011001010010100000010010"   // (R[5]) = _ls_1_B1 (R[11],R[5]); 
000231  1 0  "00000000100001100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[4]); 
000232  1 0  "00000000101000000010100000010101"   // (R[5]) = nez_1_B1 (R[5]); 
000233  1 0  "00000000111011000011100000010111"   // (R[7]) = _rs_1_B1 (R[7],R[12]); 
000234  1 0  "00000000101001100101100000001010"   // (R[11]) = _or_2_B1 (R[6],R[5]); 

// m432;   next: m70 (next offset: 235)

// m48;   next: m70 (next offset: 235)

// m70;   next: m1 (next offset: 238)
000235  1 0  "10101000001010111111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[11],-40,DMb[-40],SP); 
000236  1 0  "10101000001001111111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[7],-36,DMb[-36],SP); 
000237  1 0  "10101000001011101111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[14],-28,DMb[-28],SP); 

// m1;   next: m71 (next offset: 238)

// m71;   next: m72 (next offset: 243)
000238  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000239  1 0  "01010000001001101111111111100100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 
000240  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000241  1 0  "01010000001001011111111111011100"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000242  1 0  "01010000001001111111111111011000"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 

// m72 chess_separator_scheduler;   next: m73 (next offset: 243)

// m73;   next: m195 (next offset: 245)
000243  1 0  "00000001000001110011100000011000"   // (R[7],MC) = sub_1_B1 (R[8],R[7]); 
000244  1 0  "00000000110001010011000000011001"   // (R[6],MC) = subx_1_B1 (R[6],R[5],MC); 

// m195;   next: m196 (next offset: 247)
000245  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000246  1 0  "00001000011001011111111111110101"   // (R[5],MC) = _pl_const_1_B1 (R[3]); 

// m196 subroutine call;   next: m198 (next offset: 247)

// m198 (next offset: /)
000247  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000248  1 0  "01010000001001111111111111111100"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000249  1 0  "01010000001001101111111111101100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000250  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000251  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000252  1 0  "10101000001001111111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[7],SP,-44); 
000253  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

