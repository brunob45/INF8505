
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:10 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-float32_mul_ tlx


// m134;   next: m142, jump target: m41 (next offset: 25)
000000  1 0  "10011100100001110000000000011111"   // (R[7]) = _rs_const_4_B1 (R[4]); 
000001  1 0  "10011100101010000000000000011111"   // (R[8]) = _rs_const_4_B1 (R[5]); 
000002  1 0  "01001000000001100000000001111111"   // (R[6]) = lhi_const_1_B1 (127); 
000003  1 0  "00001000001000010000000000010100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (20,SP,SP); 
000004  1 0  "00000000111010000011100000011010"   // (R[7]) = _er_1_B1 (R[7],R[8]); 
000005  1 0  "01010100110010011111111111111111"   // (R[9]) = w32_const_bor_1_B1 (R[6],65535); 
000006  1 0  "01001000000000110111111111111111"   // (R[3]) = lhi_const_1_B1 (32767); 
000007  1 0  "00000000101010010011000000000011"   // (R[6]) = _ad_1_B1 (R[5],R[9]); 
000008  1 0  "10011100100010100000000000010111"   // (R[10]) = _rs_const_3_B1 (R[4]); 
000009  1 0  "10011100101010000000000000010111"   // (R[8]) = _rs_const_3_B1 (R[5]); 
000010  1 0  "01010100011000111111111111111111"   // (R[3]) = w32_const_bor_1_B1 (R[3],65535); 
000011  1 0  "00000000100010010100100000000011"   // (R[9]) = _ad_1_B1 (R[4],R[9]); 
000012  1 0  "00010001010010100000000011111111"   // (R[10]) = _ad_const_1_B1 (R[10]); 
000013  1 0  "00010001000010000000000011111111"   // (R[8]) = _ad_const_1_B1 (R[8]); 
000014  1 0  "10101000001000101111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[2],SP,-4); 
000015  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 
000016  1 0  "00000001001000000101100000010101"   // (R[11]) = nez_1_B1 (R[9]); 
000017  1 0  "00000000110000000110100000010101"   // (R[13]) = nez_1_B1 (R[6]); 
000018  1 0  "10010101010000100000000011111111"   // (R[2]) = _ne_const_1_B1 (R[10]); 
000019  1 0  "10010101000011110000000011111111"   // (R[15]) = _ne_const_1_B1 (R[8]); 
000020  1 0  "10001000111011000000000000011111"   // (R[12]) = _ls_const_5_B1 (R[7]); 
000021  1 0  "01001000000000110111111110000000"   // (R[3]) = const_4_B1 (); 
000022  1 0  "00100000010000000000000000010101"   // () = nez_br_const_1_B1 (R[2],21); 
000023  1 0  "01100101000011100000000011111111"   // (R[14]) = _eq_const_1_B1 (R[8]); 
000024  1 0  "00000000011011000001100000000001"   // (R[3],) = _pl_4_B1 (R[12],R[3]); 

// m142;   next: m25, jump target: m27 (next offset: 30)
000025  1 0  "00000001101011100011100000000011"   // (R[7]) = land_1_B1 (R[14],R[13]); 
000026  1 0  "00000000111010110011100000001010"   // (R[7]) = lor_1_B1 (R[11],R[7]); 
000027  1 0  "00010100111000000000000000000100"   // () = eqz_br_const_1_B1 (R[7],4); 
000028  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000029  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m25;   next: m24 (next offset: 33)
000030  1 0  "01010000001000101111111111111100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000031  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000032  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 

// m24 subroutine call;   next: m26 (next offset: 33)

// m26 (next offset: 33)

// m27;   next: m146 (next offset: 33)

// m146;   next: m35, jump target: m36 (next offset: 37)
000033  1 0  "00000000110010000010100000001010"   // (R[5]) = _or_3_B1 (R[8],R[6]); 
000034  1 0  "00100000101000000000000000000101"   // () = br_nez_const_1_B1 (R[5],5); 
000035  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000036  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m35 (next offset: 41)
000037  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000038  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000039  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000040  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 

// m36;   next: m40 (next offset: 41)

// m40 (next offset: 45)
000041  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000042  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000043  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 
000044  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m41;   next: m235 (next offset: 45)

// m235;   next: m232, jump target: m69 (next offset: 48)
000045  1 0  "00100001111000000000000000010011"   // () = nez_br_const_1_B1 (R[15],19); 
000046  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000047  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m232;   next: m53, jump target: m55 (next offset: 51)
000048  1 0  "00010100110000000000000000000100"   // () = br_eqz_const_1_B1 (R[6],4); 
000049  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000050  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m53;   next: m52 (next offset: 54)
000051  1 0  "01010000001000101111111111111100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000052  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000053  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 

// m52 subroutine call;   next: m54 (next offset: 54)

// m54 (next offset: 54)

// m55;   next: m150 (next offset: 54)

// m150;   next: m63, jump target: m64 (next offset: 58)
000054  1 0  "00000001001010100010100000001010"   // (R[5]) = _or_3_B1 (R[10],R[9]); 
000055  1 0  "00100000101000000000000000000101"   // () = br_nez_const_1_B1 (R[5],5); 
000056  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000057  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m63 (next offset: 62)
000058  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000059  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000060  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000061  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 

// m64;   next: m68 (next offset: 62)

// m68 (next offset: 66)
000062  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000063  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000064  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 
000065  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m69;   next: m233, jump target: m86 (next offset: 70)
000066  1 0  "10101000001010101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[10],SP,-16); 
000067  1 0  "00100001010000000000000000010110"   // () = br_nez_const_1_B1 (R[10],22); 
000068  1 0  "10101000001001111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[7],SP,-8); 
000069  1 0  "10101000001010011111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[9],SP,-12); 

// m233;   next: m81, jump target: m82 (next offset: 75)
000070  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000071  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000072  1 0  "00100000100000000000000000000110"   // () = br_nez_const_1_B1 (R[4],6); 
000073  1 0  "10101000001010001111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[8],SP,-20); 
000074  1 0  "10101000001011001111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[12],SP,-12); 

// m81 (next offset: 80)
000075  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000076  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000077  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000078  1 0  "01010000001000111111111111110100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000079  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 

// m82;   next: m84 (next offset: 80)

// m84;   next: m85 (next offset: 85)
000080  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000081  1 0  "01010000001001011111111111110000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000082  1 0  "10101000001001101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[6],SP,-16); 
000083  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000084  1 0  "01010100100001100000000000000000"   // R[6] = R[4]; 

// m85 subroutine call;   next: m236 (next offset: 85)

// m236;   next: m159 (next offset: 91)
000085  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 
000086  1 0  "01010000001001101111111111110000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000087  1 0  "01010000001011001111111111110100"   // (R[12]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000088  1 0  "01010000001010001111111111101100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000089  1 0  "10101000001001001111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[4],SP,-12); 
000090  1 0  "10101000001001011111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[5],SP,-16); 

// m86;   next: m159 (next offset: 91)

// m159;   next: m234, jump target: m103 (next offset: 95)
000091  1 0  "01010101000001010000000000000000"   // R[5] = R[8]; 
000092  1 0  "00100000101000000000000000001010"   // () = br_nez_const_1_B1 (R[5],10); 
000093  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000094  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m234;   next: m98, jump target: m99 (next offset: 98)
000095  1 0  "00100000110000000000000000000101"   // () = br_nez_const_1_B1 (R[6],5); 
000096  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000097  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m98 (next offset: 102)
000098  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000099  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000100  1 0  "01010101100000110000000000000000"   // R[3] = R[12]; 
000101  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 

// m99;   next: m101 (next offset: 102)

// m101;   next: m102 (next offset: 104)
000102  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000103  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 

// m102 subroutine call;   next: m237 (next offset: 104)

// m237;   next: m224 (next offset: 104)

// m103;   next: m224 (next offset: 104)

// m224;   next: m228, jump target: m227 (next offset: 125)
000104  1 0  "01001000000000110000000010000000"   // (R[3]) = const_2_B1 (); 
000105  1 0  "00000000011001100010000000001010"   // (R[4]) = _or_2_B1 (R[6],R[3]); 
000106  1 0  "01010000001001101111111111110100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000107  1 0  "00000000011001100011000000001010"   // (R[6]) = _or_2_B1 (R[6],R[3]); 
000108  1 0  "10001000110001100000000000000111"   // (R[6]) = _ls_const_3_B1 (R[6]); 
000109  1 0  "10001000100001000000000000001000"   // (R[4]) = _ls_const_4_B1 (R[4]); 
000110  1 0  "00010000110001111111111111111111"   // (R[7]) = __ushort_1_B1 (R[6]); 
000111  1 0  "00010000100010001111111111111111"   // (R[8]) = __ushort_1_B1 (R[4]); 
000112  1 0  "10011100100001000000000000010000"   // (R[4]) = _rs_const_2_B1 (R[4]); 
000113  1 0  "10011100110001100000000000010000"   // (R[6]) = _rs_const_2_B1 (R[6]); 
000114  1 0  "00000000100001110100100000100000"   // (R[9]) = _ml_1_B1 (R[7],R[4]); 
000115  1 0  "00000000110010000001100000100000"   // (R[3]) = _ml_1_B1 (R[6],R[8]); 
000116  1 0  "01010000001010101111111111110000"   // (R[10]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000117  1 0  "00000000101010100010100000000001"   // (R[5],) = _pl_2_B1 (R[10],R[5]); 
000118  1 0  "00000000011010010100100000000001"   // (R[9],) = _pl_2_B1 (R[9],R[3]); 
000119  1 0  "00001000101001011111111110000001"   // (R[5],MC) = _pl_const_2_B1 (R[5]); 
000120  1 0  "00000000111010000011100000100000"   // (R[7]) = _ml_1_B1 (R[7],R[8]); 
000121  1 0  "00000001001000110001100000010100"   // (R[3]) = _lt_1_B1 (R[9],R[3]); 
000122  1 0  "00100000011000000000000000000010"   // () = nez_br_const_1_B1 (R[3],2); 
000123  1 0  "00000000100001100011000000100000"   // (R[6]) = _ml_1_B1 (R[6],R[4]); 
000124  1 0  "01001000000001000000000000000001"   // (R[4]) = const_3_B1 (); 

// m228;   next: m222 (next offset: 126)
000125  1 0  "01001000000001000000000000000000"   // (R[4]) = const_1_B3 (); 

// m227;   next: m222 (next offset: 126)

// m222;   next: m108, jump target: m109 (next offset: 140)
000126  1 0  "10011101001010000000000000010000"   // (R[8]) = _rs_const_1_B1 (R[9]); 
000127  1 0  "10001001001000110000000000010000"   // (R[3]) = _ls_const_1_B1 (R[9]); 
000128  1 0  "00000000011001110011100000000001"   // (R[7],) = _pl_2_B1 (R[7],R[3]); 
000129  1 0  "00000000100010000010000000000001"   // (R[4],) = _pl_1_B1 (R[4],R[8]); 
000130  1 0  "00000000100001100011000000000001"   // (R[6],) = _pl_2_B1 (R[6],R[4]); 
000131  1 0  "00000000111000110001100000010100"   // (R[3]) = _lt_1_B1 (R[7],R[3]); 
000132  1 0  "00000000011001100011000000000001"   // (R[6],) = _pl_3_B1 (R[6],R[3]); 
000133  1 0  "00000000111000000010000000010101"   // (R[4]) = nez_1_B1 (R[7]); 
000134  1 0  "00000000100001100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[4]); 
000135  1 0  "10001000110000110000000000000001"   // (R[3]) = _ls_const_2_B1 (R[6]); 
000136  1 0  "00000000011000000011100000010011"   // (R[7]) = _lt_const_1_B2 (R[3]); 
000137  1 0  "00100000111000000000000000000011"   // () = nez_br_const_1_B1 (R[7],3); 
000138  1 0  "01010000001000101111111111111100"   // (R[2]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000139  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 

// m108;   next: m113 (next offset: 142)
000140  1 0  "00001000101001011111111111111111"   // (R[5],MC) = _pl_const_1_B1 (R[5]); 
000141  1 0  "01010100011001100000000000000000"   // R[6] = R[3]; 

// m109;   next: m113 (next offset: 142)

// m113;   next: m112 (next offset: 144)
000142  1 0  "00100100000000000000000000000000"   // () = j_const_1_B1 (0); 
000143  1 0  "00001000001000011111111111101100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-20,SP,SP); 

// m112 subroutine call;   next: m114 (next offset: 144)

// m114 (next offset: /)

