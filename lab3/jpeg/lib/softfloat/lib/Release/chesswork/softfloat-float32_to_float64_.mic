
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:09 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-float32_to_float64_ tlx


// m3;   next: m322, jump target: m278 (next offset: 10)
000000  1 0  "10011100100001010000000000010111"   // (R[5]) = _rs_const_2_B1 (R[4]); 
000001  1 0  "00010000101001010000000011111111"   // (R[5]) = _ad_const_1_B1 (R[5]); 
000002  1 0  "10011100100000110000000000011111"   // (R[3]) = _rs_const_3_B1 (R[4]); 
000003  1 0  "00001000001000010000000000110000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (48,SP,SP); 
000004  1 0  "10001000011001110000000000011111"   // (R[7]) = _ls_const_4_B1 (R[3]); 
000005  1 0  "10010100101010000000000011111111"   // (R[8]) = _ne_const_1_B1 (R[5]); 
000006  1 0  "01001000000001100000000001111111"   // (R[6]) = lhi_const_1_B1 (127); 
000007  1 0  "00100001000000000000000000100001"   // () = nez_br_const_2_B1 (R[8],33); 
000008  1 0  "01010100110001101111111111111111"   // (R[6]) = w32_const_bor_1_B1 (R[6],65535); 
000009  1 0  "00000000100001100011000000000011"   // (R[6]) = _ad_1_B1 (R[4],R[6]); 

// m322;   next: m269, jump target: m273 (next offset: 13)
000010  1 0  "00010100110000000000000000011000"   // () = eqz_br_const_1_B1 (R[6],24); 
000011  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000012  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m269;   next: m270 (next offset: 29)
000013  1 0  "10001000100001100000000000001001"   // (R[6]) = _ls_const_3_B1 (R[4]); 
000014  1 0  "10101000001000111111111111101000"   // (DMb,PM,DMb[-24]) = _pl_rd_res_reg_const_store_1_B1 (R[3],-24,DMb,PM,DMb[-24],SP); 
000015  1 0  "10101000001001101111111111101100"   // (DMb,PM,DMb[-24]) = _pl_rd_res_reg_const_store_1_B1 (R[6],-20,DMb,PM,DMb[-24],SP); 
000016  1 0  "10101000001000001111111111110000"   // (DMb,PM,DMb[-24]) = store_const__pl_rd_res_reg_const_1_B1 (-16,DMb,PM,DMb[-24],SP); 
000017  1 0  "10101000001000101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[2],SP,-12); 
000018  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000019  1 0  "01010000001001101111111111101000"   // (R[6]) = _pl_rd_res_reg_const_load_1_B1 (-24,DMb,PM,DMb[-24],SP); 
000020  1 0  "10101000001001101111111111011100"   // (DMb,PM,DMb[-36]) = _pl_rd_res_reg_const_store_1_B1 (R[6],-36,DMb,PM,DMb[-36],SP); 
000021  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000022  1 0  "01010000001001101111111111101100"   // (R[6]) = _pl_rd_res_reg_const_load_1_B1 (-20,DMb,PM,DMb[-24],SP); 
000023  1 0  "10101000001001101111111111100000"   // (DMb,PM,DMb[-36]) = _pl_rd_res_reg_const_store_1_B1 (R[6],-32,DMb,PM,DMb[-36],SP); 
000024  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000025  1 0  "01010000001001101111111111110000"   // (R[6]) = _pl_rd_res_reg_const_load_1_B1 (-16,DMb,PM,DMb[-24],SP); 
000026  1 0  "10101000001001101111111111100100"   // (DMb,PM,DMb[-36]) = _pl_rd_res_reg_const_store_1_B1 (R[6],-28,DMb,PM,DMb[-36],SP); 
000027  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000028  1 0  "00001000001001001111111111011100"   // (R[4],MC) = _pl_rd_res_reg_const_1_B1 (-36,SP); 

// m270 subroutine call;   next: m272 (next offset: 29)

// m272 (next offset: 36)
000029  1 0  "01010000001001001111111111111000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000030  1 0  "01010000001001101111111111111100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000031  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000032  1 0  "10101000001001001111111111001000"   // (__spill_DMw[-56]) = stack_store_bndl_B3 (R[4],SP,-56); 
000033  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000034  1 0  "10101000001001101111111111001100"   // (__spill_DMw[-52]) = stack_store_bndl_B3 (R[6],SP,-52); 
000035  1 0  "00001000001000011111111111010000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-48,SP,SP); 

// m273;   next: m277 (next offset: 36)

// m277 (next offset: 42)
000036  1 0  "01001000000001100111111111110000"   // (R[6]) = const_1_B1 (); 
000037  1 0  "00000000110001110011000000000001"   // (R[6],) = _pl_2_B1 (R[7],R[6]); 
000038  1 0  "10101000001000001111111111001100"   // (dmw_wr) = const_2_B5 (); (__spill_DMw[-52]) = stack_store_bndl_B3 (__CTr2_w32_cstV0cv,SP,-52); 
000039  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000040  1 0  "10101000001001101111111111001000"   // (__spill_DMw[-56]) = stack_store_bndl_B3 (R[6],SP,-56); 
000041  1 0  "00001000001000011111111111010000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-48,SP,SP); 

// m278;   next: m328, jump target: m296 (next offset: 45)
000042  1 0  "00100000101000000000000000001011"   // () = nez_br_const_1_B1 (R[5],11); 
000043  1 0  "10101000001000101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[2],SP,-12); 
000044  1 0  "10101000001001111111111111001000"   // (__spill_DMw[-56]) = stack_store_bndl_B3 (R[7],SP,-56); 

// m328;   next: m290, jump target: m291 (next offset: 48)
000045  1 0  "00100000110000000000000000000101"   // () = nez_br_const_1_B1 (R[6],5); 
000046  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000047  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m290 (next offset: 52)
000048  1 0  "01010000001001101111111111110100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000049  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000050  1 0  "10101000001000001111111111001100"   // (dmw_wr) = const_2_B5 (); (__spill_DMw[-52]) = stack_store_bndl_B3 (__CTr2_w32_cstV0cv,SP,-52); 
000051  1 0  "00001000001000011111111111010000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-48,SP,SP); 

// m291;   next: m293 (next offset: 52)

// m293;   next: m294 (next offset: 54)
000052  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000053  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 

// m294 subroutine call;   next: m295 (next offset: 54)

// m295;   next: m319 (next offset: 55)
000054  1 0  "00001000101001011111111111111111"   // (R[5],MC) = _pl_const_2_B1 (R[5]); 

// m296;   next: m319 (next offset: 55)

// m319 (next offset: /)
000055  1 0  "00001000101000110000001110000000"   // (R[3],MC) = _pl_const_1_B1 (R[5]); 
000056  1 0  "10001000011000110000000000010100"   // (R[3]) = _ls_const_2_B1 (R[3]); 
000057  1 0  "01010000001001011111111111001000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-56],SP,-56); 
000058  1 0  "00000000011001010010100000000001"   // (R[5],) = _pl_1_B1 (R[5],R[3]); 
000059  1 0  "10011100110001000000000000000011"   // (R[4]) = _rs_const_1_B1 (R[6]); 
000060  1 0  "00000000100001010010100000000001"   // (R[5],) = _pl_1_B1 (R[5],R[4]); 
000061  1 0  "10001000110001000000000000011101"   // (R[4]) = _ls_const_1_B1 (R[6]); 
000062  1 0  "01010000001001101111111111110100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000063  1 0  "10101000001001011111111111001000"   // (__spill_DMw[-56]) = stack_store_bndl_B3 (R[5],SP,-56); 
000064  1 0  "00110000110000000000000000000000"   // () = __rts_jr_1_B1 (R[6]); 
000065  1 0  "10101000001001001111111111001100"   // (__spill_DMw[-52]) = stack_store_bndl_B3 (R[4],SP,-52); 
000066  1 0  "00001000001000011111111111010000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-48,SP,SP); 

