
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:12 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-addFloat64Sigs_ tlx


// m4;   next: m234, jump target: m299 (next offset: 19)
000000  1 0  "01001000000000110000000000001111"   // (R[3]) = lhi_const_1_B1 (15); 
000001  1 0  "01010100011010011111111111111111"   // (R[9]) = w32_const_bor_1_B1 (R[3],65535); 
000002  1 0  "10011100100000110000000000010100"   // (R[3]) = _rs_const_2_B1 (R[4]); 
000003  1 0  "10011100110010100000000000010100"   // (R[10]) = _rs_const_2_B1 (R[6]); 
000004  1 0  "00001000001000010000000000101000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (40,SP,SP); 
000005  1 0  "00010000011000110000011111111111"   // (R[3]) = _ad_const_2_B1 (R[3]); 
000006  1 0  "00010001010010100000011111111111"   // (R[10]) = _ad_const_2_B1 (R[10]); 
000007  1 0  "00000000100010010110000000000011"   // (R[12]) = _ad_1_B1 (R[4],R[9]); 
000008  1 0  "00000000011010100101100000011000"   // (R[11],MC) = _mi_1_B1 (R[3],R[10]); 
000009  1 0  "00000000110010010100100000000011"   // (R[9]) = _ad_1_B1 (R[6],R[9]); 
000010  1 0  "00000000101011000110100000001010"   // (R[13]) = _or_1_B1 (R[12],R[5]); 
000011  1 0  "10101000001001011111111111101100"   // (DMb[-20]) = store__pl_rd_res_reg_const_1_B1 (R[5],-20,DMb[-20],SP); 
000012  1 0  "10101000001011001111111111110000"   // (DMb[-16]) = store__pl_rd_res_reg_const_1_B1 (R[12],-16,DMb[-16],SP); 
000013  1 0  "10101000001001111111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[7],-28,DMb[-28],SP); 
000014  1 0  "00000001011000000111100000001110"   // (R[15]) = _gt_const_1_B2 (R[11]); 
000015  1 0  "10101000001000101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[2],SP,-12); 
000016  1 0  "00100001111000000000000001111100"   // () = nez_br_const_1_B1 (R[15],124); 
000017  1 0  "10010100011011100000011111111111"   // (R[14]) = _ne_const_1_B1 (R[3]); 
000018  1 0  "10101000001010011111111111101000"   // (DMb[-24]) = store__pl_rd_res_reg_const_1_B1 (R[9],-24,DMb[-24],SP); 

// m234;   next: m298, jump target: m71 (next offset: 23)
000019  1 0  "00000001011000000001000000010011"   // (R[2]) = _lt_const_3_B2 (R[11]); 
000020  1 0  "00100000010000000000000000101001"   // () = nez_br_const_1_B1 (R[2],41); 
000021  1 0  "10001001000011110000000000011111"   // (R[15]) = _ls_const_1_B1 (R[8]); 
000022  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m298;   next: m255, jump target: m147 (next offset: 26)
000023  1 0  "00100001110000000000000000010101"   // () = nez_br_const_1_B1 (R[14],21); 
000024  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000025  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m255;   next: m139, jump target: m143 (next offset: 31)
000026  1 0  "00000001001011010100000000001010"   // (R[8]) = _or_1_B1 (R[13],R[9]); 
000027  1 0  "00000000111010000100000000001010"   // (R[8]) = _or_1_B1 (R[8],R[7]); 
000028  1 0  "00010101000000000000000000001010"   // () = eqz_br_const_1_B1 (R[8],10); 
000029  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000030  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m139;   next: m140 (next offset: 33)
000031  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000032  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m140 subroutine call;   next: m142 (next offset: 33)

// m142 (next offset: 40)
000033  1 0  "01010000001001111111111111111000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000034  1 0  "01010000001010001111111111111100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000035  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000036  1 0  "10101000001001111111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[7],SP,-48); 
000037  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000038  1 0  "10101000001010001111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[8],SP,-44); 
000039  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m143;   next: m146 (next offset: 43)
000040  1 0  "01010000001010001111111111110100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000041  1 0  "10101000001001011111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[5],SP,-44); 
000042  1 0  "10101000001001001111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[4],SP,-48); 

// m146 (next offset: 46)
000043  1 0  "00110001000000000000000000000000"   // () = __rts_jr_1_B1 (R[8]); 
000044  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 
000045  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m147;   next: m149 (next offset: 46)

// m149;   next: m155, jump target: m156 (next offset: 50)
000046  1 0  "00000000101001110010100000000001"   // (R[5],MC) = add_1_B1 (R[5],R[7]); 
000047  1 0  "00100000011000000000000000001000"   // () = br_nez_const_1_B1 (R[3],8); 
000048  1 0  "10101000001001011111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[5],-36,DMb[-36],SP); 
000049  1 0  "00000001001011000010100000000010"   // (R[5],MC) = addx_1_B1 (R[12],R[9],MC); 

// m155 (next offset: 57)
000050  1 0  "00000000101011110011100000000001"   // (R[7],MC) = _pl_1_B1 (R[15],R[5]); 
000051  1 0  "01010000001010001111111111011100"   // (R[8]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000052  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000053  1 0  "10101000001010001111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[8],SP,-44); 
000054  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000055  1 0  "10101000001001111111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[7],SP,-48); 
000056  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m156;   next: m159 (next offset: 57)

// m159, jump target: m1 (next offset: 63)
000057  1 0  "01001000000001110000000000100000"   // (R[7]) = const_4_B1 (); 
000058  1 0  "00000000101001110010100000001010"   // (R[5]) = _or_3_B1 (R[5],R[7]); 
000059  1 0  "10101000001000001111111111011000"   // (DMb[-40]) = store_const__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 
000060  1 0  "10101000001001011111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[5],-32,DMb[-32],SP); 
000061  1 0  "00100100000000000000000010100110"   // () = j_const_1_B1 (166); 
000062  1 0  "01010100011001010000000000000000"   // R[5] = R[3]; 

// m71;   next: m230, jump target: m88 (next offset: 67)
000063  1 0  "10010101010011010000011111111111"   // (R[13]) = _ne_const_1_B1 (R[10]); 
000064  1 0  "00100001101000000000000000010110"   // () = nez_br_const_1_B1 (R[13],22); 
000065  1 0  "01001000000000100000000000010000"   // (R[2]) = const_3_B1 (); 
000066  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m230;   next: m79, jump target: m83 (next offset: 71)
000067  1 0  "00000000111010010100000000001010"   // (R[8]) = _or_1_B1 (R[9],R[7]); 
000068  1 0  "00010101000000000000000000001010"   // () = eqz_br_const_1_B1 (R[8],10); 
000069  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000070  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m79;   next: m80 (next offset: 73)
000071  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000072  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m80 subroutine call;   next: m82 (next offset: 73)

// m82 (next offset: 80)
000073  1 0  "01010000001001111111111111111000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000074  1 0  "01010000001010001111111111111100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000075  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000076  1 0  "10101000001001111111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[7],SP,-48); 
000077  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000078  1 0  "10101000001010001111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[8],SP,-44); 
000079  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m83;   next: m87 (next offset: 82)
000080  1 0  "01010000001010001111111111110100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000081  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 

// m87 (next offset: 88)
000082  1 0  "01001000000001110111111111110000"   // (R[7]) = const_1_B1 (); 
000083  1 0  "00000000111011110011100000000001"   // (R[7],MC) = _pl_2_B1 (R[15],R[7]); 
000084  1 0  "10101000001001011111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[5],SP,-44); 
000085  1 0  "00110001000000000000000000000000"   // () = __rts_jr_1_B1 (R[8]); 
000086  1 0  "10101000001001111111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[7],SP,-48); 
000087  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m88;   next: m303 (next offset: 88)

// m303;   next: m94, jump target: m93 (next offset: 91)
000088  1 0  "00010100011000000000000000000100"   // () = eqz_br_const_1_B1 (R[3],4); 
000089  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000090  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m94, jump target: m242 (next offset: 94)
000091  1 0  "00000000010011000011100000001010"   // (R[7]) = _or_3_B1 (R[12],R[2]); 
000092  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000093  1 0  "10101000001001111111111111110000"   // (DMb[-16]) = store__pl_rd_res_reg_const_1_B1 (R[7],-16,DMb[-16],SP); 

// m93;   next: m242 (next offset: 95)
000094  1 0  "00001001011010110000000000000001"   // (R[11],MC) = _pl_const_1_B1 (R[11]); 

// m242;   next: m101, jump target: m99 (next offset: 100)
000095  1 0  "00000000000010110011000000011000"   // (R[6],MC) = _mi_const_1_B1 (R[11]); 
000096  1 0  "00000000000001100011100000011000"   // (R[7],MC) = _mi_const_1_B1 (R[6]); 
000097  1 0  "00010100110000000000000000100101"   // () = eqz_br_const_1_B1 (R[6],37); 
000098  1 0  "00010000111000110000000000011111"   // (R[3]) = _ad_const_1_B1 (R[7]); 
000099  1 0  "01010000001001111111111111110000"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-16,DMb[-16],SP); 

// m101;   next: m106, jump target: m104 (next offset: 104)
000100  1 0  "10001100110010010000000000100000"   // (R[9]) = _lt_const_2_B1 (R[6]); 
000101  1 0  "00100001001000000000000000011000"   // () = nez_br_const_1_B1 (R[9],24); 
000102  1 0  "00000000111000110010000000010010"   // (R[4]) = _ls_1_B1 (R[7],R[3]); 
000103  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m106;   next: m111, jump target: m249 (next offset: 109)
000104  1 0  "01100100110010110000000000100000"   // (R[11]) = _eq_const_2_B1 (R[6]); 
000105  1 0  "01010100111000110000000000000000"   // R[3] = R[7]; 
000106  1 0  "00100001011000000000000000011000"   // () = nez_br_const_1_B1 (R[11],24); 
000107  1 0  "01001000000001110000000000000000"   // (R[7]) = const_2_B3 (); 
000108  1 0  "01010100111010010000000000000000"   // R[9] = R[7]; 

// m111;   next: m116, jump target: m114 (next offset: 113)
000109  1 0  "10001100110010010000000001000000"   // (R[9]) = _lt_const_1_B1 (R[6]); 
000110  1 0  "00100001001000000000000000001010"   // () = nez_br_const_1_B1 (R[9],10); 
000111  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000112  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m116;   next: m294, jump target: m119 (next offset: 117)
000113  1 0  "01100100110001100000000001000000"   // (R[6]) = _eq_const_1_B1 (R[6]); 
000114  1 0  "00100000110000000000000000000010"   // () = nez_br_const_1_B1 (R[6],2); 
000115  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000116  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m294;   next: m304 (next offset: 118)
000117  1 0  "00000000011000000001100000010101"   // (R[3]) = nez_1_B1 (R[3]); 

// m119;   next: m304 (next offset: 118)

// m304, jump target: m249 (next offset: 122)
000118  1 0  "01010100101010010000000000000000"   // R[9] = R[5]; 
000119  1 0  "01010100011001010000000000000000"   // R[5] = R[3]; 
000120  1 0  "00100100000000000000000000001011"   // () = j_const_1_B1 (11); 
000121  1 0  "01010100111000110000000000000000"   // R[3] = R[7]; 

// m114, jump target: m249 (next offset: 127)
000122  1 0  "01010100101010010000000000000000"   // R[9] = R[5]; 
000123  1 0  "00010000110001100000000000011111"   // (R[6]) = _ad_const_1_B1 (R[6]); 
000124  1 0  "01010100100001010000000000000000"   // R[5] = R[4]; 
000125  1 0  "00100100000000000000000000000110"   // () = j_const_1_B1 (6); 
000126  1 0  "00000000011001100001100000010111"   // (R[3]) = _rs_1_B1 (R[3],R[6]); 

// m104;   next: m249 (next offset: 132)
000127  1 0  "00000000101001100100100000010111"   // (R[9]) = _rs_1_B1 (R[5],R[6]); 
000128  1 0  "00000000101000110010100000010010"   // (R[5]) = _ls_1_B1 (R[5],R[3]); 
000129  1 0  "00000000100010010001100000001010"   // (R[3]) = _or_1_B1 (R[4],R[9]); 
000130  1 0  "00000000111001100011100000010111"   // (R[7]) = _rs_1_B1 (R[7],R[6]); 
000131  1 0  "01001000000010010000000000000000"   // (R[9]) = const_2_B3 (); 

// m249, jump target: m129 (next offset: 136)
000132  1 0  "00000001001000000011000000010101"   // (R[6]) = nez_1_B1 (R[9]); 
000133  1 0  "00000000101001100011000000001010"   // (R[6]) = _or_2_B1 (R[5],R[6]); 
000134  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000135  1 0  "01010100011001010000000000000000"   // R[5] = R[3]; 

// m99;   next: m129 (next offset: 137)
000136  1 0  "01001000000001100000000000000000"   // (R[6]) = const_2_B3 (); 

// m129, jump target: m162 (next offset: 142)
000137  1 0  "10101000001001011111111111101100"   // (DMb[-20]) = store__pl_rd_res_reg_const_1_B1 (R[5],-20,DMb[-20],SP); 
000138  1 0  "10101000001001111111111111110000"   // (DMb[-16]) = store__pl_rd_res_reg_const_1_B1 (R[7],-16,DMb[-16],SP); 
000139  1 0  "01010101010000110000000000000000"   // R[3] = R[10]; 
000140  1 0  "00100100000000000000000001001000"   // () = j_const_1_B1 (72); 
000141  1 0  "10101000001001101111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[6],-40,DMb[-40],SP); 

// m299;   next: m209, jump target: m24 (next offset: 145)
000142  1 0  "00100001110000000000000000010010"   // () = nez_br_const_1_B1 (R[14],18); 
000143  1 0  "01001000000000100000000000010000"   // (R[2]) = const_3_B1 (); 
000144  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m209;   next: m16, jump target: m20 (next offset: 148)
000145  1 0  "00010101101000000000000000001010"   // () = eqz_br_const_1_B1 (R[13],10); 
000146  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000147  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m16;   next: m17 (next offset: 150)
000148  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000149  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m17 subroutine call;   next: m19 (next offset: 150)

// m19 (next offset: 157)
000150  1 0  "01010000001001111111111111111000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000151  1 0  "01010000001010001111111111111100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000152  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000153  1 0  "10101000001001111111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[7],SP,-48); 
000154  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000155  1 0  "10101000001010001111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[8],SP,-44); 
000156  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m20;   next: m23 (next offset: 159)
000157  1 0  "01010000001010001111111111110100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000158  1 0  "10101000001001001111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[4],SP,-48); 

// m23 (next offset: 162)
000159  1 0  "00110001000000000000000000000000"   // () = __rts_jr_1_B1 (R[8]); 
000160  1 0  "10101000001001011111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[5],SP,-44); 
000161  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

// m24;   next: m212 (next offset: 162)

// m212;   next: m30, jump target: m29 (next offset: 165)
000162  1 0  "00010101010000000000000000000100"   // () = eqz_br_const_1_B1 (R[10],4); 
000163  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000164  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m30, jump target: m218 (next offset: 168)
000165  1 0  "00000000010010010010100000001010"   // (R[5]) = _or_3_B1 (R[9],R[2]); 
000166  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000167  1 0  "10101000001001011111111111101000"   // (DMb[-24]) = store__pl_rd_res_reg_const_1_B1 (R[5],-24,DMb[-24],SP); 

// m29;   next: m218 (next offset: 169)
000168  1 0  "00001001011010111111111111111111"   // (R[11],MC) = _pl_const_2_B1 (R[11]); 

// m218;   next: m37, jump target: m35 (next offset: 173)
000169  1 0  "00000000000010110010100000011000"   // (R[5],MC) = _mi_const_1_B1 (R[11]); 
000170  1 0  "00010101011000000000000000100101"   // () = eqz_br_const_1_B1 (R[11],37); 
000171  1 0  "00010000101001000000000000011111"   // (R[4]) = _ad_const_1_B1 (R[5]); 
000172  1 0  "01010000001001011111111111101000"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-24,DMb[-24],SP); 

// m37;   next: m42, jump target: m40 (next offset: 177)
000173  1 0  "10001101011010010000000000100000"   // (R[9]) = _lt_const_2_B1 (R[11]); 
000174  1 0  "00100001001000000000000000011000"   // () = nez_br_const_1_B1 (R[9],24); 
000175  1 0  "00000000101001000011000000010010"   // (R[6]) = _ls_1_B1 (R[5],R[4]); 
000176  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m42;   next: m47, jump target: m225 (next offset: 182)
000177  1 0  "01100101011010010000000000100000"   // (R[9]) = _eq_const_2_B1 (R[11]); 
000178  1 0  "01010100101001000000000000000000"   // R[4] = R[5]; 
000179  1 0  "00100001001000000000000000011000"   // () = nez_br_const_1_B1 (R[9],24); 
000180  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 
000181  1 0  "01010100101010100000000000000000"   // R[10] = R[5]; 

// m47;   next: m52, jump target: m50 (next offset: 186)
000182  1 0  "10001101011010010000000001000000"   // (R[9]) = _lt_const_1_B1 (R[11]); 
000183  1 0  "00100001001000000000000000001010"   // () = nez_br_const_1_B1 (R[9],10); 
000184  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000185  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m52;   next: m291, jump target: m55 (next offset: 190)
000186  1 0  "01100101011001100000000001000000"   // (R[6]) = _eq_const_1_B1 (R[11]); 
000187  1 0  "00100000110000000000000000000010"   // () = nez_br_const_1_B1 (R[6],2); 
000188  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000189  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m291;   next: m300 (next offset: 191)
000190  1 0  "00000000100000000010000000010101"   // (R[4]) = nez_1_B1 (R[4]); 

// m55;   next: m300 (next offset: 191)

// m300, jump target: m225 (next offset: 195)
000191  1 0  "01010100111010100000000000000000"   // R[10] = R[7]; 
000192  1 0  "01010100100001110000000000000000"   // R[7] = R[4]; 
000193  1 0  "00100100000000000000000000001011"   // () = j_const_1_B1 (11); 
000194  1 0  "01010100101001000000000000000000"   // R[4] = R[5]; 

// m50, jump target: m225 (next offset: 200)
000195  1 0  "01010100111010100000000000000000"   // R[10] = R[7]; 
000196  1 0  "00010001011010010000000000011111"   // (R[9]) = _ad_const_1_B1 (R[11]); 
000197  1 0  "01010100110001110000000000000000"   // R[7] = R[6]; 
000198  1 0  "00100100000000000000000000000110"   // () = j_const_1_B1 (6); 
000199  1 0  "00000000100010010010000000010111"   // (R[4]) = _rs_1_B1 (R[4],R[9]); 

// m40;   next: m225 (next offset: 205)
000200  1 0  "00000000111010110100100000010111"   // (R[9]) = _rs_1_B1 (R[7],R[11]); 
000201  1 0  "00000000111001000011100000010010"   // (R[7]) = _ls_1_B1 (R[7],R[4]); 
000202  1 0  "00000000101010110010100000010111"   // (R[5]) = _rs_1_B1 (R[5],R[11]); 
000203  1 0  "00000000110010010010000000001010"   // (R[4]) = _or_1_B1 (R[6],R[9]); 
000204  1 0  "01001000000010100000000000000000"   // (R[10]) = const_2_B3 (); 

// m225, jump target: m65 (next offset: 209)
000205  1 0  "00000001010000000011000000010101"   // (R[6]) = nez_1_B1 (R[10]); 
000206  1 0  "00000000110001110011000000001010"   // (R[6]) = _or_2_B1 (R[7],R[6]); 
000207  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000208  1 0  "01010100100001110000000000000000"   // R[7] = R[4]; 

// m35;   next: m65 (next offset: 210)
000209  1 0  "01001000000001100000000000000000"   // (R[6]) = const_2_B3 (); 

// m65;   next: m162 (next offset: 213)
000210  1 0  "10101000001001101111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[6],-40,DMb[-40],SP); 
000211  1 0  "10101000001001111111111111100100"   // (DMb[-28]) = store__pl_rd_res_reg_const_1_B1 (R[7],-28,DMb[-28],SP); 
000212  1 0  "10101000001001011111111111101000"   // (DMb[-24]) = store__pl_rd_res_reg_const_1_B1 (R[5],-24,DMb[-24],SP); 

// m162;   next: m167, jump target: m165 (next offset: 227)
000213  1 0  "00001000011001011111111111111111"   // (R[5],MC) = _pl_const_2_B1 (R[3]); 
000214  1 0  "01010000001001111111111111101100"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-20,DMb[-20],SP); 
000215  1 0  "01010000001001101111111111100100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-28,DMb[-28],SP); 
000216  1 0  "00000000110001110011100000000001"   // (R[7],MC) = add_1_B1 (R[7],R[6]); 
000217  1 0  "01010000001001001111111111110000"   // (R[4]) = load__pl_rd_res_reg_const_1_B1 (-16,DMb[-16],SP); 
000218  1 0  "00000000010001000011000000001010"   // (R[6]) = _or_3_B1 (R[4],R[2]); 
000219  1 0  "01010000001001001111111111101000"   // (R[4]) = load__pl_rd_res_reg_const_1_B1 (-24,DMb[-24],SP); 
000220  1 0  "00000000100001100011000000000010"   // (R[6],MC) = addx_1_B1 (R[6],R[4],MC); 
000221  1 0  "10101000001001111111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[7],-36,DMb[-36],SP); 
000222  1 0  "01001000000001000000000000100000"   // (R[4]) = const_4_B1 (); 
000223  1 0  "00000000110001000011100000010100"   // (R[7]) = _lt_1_B1 (R[6],R[4]); 
000224  1 0  "00100000111000000000000000001111"   // () = nez_br_const_1_B1 (R[7],15); 
000225  1 0  "10101000001001101111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[6],-32,DMb[-32],SP); 
000226  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m167;   next: m1 (next offset: 228)
000227  1 0  "00001000101001010000000000000001"   // (R[5],MC) = _pl_const_1_B1 (R[5]); 

// m1;   next: m269 (next offset: 228)

// m269;   next: m203 (next offset: 241)
000228  1 0  "01010000001000111111111111011100"   // (R[3]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000229  1 0  "10001000011001110000000000011111"   // (R[7]) = _ls_const_1_B1 (R[3]); 
000230  1 0  "01010000001001001111111111100000"   // (R[4]) = load__pl_rd_res_reg_const_1_B1 (-32,DMb[-32],SP); 
000231  1 0  "01010000001010011111111111011000"   // (R[9]) = load__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 
000232  1 0  "10001000100001100000000000011111"   // (R[6]) = _ls_const_1_B1 (R[4]); 
000233  1 0  "00000001001000000100100000010101"   // (R[9]) = nez_1_B1 (R[9]); 
000234  1 0  "10011100011000110000000000000001"   // (R[3]) = _rs_const_1_B1 (R[3]); 
000235  1 0  "10011100100001000000000000000001"   // (R[4]) = _rs_const_1_B1 (R[4]); 
000236  1 0  "00000000011001100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[3]); 
000237  1 0  "00000000111010010011100000001010"   // (R[7]) = _or_2_B1 (R[7],R[9]); 
000238  1 0  "10101000001001001111111111100000"   // (DMb[-32]) = store__pl_rd_res_reg_const_1_B1 (R[4],-32,DMb[-32],SP); 
000239  1 0  "10101000001001111111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[7],-40,DMb[-40],SP); 
000240  1 0  "10101000001001101111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[6],-36,DMb[-36],SP); 

// m165;   next: m203 (next offset: 241)

// m203;   next: m204 (next offset: 246)
000241  1 0  "01010101000001000000000000000000"   // R[4] = R[8]; 
000242  1 0  "01010000001001101111111111100000"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-32,DMb[-32],SP); 
000243  1 0  "01010000001001111111111111011100"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000244  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000245  1 0  "01010000001010001111111111011000"   // (R[8]) = load__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 

// m204 subroutine call;   next: m206 (next offset: 246)

// m206 (next offset: /)
000246  1 0  "01010000001001111111111111111000"   // (R[7]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000247  1 0  "01010000001010001111111111111100"   // (R[8]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000248  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000249  1 0  "10101000001001111111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[7],SP,-48); 
000250  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000251  1 0  "10101000001010001111111111010100"   // (__spill_DMw[-44]) = stack_store_bndl_B3 (R[8],SP,-44); 
000252  1 0  "00001000001000011111111111011000"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-40,SP,SP); 

