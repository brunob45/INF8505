
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:13 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-float64_sqrt_ tlx


// m6;   next: m184, jump target: m29 (next offset: 12)
000000  1 0  "10011100100001100000000000010100"   // (R[6]) = _rs_const_8_B1 (R[4]); 
000001  1 0  "00010000110001100000011111111111"   // (R[6]) = _ad_const_4_B1 (R[6]); 
000002  1 0  "01001000000001110000000000001111"   // (R[7]) = lhi_const_1_B1 (15); 
000003  1 0  "01001000000010100111111111111111"   // (R[10]) = lhi_const_1_B1 (32767); 
000004  1 0  "10011100100010000000000000011111"   // (R[8]) = _rs_const_2_B1 (R[4]); 
000005  1 0  "10010100110010010000011111111111"   // (R[9]) = _ne_const_1_B1 (R[6]); 
000006  1 0  "00001000001000010000000000101100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (44,SP,SP); 
000007  1 0  "01010100111001111111111111111111"   // (R[7]) = w32_const_bor_1_B1 (R[7],65535); 
000008  1 0  "01010101010010101111111111111111"   // (R[10]) = w32_const_bor_1_B1 (R[10],65535); 
000009  1 0  "00100001001000000000000000010110"   // () = nez_br_const_1_B1 (R[9],22); 
000010  1 0  "00000000100001110011100000000011"   // (R[7]) = _ad_1_B1 (R[4],R[7]); 
000011  1 0  "00000000101001110001100000001010"   // (R[3]) = _or_1_B1 (R[7],R[5]); 

// m184;   next: m14, jump target: m18 (next offset: 15)
000012  1 0  "00010100011000000000000000001100"   // () = eqz_br_const_1_B1 (R[3],12); 
000013  1 0  "00001000000001101111111111111111"   // (R[6]) = const_6_B1 (); 
000014  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m14;   next: m15 (next offset: 19)
000015  1 0  "10101000001000101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[2],SP,-12); 
000016  1 0  "01010100101001110000000000000000"   // R[7] = R[5]; 
000017  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000018  1 0  "01010100100001100000000000000000"   // R[6] = R[4]; 

// m15 subroutine call;   next: m17 (next offset: 19)

// m17 (next offset: 26)
000019  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000020  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000021  1 0  "01010000001001011111111111110100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000022  1 0  "10101000001001101111111111001100"   // (__spill_DMw[-52]) = stack_store_bndl_B3 (R[6],SP,-52); 
000023  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000024  1 0  "10101000001001001111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[4],SP,-48); 
000025  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 

// m18;   next: m226 (next offset: 26)

// m226;   next: m25, jump target: m1 (next offset: 29)
000026  1 0  "00100001000000000000000000010001"   // () = nez_br_const_2_B1 (R[8],17); 
000027  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000028  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m25 (next offset: 33)
000029  1 0  "10101000001001001111111111001100"   // (__spill_DMw[-52]) = stack_store_bndl_B3 (R[4],SP,-52); 
000030  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000031  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000032  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 

// m29;   next: m187 (next offset: 33)

// m187;   next: m192, jump target: m46 (next offset: 36)
000033  1 0  "00010101000000000000000000001110"   // () = eqz_br_const_1_B1 (R[8],14); 
000034  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000035  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m192;   next: m40, jump target: m41 (next offset: 41)
000036  1 0  "00000000110001110011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[7]); 
000037  1 0  "00000000101001100011100000001010"   // (R[7]) = _or_1_B1 (R[6],R[5]); 
000038  1 0  "00100000111000000000000000000101"   // () = nez_br_const_2_B1 (R[7],5); 
000039  1 0  "00001000000001101111111111111111"   // (R[6]) = const_6_B1 (); 
000040  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m40 (next offset: 45)
000041  1 0  "10101000001001001111111111001100"   // (__spill_DMw[-52]) = stack_store_bndl_B3 (R[4],SP,-52); 
000042  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000043  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000044  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 

// m41;   next: m311 (next offset: 45)

// m311;   next: m1 (next offset: 45)

// m1;   next: m45 (next offset: 45)

// m45 (next offset: 49)
000045  1 0  "10101000001001101111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[6],SP,-48); 
000046  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000047  1 0  "10101000001010101111111111001100"   // (__spill_DMw[-52]) = stack_store_bndl_B3 (R[10],SP,-52); 
000048  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 

// m46;   next: m198, jump target: m63 (next offset: 52)
000049  1 0  "00100000110000000000000000001110"   // () = nez_br_const_2_B1 (R[6],14); 
000050  1 0  "10101000001000101111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[2],SP,-16); 
000051  1 0  "10101000001010101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[10],SP,-12); 

// m198;   next: m58, jump target: m59 (next offset: 55)
000052  1 0  "00100000011000000000000000000111"   // () = nez_br_const_2_B1 (R[3],7); 
000053  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000054  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m58 (next offset: 61)
000055  1 0  "10101000001000001111111111001100"   // (dmw_wr) = const_5_B5 (); (__spill_DMw[-52]) = stack_store_bndl_B3 (__CTr2_w32_cstV0cv,SP,-52); 
000056  1 0  "01001000000001010000000000000000"   // (R[5]) = const_5_B3 (); 
000057  1 0  "01010000001001001111111111110000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000058  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000059  1 0  "10101000001001011111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[5],SP,-48); 
000060  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 

// m59;   next: m61 (next offset: 61)

// m61;   next: m62 (next offset: 64)
000061  1 0  "01010100101010000000000000000000"   // R[8] = R[5]; 
000062  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000063  1 0  "01010100111001000000000000000000"   // R[4] = R[7]; 

// m62 subroutine call;   next: m310 (next offset: 64)

// m310;   next: m71 (next offset: 65)
000064  1 0  "01010101000001010000000000000000"   // R[5] = R[8]; 

// m63;   next: m71 (next offset: 65)

// m71;   next: m72 (next offset: 79)
000065  1 0  "01001000000001000000000000010000"   // (R[4]) = const_4_B1 (); 
000066  1 0  "00000000100001110010000000001010"   // (R[4]) = _or_3_B1 (R[7],R[4]); 
000067  1 0  "00001000110001111111110000000001"   // (R[7],MC) = _pl_const_5_B1 (R[6]); 
000068  1 0  "10011000111001110000000000000001"   // (R[7]) = _rs_const_6_B1 (R[7]); 
000069  1 0  "10101000001001001111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[4],SP,-20); 
000070  1 0  "10101000001001011111111111101000"   // (__spill_DMw[-24]) = stack_store_bndl_B3 (R[5],SP,-24); 
000071  1 0  "00001000111001110000001111111110"   // (R[7],MC) = _pl_const_6_B1 (R[7]); 
000072  1 0  "10001000100001000000000000001011"   // (R[4]) = _ls_const_4_B1 (R[4]); 
000073  1 0  "10011100101001010000000000010101"   // (R[5]) = _rs_const_7_B1 (R[5]); 
000074  1 0  "00000000100001010010100000001010"   // (R[5]) = _or_1_B1 (R[4],R[5]); 
000075  1 0  "10101000001001111111111111100100"   // (__spill_DMw[-28]) = stack_store_bndl_B3 (R[7],SP,-28); 
000076  1 0  "10101000001001101111111111100000"   // (__spill_DMw[-32]) = stack_store_bndl_B3 (R[6],SP,-32); 
000077  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000078  1 0  "01010100110001000000000000000000"   // R[4] = R[6]; 

// m72 subroutine call;   next: m204 (next offset: 79)

// m204;   next: m76, jump target: m77 (next offset: 84)
000079  1 0  "10011100011001000000000000000001"   // (R[4]) = _rs_const_5_B1 (R[3]); 
000080  1 0  "00001000100001010000000000000001"   // (R[5],MC) = _pl_const_4_B1 (R[4]); 
000081  1 0  "00100000101000000000000000000010"   // () = nez_br_const_2_B1 (R[5],2); 
000082  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000083  1 0  "10101000001001011111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[5],-36,DMb[-36],SP); 

// m76;   next: m212 (next offset: 85)
000084  1 0  "10101000001001001111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[4],-36,DMb[-36],SP); 

// m77;   next: m212 (next offset: 85)

// m212;   next: m83, jump target: m82 (next offset: 94)
000085  1 0  "01010100000001010000000000001001"   // (R[5]) = const_2_B2 (); 
000086  1 0  "01010000001001001111111111100000"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-32],SP,-32); 
000087  1 0  "00010000100001000000000000000001"   // (R[4]) = _ad_const_3_B1 (R[4]); 
000088  1 0  "01010000001001111111111111011100"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000089  1 0  "00000000101001000001100000011000"   // (R[3],MC) = _mi_1_B1 (R[5],R[4]); 
000090  1 0  "01010000001001101111111111101000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-24],SP,-24); 
000091  1 0  "00010100011000000000000000001000"   // () = eqz_br_const_1_B1 (R[3],8); 
000092  1 0  "00000000110000110010000000010010"   // (R[4]) = _ls_1_B1 (R[6],R[3]); 
000093  1 0  "10001000111001010000000000000001"   // (R[5]) = _ls_const_2_B1 (R[7]); 

// m83, jump target: m244 (next offset: 101)
000094  1 0  "00000000000000110100000000011000"   // (R[8],MC) = _mi_const_1_B1 (R[3]); 
000095  1 0  "00010001000010000000000000011111"   // (R[8]) = _ad_const_2_B1 (R[8]); 
000096  1 0  "01010000001010011111111111101100"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 
000097  1 0  "00000001001000110001100000010010"   // (R[3]) = _ls_1_B1 (R[9],R[3]); 
000098  1 0  "00000000110010000011000000010111"   // (R[6]) = _rs_1_B1 (R[6],R[8]); 
000099  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000100  1 0  "00000000011001100011000000001010"   // (R[6]) = _or_1_B1 (R[3],R[6]); 

// m82;   next: m244 (next offset: 102)
000101  1 0  "01010000001001101111111111101100"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m244;   next: m248, jump target: m247 (next offset: 111)
000102  1 0  "10011100111000110000000000010000"   // (R[3]) = _rs_const_4_B1 (R[7]); 
000103  1 0  "00010000111001111111111111111111"   // (R[7]) = __ushort_1_B1 (R[7]); 
000104  1 0  "00000000011001110100000000100000"   // (R[8]) = _ml_2_B1 (R[7],R[3]); 
000105  1 0  "10001001000010010000000000000001"   // (R[9]) = _ls_const_2_B1 (R[8]); 
000106  1 0  "00000000011000110001100000100000"   // (R[3]) = _ml_1_B1 (R[3],R[3]); 
000107  1 0  "00000001001010000101000000010100"   // (R[10]) = _lt_1_B1 (R[9],R[8]); 
000108  1 0  "00100001010000000000000000000010"   // () = nez_br_const_1_B1 (R[10],2); 
000109  1 0  "00000000111001110011100000100000"   // (R[7]) = _ml_1_B1 (R[7],R[7]); 
000110  1 0  "01001000000010000000000000000001"   // (R[8]) = const_1_B1 (); 

// m248;   next: m242 (next offset: 112)
000111  1 0  "01001000000010000000000000000000"   // (R[8]) = const_5_B3 (); 

// m247;   next: m242 (next offset: 112)

// m242;   next: m86 (next offset: 119)
000112  1 0  "10001001001010100000000000010000"   // (R[10]) = _ls_const_3_B1 (R[9]); 
000113  1 0  "10011101001010010000000000010000"   // (R[9]) = _rs_const_3_B1 (R[9]); 
000114  1 0  "00000001000010010100000000000001"   // (R[8],MC) = _pl_1_B1 (R[8],R[9]); 
000115  1 0  "00000000011010000001100000000001"   // (R[3],MC) = _pl_2_B1 (R[3],R[8]); 
000116  1 0  "00000000111010100011100000000001"   // (R[7],MC) = _pl_2_B1 (R[7],R[10]); 
000117  1 0  "00000000111010100100000000010100"   // (R[8]) = _lt_1_B1 (R[7],R[10]); 
000118  1 0  "00000000011010000001100000000001"   // (R[3],MC) = _pl_3_B1 (R[3],R[8]); 

// m86 chess_separator_scheduler;   next: m87 (next offset: 119)

// m87;   next: m88 (next offset: 121)
000119  1 0  "00000000100001110010000000011000"   // (R[4],MC) = sub_1_B1 (R[4],R[7]); 
000120  1 0  "00000000110000110011000000011001"   // (R[6],MC) = subx_2_B1 (R[6],R[3],MC); 

// m88 chess_separator_scheduler;   next: m100 (next offset: 121)

// m100, jump target: m2 (next offset: 124)
000121  1 0  "00001000101001111111111111111110"   // (R[7],MC) = _pl_const_3_B1 (R[5]); 
000122  1 0  "00100100000000000000000000001000"   // () = j_const_1_B1 (8); 
000123  1 0  "01001000000001010000000000000000"   // (R[5]) = const_5_B3 (); 

// m96;   next: m2 (next offset: 131)
000124  1 0  "01010000001010001111111111011100"   // (R[8]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000125  1 0  "01010100111000110000000000000001"   // (R[3]) = _or_const_1_B1 (R[7]); 
000126  1 0  "00001001000010001111111111111111"   // (R[8],MC) = _pl_const_1_B1 (R[8]); 
000127  1 0  "00001000111001111111111111111110"   // (R[7],MC) = _pl_const_3_B1 (R[7]); 
000128  1 0  "00000000011001000010000000000001"   // (R[4],MC) = add_1_B1 (R[4],R[3]); 
000129  1 0  "00000000110000000011000000000010"   // (R[6],MC) = addx_const_1_B3 (R[6],MC); 
000130  1 0  "10101000001010001111111111011100"   // (DMb[-36]) = store__pl_rd_res_reg_const_1_B1 (R[8],-36,DMb[-36],SP); 

// m2;   next: m97 (next offset: 131)

// m97;   next: m102, jump target: m96 (next offset: 135)
000131  1 0  "00000000110000000001100000010011"   // (R[3]) = _lt_const_1_B2 (R[6]); 
000132  1 0  "00100000011000001111111111110110"   // () = nez_br_const_1_B1 (R[3],-10); 
000133  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000134  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m102;   next: m103 (next offset: 140)
000135  1 0  "00001000111001100000000000000010"   // (R[6],MC) = _pl_const_2_B1 (R[7]); 
000136  1 0  "10101000001001101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[6],SP,-12); 
000137  1 0  "10101000001001001111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[4],SP,-20); 
000138  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000139  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m103 subroutine call;   next: m104 (next offset: 140)

// m104;   next: m215, jump target: m138 (next offset: 145)
000140  1 0  "00010000011001000000000111111111"   // (R[4]) = _ad_const_1_B1 (R[3]); 
000141  1 0  "01111000100001000000000000000101"   // (R[4]) = _gt_const_1_B1 (R[4]); 
000142  1 0  "00100000100000000000000001001010"   // () = nez_br_const_1_B1 (R[4],74); 
000143  1 0  "10101000001000111111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[3],-40,DMb[-40],SP); 
000144  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m215;   next: m111, jump target: m112 (next offset: 148)
000145  1 0  "00100000011000000000000000000011"   // () = nez_br_const_2_B1 (R[3],3); 
000146  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000147  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m111;   next: m272 (next offset: 150)
000148  1 0  "01010100000001000000000000000001"   // (R[4]) = const_3_B2 (); 
000149  1 0  "10101000001001001111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[4],-40,DMb[-40],SP); 

// m112;   next: m272 (next offset: 150)

// m272;   next: m276, jump target: m275 (next offset: 166)
000150  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000151  1 0  "01010000001001011111111111011000"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 
000152  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000153  1 0  "00010000101001101111111111111111"   // (R[6]) = __ushort_1_B1 (R[5]); 
000154  1 0  "00010000100000111111111111111111"   // (R[3]) = __ushort_1_B1 (R[4]); 
000155  1 0  "10011100101001010000000000010000"   // (R[5]) = _rs_const_4_B1 (R[5]); 
000156  1 0  "10011100100001110000000000010000"   // (R[7]) = _rs_const_4_B1 (R[4]); 
000157  1 0  "00000000011001010100000000100000"   // (R[8]) = _ml_2_B1 (R[3],R[5]); 
000158  1 0  "00000000110001110010000000100000"   // (R[4]) = _ml_2_B1 (R[7],R[6]); 
000159  1 0  "00000000100010000100100000000001"   // (R[9],MC) = _pl_2_B1 (R[8],R[4]); 
000160  1 0  "00000000011001100001100000100000"   // (R[3]) = _ml_2_B1 (R[3],R[6]); 
000161  1 0  "00000000101001110011100000100000"   // (R[7]) = _ml_2_B1 (R[7],R[5]); 
000162  1 0  "00000001001001000101000000010100"   // (R[10]) = _lt_1_B1 (R[9],R[4]); 
000163  1 0  "00100001010000000000000000000010"   // () = nez_br_const_1_B1 (R[10],2); 
000164  1 0  "01001000000010000000000000000001"   // (R[8]) = const_1_B1 (); 
000165  1 0  "01001000000001000000000000000001"   // (R[4]) = const_1_B1 (); 

// m276;   next: m270 (next offset: 167)
000166  1 0  "01001000000010000000000000000000"   // (R[8]) = const_5_B3 (); 

// m275;   next: m270 (next offset: 167)

// m270;   next: m115 (next offset: 175)
000167  1 0  "10001001001010100000000000010000"   // (R[10]) = _ls_const_3_B1 (R[9]); 
000168  1 0  "10011101001010010000000000010000"   // (R[9]) = _rs_const_3_B1 (R[9]); 
000169  1 0  "00000001000010010100000000000001"   // (R[8],MC) = _pl_1_B1 (R[8],R[9]); 
000170  1 0  "00000000111010000011100000000001"   // (R[7],MC) = _pl_2_B1 (R[7],R[8]); 
000171  1 0  "00000000011010100001100000000001"   // (R[3],MC) = _pl_2_B1 (R[3],R[10]); 
000172  1 0  "00000000011010100100000000010100"   // (R[8]) = _lt_1_B1 (R[3],R[10]); 
000173  1 0  "00000000111010000100000000000001"   // (R[8],MC) = _pl_3_B1 (R[7],R[8]); 
000174  1 0  "01010000001010011111111111101100"   // (R[9]) = stack_load_bndl_B3 (__spill_DMw[-20],SP,-20); 

// m115 chess_separator_scheduler;   next: m116 (next offset: 175)

// m116;   next: m117 (next offset: 177)
000175  1 0  "00000000000000110011100000011000"   // (R[7],MC) = sub_const_1_B1 (R[3]); 
000176  1 0  "00000001001010000001100000011001"   // (R[3],MC) = subx_2_B1 (R[9],R[8],MC); 

// m117 chess_separator_scheduler;   next: m299 (next offset: 177)

// m299;   next: m303, jump target: m302 (next offset: 183)
000177  1 0  "00000000101001100100100000100000"   // (R[9]) = _ml_2_B1 (R[6],R[5]); 
000178  1 0  "10001001001010000000000000000001"   // (R[8]) = _ls_const_2_B1 (R[9]); 
000179  1 0  "00000001000010010100100000010100"   // (R[9]) = _lt_1_B1 (R[8],R[9]); 
000180  1 0  "00100001001000000000000000000010"   // () = nez_br_const_1_B1 (R[9],2); 
000181  1 0  "00000000101001010010100000100000"   // (R[5]) = _ml_1_B1 (R[5],R[5]); 
000182  1 0  "00000000110001100011000000100000"   // (R[6]) = _ml_1_B1 (R[6],R[6]); 

// m303;   next: m135 (next offset: 184)
000183  1 0  "01001000000001000000000000000000"   // (R[4]) = const_5_B3 (); 

// m302;   next: m135 (next offset: 184)

// m135, jump target: m3 (next offset: 197)
000184  1 0  "10001001000010010000000000010000"   // (R[9]) = _ls_const_3_B1 (R[8]); 
000185  1 0  "10011101000010000000000000010000"   // (R[8]) = _rs_const_3_B1 (R[8]); 
000186  1 0  "00000000100010000010000000000001"   // (R[4],MC) = _pl_1_B1 (R[4],R[8]); 
000187  1 0  "00000000100001010010000000000001"   // (R[4],MC) = _pl_2_B1 (R[5],R[4]); 
000188  1 0  "00000000110010010011000000000001"   // (R[6],MC) = _pl_2_B1 (R[6],R[9]); 
000189  1 0  "00000000110010010010100000010100"   // (R[5]) = _lt_1_B1 (R[6],R[9]); 
000190  1 0  "00000000100001010010000000000001"   // (R[4],MC) = _pl_3_B1 (R[4],R[5]); 
000191  1 0  "00000000000001100010100000011000"   // (R[5],MC) = sub_const_1_B1 (R[6]); 
000192  1 0  "00000000111001000011000000011001"   // (R[6],MC) = subx_1_B1 (R[7],R[4],MC); 
000193  1 0  "00000000011000000011100000011001"   // (R[7],MC) = subx_const_1_B3 (R[3],MC); 
000194  1 0  "01001000000001000000000000000000"   // (R[4]) = const_5_B3 (); 
000195  1 0  "00100100000000000000000000001011"   // () = j_const_1_B1 (11); 
000196  1 0  "01010000001000111111111111110100"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 

// m131;   next: m3 (next offset: 207)
000197  1 0  "01010000001010001111111111011000"   // (R[8]) = load__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 
000198  1 0  "00001001000010011111111111111111"   // (R[9],MC) = _pl_const_1_B1 (R[8]); 
000199  1 0  "10001001001010000000000000000001"   // (R[8]) = _ls_const_2_B1 (R[9]); 
000200  1 0  "10101000001010011111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[9],-40,DMb[-40],SP); 
000201  1 0  "10011101001010010000000000011111"   // (R[9]) = _rs_const_2_B1 (R[9]); 
000202  1 0  "01010101000010000000000000000001"   // (R[8]) = _or_const_1_B1 (R[8]); 
000203  1 0  "00000000011010010100100000001010"   // (R[9]) = _or_1_B1 (R[9],R[3]); 
000204  1 0  "00000000101010000010100000000001"   // (R[5],MC) = add_1_B1 (R[5],R[8]); 
000205  1 0  "00000000110010010011000000000010"   // (R[6],MC) = addx_1_B1 (R[6],R[9],MC); 
000206  1 0  "00000000111000000011100000000010"   // (R[7],MC) = addx_const_1_B3 (R[7],MC); 

// m3;   next: m132 (next offset: 207)

// m132;   next: m222, jump target: m131 (next offset: 211)
000207  1 0  "00000000111000000100000000010011"   // (R[8]) = _lt_const_1_B2 (R[7]); 
000208  1 0  "00100001000000001111111111110011"   // () = nez_br_const_1_B1 (R[8],-13); 
000209  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000210  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m222, jump target: m173 (next offset: 218)
000211  1 0  "00000000110001110011000000001010"   // (R[6]) = _or_1_B1 (R[7],R[6]); 
000212  1 0  "00000000101001100011000000001010"   // (R[6]) = _or_1_B1 (R[6],R[5]); 
000213  1 0  "01010000001001011111111111011000"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 
000214  1 0  "00000000110000000011000000010101"   // (R[6]) = nez_1_B1 (R[6]); 
000215  1 0  "00000000101001100010100000001010"   // (R[5]) = _or_2_B1 (R[5],R[6]); 
000216  1 0  "00100100000000000000000000000010"   // () = j_const_1_B1 (2); 
000217  1 0  "10101000001001011111111111011000"   // (DMb[-40]) = store__pl_rd_res_reg_const_1_B1 (R[5],-40,DMb[-40],SP); 

// m138;   next: m173 (next offset: 219)
000218  1 0  "01001000000001000000000000000000"   // (R[4]) = const_5_B3 (); 

// m173;   next: m174 (next offset: 229)
000219  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000220  1 0  "01010000001000111111111111011000"   // (R[3]) = load__pl_rd_res_reg_const_1_B1 (-40,DMb[-40],SP); 
000221  1 0  "01010000001001101111111111011100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-36,DMb[-36],SP); 
000222  1 0  "10001000110001010000000000010110"   // (R[5]) = _ls_const_1_B1 (R[6]); 
000223  1 0  "10011100011001110000000000001010"   // (R[7]) = _rs_const_1_B1 (R[3]); 
000224  1 0  "10001000011010000000000000010110"   // (R[8]) = _ls_const_1_B1 (R[3]); 
000225  1 0  "10011100110001100000000000001010"   // (R[6]) = _rs_const_1_B1 (R[6]); 
000226  1 0  "00000000101001110011100000001010"   // (R[7]) = _or_1_B1 (R[5],R[7]); 
000227  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000228  1 0  "01010000001001011111111111100100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-28],SP,-28); 

// m174 subroutine call;   next: m176 (next offset: 229)

// m176 (next offset: /)
000229  1 0  "01010000001001101111111111111000"   // (R[6]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000230  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000231  1 0  "01010000001001011111111111110000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-16],SP,-16); 
000232  1 0  "10101000001001101111111111001100"   // (__spill_DMw[-52]) = stack_store_bndl_B3 (R[6],SP,-52); 
000233  1 0  "00110000101000000000000000000000"   // () = __rts_jr_1_B1 (R[5]); 
000234  1 0  "10101000001001001111111111010000"   // (__spill_DMw[-48]) = stack_store_bndl_B3 (R[4],SP,-48); 
000235  1 0  "00001000001000011111111111010100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-44,SP,SP); 

