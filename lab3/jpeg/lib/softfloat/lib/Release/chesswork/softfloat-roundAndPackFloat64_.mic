
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:09 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i softfloat-roundAndPackFloat64_ tlx


// m35;   next: m253, jump target: m335 (next offset: 9)
000000  1 0  "00001000001000010000000000001100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (12,SP,SP); 
000001  1 0  "00010000101010011111111111111111"   // (R[9]) = __ushort_1_B1 (R[5]); 
000002  1 0  "10101000001001101111111111110100"   // (DMb[-12]) = store__pl_rd_res_reg_const_1_B1 (R[6],-12,DMb[-12],SP); 
000003  1 0  "00000001000000000001100000010011"   // (R[3]) = _lt_const_1_B2 (R[8]); 
000004  1 0  "10001000100001000000000000011111"   // (R[4]) = _ls_const_3_B1 (R[4]); 
000005  1 0  "10001101001001100000011111111101"   // (R[6]) = _lt_const_4_B1 (R[9]); 
000006  1 0  "00100000110000000000000001001100"   // () = nez_br_const_2_B1 (R[6],76); 
000007  1 0  "10101000001010001111111111111100"   // (DMb[-4]) = store__pl_rd_res_reg_const_1_B1 (R[8],-4,DMb[-4],SP); 
000008  1 0  "10101000001001111111111111111000"   // (DMb[-8]) = store__pl_rd_res_reg_const_1_B1 (R[7],-8,DMb[-8],SP); 

// m253;   next: m103, jump target: m104 (next offset: 24)
000009  1 0  "01001000000001100000000000011111"   // (R[6]) = lhi_const_1_B1 (31); 
000010  1 0  "01010100110010011111111111111111"   // (R[9]) = w32_const_bor_1_B1 (R[6],65535); 
000011  1 0  "01010000001001101111111111110100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-12,DMb[-12],SP); 
000012  1 0  "01010000001001111111111111111000"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-8,DMb[-8],SP); 
000013  1 0  "00000000110010010100100000001011"   // (R[9]) = _eq_1_B1 (R[6],R[9]); 
000014  1 0  "01100100111010101111111111111111"   // (R[10]) = _eq_const_4_B1 (R[7]); 
000015  1 0  "01100100101010110000011111111101"   // (R[11]) = _eq_const_3_B1 (R[5]); 
000016  1 0  "00000001001010100100100000000011"   // (R[9]) = land_1_B1 (R[9],R[10]); 
000017  1 0  "00000001001010110101000000000011"   // (R[10]) = land_1_B1 (R[11],R[9]); 
000018  1 0  "01110100101010010000011111111101"   // (R[9]) = _gt_const_1_B1 (R[5]); 
000019  1 0  "00000000011010100101000000000011"   // (R[10]) = land_1_B1 (R[10],R[3]); 
000020  1 0  "00000001001010100100100000001010"   // (R[9]) = lor_1_B1 (R[9],R[10]); 
000021  1 0  "00010101001000000000000000000111"   // () = eqz_br_const_2_B1 (R[9],7); 
000022  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000023  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m103 (next offset: 30)
000024  1 0  "01001000000001010111111111110000"   // (R[5]) = const_1_B1 (); 
000025  1 0  "00000000100001010010100000000001"   // (R[5],MC) = _pl_2_B1 (R[4],R[5]); 
000026  1 0  "10101000001000001111111111110000"   // (dmw_wr) = const_2_B5 (); (__spill_DMw[-16]) = stack_store_bndl_B3 (__CTr2_w32_cstV0cv,SP,-16); 
000027  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000028  1 0  "10101000001001011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[5],SP,-20); 
000029  1 0  "00001000001000011111111111110100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-12,SP,SP); 

// m104;   next: m106 (next offset: 30)

// m106;   next: m259, jump target: m212 (next offset: 34)
000030  1 0  "00000000101000000100100000001100"   // (R[9]) = _ge_const_1_B2 (R[5]); 
000031  1 0  "00100001001000000000000000101110"   // () = nez_br_const_2_B1 (R[9],46); 
000032  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000033  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m259;   next: m146, jump target: m144 (next offset: 38)
000034  1 0  "00000000000001010010100000011000"   // (R[5],MC) = _mi_const_1_B1 (R[5]); 
000035  1 0  "00010100101000000000000000100001"   // () = eqz_br_const_1_B1 (R[5],33); 
000036  1 0  "00000000000001010001100000011000"   // (R[3],MC) = _mi_const_1_B1 (R[5]); 
000037  1 0  "00010000011010010000000000011111"   // (R[9]) = _ad_const_2_B1 (R[3]); 

// m146;   next: m151, jump target: m149 (next offset: 42)
000038  1 0  "10001100101010100000000000100000"   // (R[10]) = _lt_const_3_B1 (R[5]); 
000039  1 0  "00100001010000000000000000010110"   // () = nez_br_const_2_B1 (R[10],22); 
000040  1 0  "00000000110010010001100000010010"   // (R[3]) = _ls_1_B1 (R[6],R[9]); 
000041  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m151;   next: m156, jump target: m154 (next offset: 46)
000042  1 0  "01100100101010010000000000100000"   // (R[9]) = _eq_const_2_B1 (R[5]); 
000043  1 0  "00100001001000000000000000001111"   // () = nez_br_const_2_B1 (R[9],15); 
000044  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000045  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m156;   next: m161, jump target: m159 (next offset: 51)
000046  1 0  "00000000111010000100000000001010"   // (R[8]) = _or_1_B1 (R[8],R[7]); 
000047  1 0  "10001100101001110000000001000000"   // (R[7]) = _lt_const_2_B1 (R[5]); 
000048  1 0  "00100000111000000000000000000111"   // () = nez_br_const_2_B1 (R[7],7); 
000049  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000050  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m161;   next: m305, jump target: m338 (next offset: 55)
000051  1 0  "01100100101001010000000001000000"   // (R[5]) = _eq_const_1_B1 (R[5]); 
000052  1 0  "00100000101000000000000000000110"   // () = nez_br_const_2_B1 (R[5],6); 
000053  1 0  "01010100110001110000000000000000"   // R[7] = R[6]; 
000054  1 0  "01001000000001100000000000000000"   // (R[6]) = const_2_B3 (); 

// m305, jump target: m338 (next offset: 57)
000055  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000056  1 0  "00000000111000000011100000010101"   // (R[7]) = nez_1_B1 (R[7]); 

// m159;   next: m338 (next offset: 60)
000057  1 0  "00010000101001010000000000011111"   // (R[5]) = _ad_const_2_B1 (R[5]); 
000058  1 0  "00000000110001010011000000010111"   // (R[6]) = _rs_1_B1 (R[6],R[5]); 
000059  1 0  "01010100011001110000000000000000"   // R[7] = R[3]; 

// m338;   next: m339 (next offset: 60)

// m154;   next: m339 (next offset: 60)

// m339, jump target: m266 (next offset: 63)
000060  1 0  "01010100110001010000000000000000"   // R[5] = R[6]; 
000061  1 0  "00100100000000000000000000000101"   // () = j_const_1_B1 (5); 
000062  1 0  "01001000000001100000000000000000"   // (R[6]) = const_2_B3 (); 

// m149;   next: m266 (next offset: 67)
000063  1 0  "00000000110001010011000000010111"   // (R[6]) = _rs_1_B1 (R[6],R[5]); 
000064  1 0  "00000000111001010010100000010111"   // (R[5]) = _rs_1_B1 (R[7],R[5]); 
000065  1 0  "00000000111010010011100000010010"   // (R[7]) = _ls_1_B1 (R[7],R[9]); 
000066  1 0  "00000000011001010010100000001010"   // (R[5]) = _or_1_B1 (R[3],R[5]); 

// m266;   next: m189 (next offset: 70)
000067  1 0  "00000001000000000100000000010101"   // (R[8]) = nez_1_B1 (R[8]); 
000068  1 0  "00000000111010000100000000001010"   // (R[8]) = _or_2_B1 (R[7],R[8]); 
000069  1 0  "01010100101001110000000000000000"   // R[7] = R[5]; 

// m144;   next: m189 (next offset: 70)

// m189;   next: m332, jump target: m328 (next offset: 77)
000070  1 0  "10101000001010001111111111111100"   // (DMb[-4]) = store__pl_rd_res_reg_const_1_B1 (R[8],-4,DMb[-4],SP); 
000071  1 0  "10101000001001101111111111110100"   // (DMb[-12]) = store__pl_rd_res_reg_const_1_B1 (R[6],-12,DMb[-12],SP); 
000072  1 0  "00000001000000000100000000010011"   // (R[8]) = _lt_const_1_B2 (R[8]); 
000073  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 
000074  1 0  "00100001000000000000000000001100"   // () = nez_br_const_2_B1 (R[8],12); 
000075  1 0  "10101000001001111111111111111000"   // (DMb[-8]) = store__pl_rd_res_reg_const_1_B1 (R[7],-8,DMb[-8],SP); 
000076  1 0  "01010100000001110000000000000001"   // (R[7]) = const_3_B2 (); 

// m332, jump target: m322 (next offset: 79)
000077  1 0  "00100100000000000000000000000100"   // () = j_const_1_B1 (4); 
000078  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m212;   next: m322, jump target: m328 (next offset: 82)
000079  1 0  "00100000011000000000000000000111"   // () = nez_br_const_2_B1 (R[3],7); 
000080  1 0  "01010100000001110000000000000001"   // (R[7]) = const_3_B2 (); 
000081  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m322, jump target: m328 (next offset: 84)
000082  1 0  "00100100000000000000000000000101"   // () = j_const_1_B1 (5); 
000083  1 0  "01001000000001110000000000000000"   // (R[7]) = const_2_B3 (); 

// m335;   next: m314, jump target: m313 (next offset: 87)
000084  1 0  "00100000011000000000000000000010"   // () = nez_br_const_2_B1 (R[3],2); 
000085  1 0  "01010100000001110000000000000001"   // (R[7]) = const_3_B2 (); 
000086  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m314;   next: m328 (next offset: 88)
000087  1 0  "01001000000001110000000000000000"   // (R[7]) = const_2_B3 (); 

// m313;   next: m328 (next offset: 88)

// m328;   next: m283, jump target: m293 (next offset: 92)
000088  1 0  "00000000111000000011100000010101"   // (R[7]) = _ne_const_1_B2 (R[7]); 
000089  1 0  "00100000111000000000000000000111"   // () = nez_br_const_2_B1 (R[7],7); 
000090  1 0  "01010000001010001111111111111000"   // (R[8]) = load__pl_rd_res_reg_const_1_B1 (-8,DMb[-8],SP); 
000091  1 0  "01010000001001101111111111110100"   // (R[6]) = load__pl_rd_res_reg_const_1_B1 (-12,DMb[-12],SP); 

// m283;   next: m224, jump target: m230 (next offset: 96)
000092  1 0  "00000000110010000100000000001010"   // (R[8]) = _or_1_B1 (R[6],R[8]); 
000093  1 0  "00100001000000000000000000001110"   // () = nez_br_const_1_B1 (R[8],14); 
000094  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000095  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m224, jump target: m230 (next offset: 98)
000096  1 0  "00100100000000000000000000001100"   // () = j_const_1_B1 (12); 
000097  1 0  "01001000000001010000000000000000"   // (R[5]) = const_2_B3 (); 

// m293;   next: m230 (next offset: 109)
000098  1 0  "01010000001001111111111111111100"   // (R[7]) = load__pl_rd_res_reg_const_1_B1 (-4,DMb[-4],SP); 
000099  1 0  "00001001000010000000000000000001"   // (R[8],MC) = add_const_1_B1 (R[8]); 
000100  1 0  "10001000111001110000000000000001"   // (R[7]) = _ls_const_2_B1 (R[7]); 
000101  1 0  "00000000110000000011000000000010"   // (R[6],MC) = addx_const_1_B3 (R[6],MC); 
000102  1 0  "00000000111000000011100000001011"   // (R[7]) = eqz_1_B1 (R[7]); 
000103  1 0  "00010000111001110000000000000001"   // (R[7]) = _ad_const_1_B1 (R[7]); 
000104  1 0  "00001000000000111111111111111111"   // (R[3]) = const_4_B1 (); 
000105  1 0  "00000000011001110011100000011010"   // (R[7]) = _er_1_B1 (R[7],R[3]); 
000106  1 0  "00000000111010000100000000000011"   // (R[8]) = _ad_1_B1 (R[8],R[7]); 
000107  1 0  "10101000001001101111111111110100"   // (DMb[-12]) = store__pl_rd_res_reg_const_1_B1 (R[6],-12,DMb[-12],SP); 
000108  1 0  "10101000001010001111111111111000"   // (DMb[-8]) = store__pl_rd_res_reg_const_1_B1 (R[8],-8,DMb[-8],SP); 

// m230 (next offset: /)
000109  1 0  "10001000101001010000000000010100"   // (R[5]) = _ls_const_1_B1 (R[5]); 
000110  1 0  "00000000100001010010100000000001"   // (R[5],MC) = _pl_1_B1 (R[4],R[5]); 
000111  1 0  "01010000001010001111111111111000"   // (R[8]) = load__pl_rd_res_reg_const_1_B1 (-8,DMb[-8],SP); 
000112  1 0  "01010000001001001111111111110100"   // (R[4]) = load__pl_rd_res_reg_const_1_B1 (-12,DMb[-12],SP); 
000113  1 0  "00000000100001010010100000000001"   // (R[5],MC) = _pl_1_B1 (R[5],R[4]); 
000114  1 0  "10101000001010001111111111110000"   // (__spill_DMw[-16]) = stack_store_bndl_B3 (R[8],SP,-16); 
000115  1 0  "00110000010000000000000000000000"   // () = __rts_jr_1_B1 (R[2]); 
000116  1 0  "10101000001001011111111111101100"   // (__spill_DMw[-20]) = stack_store_bndl_B3 (R[5],SP,-20); 
000117  1 0  "00001000001000011111111111110100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-12,SP,SP); 

