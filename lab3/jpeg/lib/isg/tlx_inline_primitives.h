
// File generated by pdg version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:29:24 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// pdg -P -B -Iisg +wisg -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -D__checkers__ tlx

#ifndef TLX_INLINE_PRIMITIVES_H
#define TLX_INLINE_PRIMITIVES_H

#ifdef __checkers__
#include "Mdl_tlx.h"

#include "checkers_errors.h"
#endif // __checkers__

#include <sstream>

#include <iostream>
#include <cstdlib>
#ifndef PDG_NATIVE_HANDLE_ERR
#define PDG_NATIVE_HANDLE_ERR(msg, loc) \
  std::cerr << "An error occurred: " << msg << " at: " << loc << std::endl; \
  std::cerr << "Exiting.." << std::endl; \
  exit(1);
#endif

#ifndef PDG_NATIVE_HANDLE_WRN
#define PDG_NATIVE_HANDLE_WRN(msg, loc) \
  std::cerr << "Warning: " << msg << " at: " << loc << std::endl;
#endif

namespace tlx_primitive {

    const int controller_module_id = 0;
    const int banks_module_id = 1;

    inline tlx_primitive::w32 add(tlx_primitive::w32 a, tlx_primitive::w32 b, tlx_primitive::uint1& co) {
        VBit<33, false> aa = VBit<33, false>(VBit<32, false>(a.val));
        VBit<33, false> bb = VBit<33, false>(VBit<32, false>(b.val));
        VBit<33, false> rr = (aa + bb);
        co = rr.extract(0x20u);
        return tlx_primitive::w32(VBit<32, false>(rr.extract(0x1Fu, 0x0u)));
    }

    inline tlx_primitive::w32 add(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return (a.val + b.val);
    }

    inline tlx_primitive::w32 sub(tlx_primitive::w32 a, tlx_primitive::w32 b, tlx_primitive::uint1& co) {
        VBit<33, false> aa = VBit<33, false>(VBit<32, false>(a.val));
        VBit<33, false> bb = VBit<33, false>(VBit<32, false>(b.val));
        VBit<33, false> rr = (aa - bb);
        co = rr.extract(0x20u);
        return tlx_primitive::w32(VBit<32, false>(rr.extract(0x1Fu, 0x0u)));
    }

    inline tlx_primitive::w32 addx(tlx_primitive::w32 a, tlx_primitive::w32 b, tlx_primitive::uint1 ci, tlx_primitive::uint1& co) {
        VBit<33, false> aa = VBit<33, false>(VBit<32, false>(a.val));
        VBit<33, false> bb = VBit<33, false>(VBit<32, false>(b.val));
        VBit<33, false> rr = ((aa + bb) + VBit<33, false>(ci.val));
        co = rr.extract(0x20u);
        return tlx_primitive::w32(VBit<32, false>(rr.extract(0x1Fu, 0x0u)));
    }

    inline tlx_primitive::w32 subx(tlx_primitive::w32 a, tlx_primitive::w32 b, tlx_primitive::uint1 ci, tlx_primitive::uint1& co) {
        VBit<33, false> aa = VBit<33, false>(VBit<32, false>(a.val));
        VBit<33, false> bb = VBit<33, false>(VBit<32, false>(b.val));
        VBit<33, false> rr = ((aa - bb) - VBit<33, false>(ci.val));
        co = rr.extract(0x20u);
        return tlx_primitive::w32(VBit<32, false>(rr.extract(0x1Fu, 0x0u)));
    }

    inline tlx_primitive::w32 band(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return (a.val & b.val);
    }

    inline tlx_primitive::w32 bor(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return (a.val | b.val);
    }

    inline tlx_primitive::w32 bxor(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return (a.val ^ b.val);
    }

    inline tlx_primitive::w32 sge(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((a.val >= b.val));
    }

    inline tlx_primitive::w32 sgt(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((a.val > b.val));
    }

    inline tlx_primitive::w32 sle(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((a.val <= b.val));
    }

    inline tlx_primitive::w32 slt(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((a.val < b.val));
    }

    inline tlx_primitive::w32 seq(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((a.val == b.val));
    }

    inline tlx_primitive::w32 sne(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((a.val != b.val));
    }

    inline tlx_primitive::w32 sgeu(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((VBit<32, false>(a.val) >= VBit<32, false>(b.val)));
    }

    inline tlx_primitive::w32 sgtu(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((VBit<32, false>(a.val) > VBit<32, false>(b.val)));
    }

    inline tlx_primitive::w32 sleu(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((VBit<32, false>(a.val) <= VBit<32, false>(b.val)));
    }

    inline tlx_primitive::w32 sltu(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((VBit<32, false>(a.val) < VBit<32, false>(b.val)));
    }

    inline tlx_primitive::w32 sra(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return (a.val >> VBit<5, false>(VBit<5, true>(b.val.extract(0x4u, 0x0u))));
    }

    inline tlx_primitive::w32 sll(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((VBit<32, false>(a.val) << VBit<5, false>(VBit<5, true>(b.val.extract(0x4u, 0x0u)))));
    }

    inline tlx_primitive::w32 srl(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((VBit<32, false>(a.val) >> VBit<5, false>(VBit<5, true>(b.val.extract(0x4u, 0x0u)))));
    }

    inline tlx_primitive::w32 xtd(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        VBit<5, false> f = VBit<5, false>((VBit<32, true>(0x20) - b.val));
        return ((a.val << f) >> f);
    }

    inline tlx_primitive::w32 mul(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return tlx_primitive::w32((a.val * b.val));
    }

    inline void lmulss(tlx_primitive::w32 a, tlx_primitive::w32 b, tlx_primitive::w32& lo, tlx_primitive::w32& hi) {
        VBit<64, true> p = (a.val * b.val);
        lo = VBit<32, true>(p.extract(0x1Fu, 0x0u));
        hi = VBit<32, true>(p.extract(0x3Fu, 0x20u));
    }

    inline void lmulsu(tlx_primitive::w32 a, tlx_primitive::w32 b, tlx_primitive::w32& lo, tlx_primitive::w32& hi) {
        VBit<64, true> p = (a.val * VBit<32, false>(b.val));
        lo = VBit<32, true>(p.extract(0x1Fu, 0x0u));
        hi = VBit<32, true>(p.extract(0x3Fu, 0x20u));
    }

    inline void lmuluu(tlx_primitive::w32 a, tlx_primitive::w32 b, tlx_primitive::w32& lo, tlx_primitive::w32& hi) {
        VBit<64, true> p = VBit<64, true>((VBit<32, false>(a.val) * VBit<32, false>(b.val)));
        lo = VBit<32, true>(p.extract(0x1Fu, 0x0u));
        hi = VBit<32, true>(p.extract(0x3Fu, 0x20u));
    }

    inline tlx_primitive::w32 clb(tlx_primitive::w32 a) {
        VBit<6, false> r;
        tlx_primitive::w32 t;
        if ((a.val < 0x0)) {
            t = ~a.val;
        } else {
            t = a.val;
        }
        tlx_primitive::w32 tmp = t.val;
        if ((VBit<32, true>(tmp.val.extract(0x1Fu, 0x0u)) == 0x0)) {
            r = 0x20u;
        } else if ((VBit<31, true>(tmp.val.extract(0x1Fu, 0x1u)) == 0x0)) {
            r = 0x1Fu;
        } else if ((VBit<30, true>(tmp.val.extract(0x1Fu, 0x2u)) == 0x0)) {
            r = 0x1Eu;
        } else if ((VBit<29, true>(tmp.val.extract(0x1Fu, 0x3u)) == 0x0)) {
            r = 0x1Du;
        } else if ((VBit<28, true>(tmp.val.extract(0x1Fu, 0x4u)) == 0x0)) {
            r = 0x1Cu;
        } else if ((VBit<27, true>(tmp.val.extract(0x1Fu, 0x5u)) == 0x0)) {
            r = 0x1Bu;
        } else if ((VBit<26, true>(tmp.val.extract(0x1Fu, 0x6u)) == 0x0)) {
            r = 0x1Au;
        } else if ((VBit<25, true>(tmp.val.extract(0x1Fu, 0x7u)) == 0x0)) {
            r = 0x19u;
        } else if ((VBit<24, true>(tmp.val.extract(0x1Fu, 0x8u)) == 0x0)) {
            r = 0x18u;
        } else if ((VBit<23, true>(tmp.val.extract(0x1Fu, 0x9u)) == 0x0)) {
            r = 0x17u;
        } else if ((VBit<22, true>(tmp.val.extract(0x1Fu, 0xAu)) == 0x0)) {
            r = 0x16u;
        } else if ((VBit<21, true>(tmp.val.extract(0x1Fu, 0xBu)) == 0x0)) {
            r = 0x15u;
        } else if ((VBit<20, true>(tmp.val.extract(0x1Fu, 0xCu)) == 0x0)) {
            r = 0x14u;
        } else if ((VBit<19, true>(tmp.val.extract(0x1Fu, 0xDu)) == 0x0)) {
            r = 0x13u;
        } else if ((VBit<18, true>(tmp.val.extract(0x1Fu, 0xEu)) == 0x0)) {
            r = 0x12u;
        } else if ((VBit<17, true>(tmp.val.extract(0x1Fu, 0xFu)) == 0x0)) {
            r = 0x11u;
        } else if ((VBit<16, true>(tmp.val.extract(0x1Fu, 0x10u)) == 0x0)) {
            r = 0x10u;
        } else if ((VBit<15, true>(tmp.val.extract(0x1Fu, 0x11u)) == 0x0)) {
            r = 0xFu;
        } else if ((VBit<14, true>(tmp.val.extract(0x1Fu, 0x12u)) == 0x0)) {
            r = 0xEu;
        } else if ((VBit<13, true>(tmp.val.extract(0x1Fu, 0x13u)) == 0x0)) {
            r = 0xDu;
        } else if ((VBit<12, true>(tmp.val.extract(0x1Fu, 0x14u)) == 0x0)) {
            r = 0xCu;
        } else if ((VBit<11, true>(tmp.val.extract(0x1Fu, 0x15u)) == 0x0)) {
            r = 0xBu;
        } else if ((VBit<10, true>(tmp.val.extract(0x1Fu, 0x16u)) == 0x0)) {
            r = 0xAu;
        } else if ((VBit<9, true>(tmp.val.extract(0x1Fu, 0x17u)) == 0x0)) {
            r = 0x9u;
        } else if ((VBit<8, true>(tmp.val.extract(0x1Fu, 0x18u)) == 0x0)) {
            r = 0x8u;
        } else if ((VBit<7, true>(tmp.val.extract(0x1Fu, 0x19u)) == 0x0)) {
            r = 0x7u;
        } else if ((VBit<6, true>(tmp.val.extract(0x1Fu, 0x1Au)) == 0x0)) {
            r = 0x6u;
        } else if ((VBit<5, true>(tmp.val.extract(0x1Fu, 0x1Bu)) == 0x0)) {
            r = 0x5u;
        } else if ((VBit<4, true>(tmp.val.extract(0x1Fu, 0x1Cu)) == 0x0)) {
            r = 0x4u;
        } else if ((VBit<3, true>(tmp.val.extract(0x1Fu, 0x1Du)) == 0x0)) {
            r = 0x3u;
        } else if ((VBit<2, true>(tmp.val.extract(0x1Fu, 0x1Eu)) == 0x0)) {
            r = 0x2u;
        } else {
            r = 0x1u;
        }
        return tlx_primitive::w32(r);
    }

    inline tlx_primitive::w32 extend_sign(tlx_primitive::w08 a) {
        return tlx_primitive::w32(a.val);
    }

    inline tlx_primitive::w32 extend_zero(tlx_primitive::w08 a) {
        return tlx_primitive::w32(VBit<8, false>(a.val));
    }

    inline tlx_primitive::w32 extend_sign(tlx_primitive::w16 a) {
        return tlx_primitive::w32(a.val);
    }

    inline tlx_primitive::w32 extend_zero(tlx_primitive::w16 a) {
        return tlx_primitive::w32(VBit<16, false>(a.val));
    }

    inline tlx_primitive::w08 extract_w08(tlx_primitive::w32 a) {
        return VBit<8, true>(a.val.extract(0x7u, 0x0u));
    }

    inline tlx_primitive::w16 extract_w16(tlx_primitive::w32 a) {
        return VBit<16, true>(a.val.extract(0xFu, 0x0u));
    }

    inline bool eqz(tlx_primitive::w32 a) {
        return (a.val == 0x0);
    }

    inline bool nez(tlx_primitive::w32 a) {
        return (a.val != 0x0);
    }

    inline void nop() {
    }

    inline tlx_primitive::w32 pcadd(tlx_primitive::w32 a, tlx_primitive::w32 b) {
        return (a.val + b.val);
    }

    inline tlx_primitive::w32 DUCbCr(tlx_primitive::w32 R, tlx_primitive::w32 G, tlx_primitive::w32 B, tlx_primitive::w32 Cb_in, tlx_primitive::w32 Cr_in, tlx_primitive::w32& Cb_out, tlx_primitive::w32& Cr_out) {
        tlx_primitive::w32 Cb = Cb_in.val;
        tlx_primitive::w32 Cr = Cr_in.val;
        tlx_primitive::w32 DU;
        DU = tlx_primitive::w32((VBit<8, false>(VBit<8, true>((((VBit<48, true>((VBit<15, false>(0x4C8Bu) * R.val)) + (VBit<16, false>(0x9646u) * G.val)) + VBit<48, true>((VBit<13, false>(0x1D2Fu) * B.val))) >> 0x10u))) - VBit<8, false>(0x80u))).val;
        Cb = (Cb.val + tlx_primitive::w32(VBit<8, true>(((VBit<48, true>(((VBit<15, true>(-0x2B32) * R.val) - (VBit<15, false>(0x54CCu) * G.val))) + (VBit<16, false>(0x8000u) * B.val)) >> 0x10u))).val);
        Cr = (Cr.val + tlx_primitive::w32(VBit<8, true>(((((VBit<16, false>(0x8000u) * R.val) - VBit<48, true>((VBit<15, false>(0x6B2Eu) * G.val))) - VBit<48, true>((VBit<13, false>(0x14D0u) * B.val))) >> 0x10u))).val);
        Cb_out = Cb.val;
        Cr_out = Cr.val;
        return DU;
    }

    inline void jpeg_fdct(tlx_primitive::w32 i0, tlx_primitive::w32 i1, tlx_primitive::w32 i2, tlx_primitive::w32 i3, tlx_primitive::w32 i4, tlx_primitive::w32 i5, tlx_primitive::w32 i6, tlx_primitive::w32 i7, tlx_primitive::w32& o0, tlx_primitive::w32& o1, tlx_primitive::w32& o2, tlx_primitive::w32& o3, tlx_primitive::w32& o4, tlx_primitive::w32& o5, tlx_primitive::w32& o6, tlx_primitive::w32& o7) {
        VBit<32, false> tmp0;
        VBit<32, false> tmp1;
        VBit<32, false> tmp2;
        VBit<32, false> tmp3;
        VBit<32, false> tmp4;
        VBit<32, false> tmp5;
        VBit<32, false> tmp6;
        VBit<32, false> tmp7;
        VBit<32, false> tmp10;
        VBit<32, false> tmp11;
        VBit<32, false> tmp12;
        VBit<32, false> tmp13;
        VBit<32, false> z1;
        VBit<32, false> z2;
        VBit<32, false> z3;
        VBit<32, false> z4;
        VBit<32, false> z5;
        VBit<32, false> z11;
        VBit<32, false> z13;
        tmp0 = VBit<32, false>((i0.val + i7.val));
        tmp7 = VBit<32, false>((i0.val - i7.val));
        tmp1 = VBit<32, false>((i1.val + i6.val));
        tmp6 = VBit<32, false>((i1.val - i6.val));
        tmp2 = VBit<32, false>((i2.val + i5.val));
        tmp5 = VBit<32, false>((i2.val - i5.val));
        tmp3 = VBit<32, false>((i3.val + i4.val));
        tmp4 = VBit<32, false>((i3.val - i4.val));
        z1 = VBit<32, false>(((((tmp1 - tmp2) + (tmp0 - tmp3)) * VBit<32, false>(0xB5u)) >> 0x8u));
        z5 = VBit<32, false>(((((tmp4 + tmp5) - (tmp6 + tmp7)) * VBit<32, false>(0x62u)) >> 0x8u));
        z2 = VBit<32, false>(((((tmp4 + tmp5) * VBit<32, false>(0x8Bu)) >> 0x8u) + VBit<64, false>(z5)));
        z4 = VBit<32, false>(((((tmp6 + tmp7) * VBit<32, false>(0x14Eu)) >> 0x8u) + VBit<64, false>(z5)));
        z3 = VBit<32, false>((((tmp5 + tmp6) * VBit<32, false>(0xB5u)) >> 0x8u));
        z11 = (tmp7 + z3);
        z13 = (tmp7 - z3);
        o0 = tlx_primitive::w32(((tmp0 + tmp3) + (tmp1 + tmp2))).val;
        o4 = tlx_primitive::w32(((tmp0 + tmp3) - (tmp1 + tmp2))).val;
        o2 = tlx_primitive::w32(((tmp0 - tmp3) + z1)).val;
        o6 = tlx_primitive::w32(((tmp0 - tmp3) - z1)).val;
        o5 = tlx_primitive::w32((z13 + z2)).val;
        o3 = tlx_primitive::w32((z13 - z2)).val;
        o1 = tlx_primitive::w32((z11 + z4)).val;
        o7 = tlx_primitive::w32((z11 - z4)).val;
    }

#ifdef __checkers__
    class banks {
    public:
        banks(tlx* p) : mdl(p) {}

#ifdef __checkers__
        void process_result() {
            mdl->dmw_rd.write(tlx_primitive::w32(concat(mdl->dm0_rd.read().val, mdl->dm1_rd.read().val, mdl->dm2_rd.read().val, mdl->dm3_rd.read().val)));
            if ((mdl->banks__ld0_ff.pdgValue()).to_bool()) {
                mdl->dmh_rd.write(tlx_primitive::w16(concat(mdl->dm0_rd.read().val, mdl->dm1_rd.read().val)));
            } else if ((mdl->banks__ld2_ff.pdgValue()).to_bool()) {
                mdl->dmh_rd.write(tlx_primitive::w16(concat(mdl->dm2_rd.read().val, mdl->dm3_rd.read().val)));
            }
            if ((mdl->banks__ld0_ff.pdgValue()).to_bool()) {
                mdl->dmb_rd.write(mdl->dm0_rd.read());
            } else if ((mdl->banks__ld1_ff.pdgValue()).to_bool()) {
                mdl->dmb_rd.write(mdl->dm1_rd.read());
            } else if ((mdl->banks__ld2_ff.pdgValue()).to_bool()) {
                mdl->dmb_rd.write(mdl->dm2_rd.read());
            } else if ((mdl->banks__ld3_ff.pdgValue()).to_bool()) {
                mdl->dmb_rd.write(mdl->dm3_rd.read());
            }
        }

#endif // __checkers__

        void process_request();

#ifdef __checkers__
        void update_status() {
            mdl->banks__ld0_ff.update(1);
            mdl->banks__ld1_ff.update(1);
            mdl->banks__ld2_ff.update(1);
            mdl->banks__ld3_ff.update(1);
        }

#endif // __checkers__

#ifdef __checkers__
        void clear_update() {
            mdl->banks__ld0_ff.clear_update();
            mdl->banks__ld1_ff.clear_update();
            mdl->banks__ld2_ff.clear_update();
            mdl->banks__ld3_ff.clear_update();
        }

#endif // __checkers__

        void dbg_access_DMb(unsigned a, tlx_primitive::w08& v, bool read) {
            if ((VBit<2, false>(VBit<32, false>(a).extract(0x1u, 0x0u)) == 0x0u)) {
                dbg_access_DM0((VBit<30, false>(VBit<32, false>(a).extract(0x1Fu, 0x2u))).to_unsigned(), v, read);
            } else if ((VBit<2, false>(VBit<32, false>(a).extract(0x1u, 0x0u)) == 0x1u)) {
                dbg_access_DM1((VBit<30, false>(VBit<32, false>(a).extract(0x1Fu, 0x2u))).to_unsigned(), v, read);
            } else if ((VBit<2, false>(VBit<32, false>(a).extract(0x1u, 0x0u)) == 0x2u)) {
                dbg_access_DM2((VBit<30, false>(VBit<32, false>(a).extract(0x1Fu, 0x2u))).to_unsigned(), v, read);
            } else if ((VBit<2, false>(VBit<32, false>(a).extract(0x1u, 0x0u)) == 0x3u)) {
                dbg_access_DM3((VBit<30, false>(VBit<32, false>(a).extract(0x1Fu, 0x2u))).to_unsigned(), v, read);
            }
        }

        void dbg_access_DM0(AddressType dbg_addr, tlx_primitive::w08& dbg_val, bool dbg_read);

        void dbg_access_DM1(AddressType dbg_addr, tlx_primitive::w08& dbg_val, bool dbg_read);

        void dbg_access_DM2(AddressType dbg_addr, tlx_primitive::w08& dbg_val, bool dbg_read);

        void dbg_access_DM3(AddressType dbg_addr, tlx_primitive::w08& dbg_val, bool dbg_read);

    private:
        tlx* mdl;
    };

#endif // __checkers__

} // namespace tlx_primitive
#endif
