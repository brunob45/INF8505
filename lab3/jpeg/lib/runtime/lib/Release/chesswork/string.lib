
// File generated by noodle version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:21 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I.. -I../isg -I../runtime/include -I../../io_modules -I/CMC/tools/synopsys/asip_designer_vN-2018.03-SP3/linux64/chessdir/../examples/io_modules -D__tct_patch__=300 -itlx_chess.h +wlib/Release/chesswork ../runtime/src/string.c tlx

toolrelease _18R1;

// void *memcpy(void * restrict, const void * restrict, size_t)
F__Pvoid_memcpy___Pvoid___Pvoid___uint : user_defined, called {
    fnm : "memcpy" 'void *memcpy(void * restrict, const void * restrict, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void *memmove(void *, const void *, size_t)
F__Pvoid_memmove___Pvoid___Pvoid___uint : user_defined, called {
    fnm : "memmove" 'void *memmove(void *, const void *, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strcpy(char * restrict, const char * restrict)
F__P__cchar_strcpy___P__cchar___P__cchar : user_defined, called {
    fnm : "strcpy" 'char *strcpy(char * restrict, const char * restrict)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strncpy(char * restrict, const char * restrict, size_t)
F__P__cchar_strncpy___P__cchar___P__cchar___uint : user_defined, called {
    fnm : "strncpy" 'char *strncpy(char * restrict, const char * restrict, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strcat(char * restrict, const char * restrict)
F__P__cchar_strcat___P__cchar___P__cchar : user_defined, called {
    fnm : "strcat" 'char *strcat(char * restrict, const char * restrict)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strncat(char * restrict, const char * restrict, size_t)
F__P__cchar_strncat___P__cchar___P__cchar___uint : user_defined, called {
    fnm : "strncat" 'char *strncat(char * restrict, const char * restrict, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int memcmp(const void *, const void *, size_t)
F__sint_memcmp___Pvoid___Pvoid___uint : user_defined, called {
    fnm : "memcmp" 'int memcmp(const void *, const void *, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int strcmp(const char *, const char *)
F__sint_strcmp___P__cchar___P__cchar : user_defined, called {
    fnm : "strcmp" 'int strcmp(const char *, const char *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// int strncmp(const char *, const char *, size_t)
F__sint_strncmp___P__cchar___P__cchar___uint : user_defined, called {
    fnm : "strncmp" 'int strncmp(const char *, const char *, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// size_t strxfrm(char * restrict, const char * restrict, size_t)
F__uint_strxfrm___P__cchar___P__cchar___uint : user_defined, called {
    fnm : "strxfrm" 'size_t strxfrm(char * restrict, const char * restrict, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void *memchr(const void *, int, size_t)
F__Pvoid_memchr___Pvoid___sint___uint : user_defined, called {
    fnm : "memchr" 'void *memchr(const void *, int, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strchr(const char *, int)
F__P__cchar_strchr___P__cchar___sint : user_defined, called {
    fnm : "strchr" 'char *strchr(const char *, int)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// size_t strcspn(const char *, const char *)
F__uint_strcspn___P__cchar___P__cchar : user_defined, called {
    fnm : "strcspn" 'size_t strcspn(const char *, const char *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strpbrk(const char *, const char *)
F__P__cchar_strpbrk___P__cchar___P__cchar : user_defined, called {
    fnm : "strpbrk" 'char *strpbrk(const char *, const char *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strrchr(const char *, int)
F__P__cchar_strrchr___P__cchar___sint : user_defined, called {
    fnm : "strrchr" 'char *strrchr(const char *, int)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// size_t strspn(const char *, const char *)
F__uint_strspn___P__cchar___P__cchar : user_defined, called {
    fnm : "strspn" 'size_t strspn(const char *, const char *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strstr(const char *, const char *)
F__P__cchar_strstr___P__cchar___P__cchar : user_defined, called {
    fnm : "strstr" 'char *strstr(const char *, const char *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strtok(char * restrict, const char * restrict)
F__P__cchar_strtok___P__cchar___P__cchar : user_defined, called {
    fnm : "strtok" 'char *strtok(char * restrict, const char * restrict)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// void *memset(void *, int, size_t)
F__Pvoid_memset___Pvoid___sint___uint : user_defined, called {
    fnm : "memset" 'void *memset(void *, int, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[2] R[3] R[4] R[5] R[6] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// char *strerror(int)
F__P__cchar_strerror___sint : user_defined, called {
    fnm : "strerror" 'char *strerror(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

// size_t strlen(const char *)
F__uint_strlen___P__cchar : user_defined, called {
    fnm : "strlen" 'size_t strlen(const char *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[2] R[3] R[4] );
    frm : ( );
    llv : 1 0 0 0 0 ;
}

