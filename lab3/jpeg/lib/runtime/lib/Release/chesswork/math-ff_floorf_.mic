
// File generated by mist version N-2018.03#7d02e3ca79#180723, Sun Apr 14 19:31:34 2019
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i math-ff_floorf_ tlx


// m3;   next: m54, jump target: m96 (next offset: 10)
000000  1 0  "01010100100000110000000000000000"   // R[3] = R[4]; 
000001  1 0  "10011000100001000000000000010111"   // (R[4]) = _rs_const_1_B1 (R[4]); 
000002  1 0  "00001000001000010000000000001100"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (12,SP,SP); 
000003  1 0  "00010000100001000000000011111111"   // (R[4]) = _ad_const_1_B1 (R[4]); 
000004  1 0  "00001000100001001111111110000001"   // (R[4],MC) = _pl_const_1_B1 (R[4]); 
000005  1 0  "10101000001001001111111111111100"   // (__spill_DMw[-4]) = stack_store_bndl_B3 (R[4],SP,-4); 
000006  1 0  "10001100100001000000000000010111"   // (R[4]) = _lt_const_2_B1 (R[4]); 
000007  1 0  "00100000100000000000000000001110"   // () = nez_br_const_1_B1 (R[4],14); 
000008  1 0  "10101000001000101111111111110100"   // (__spill_DMw[-12]) = stack_store_bndl_B3 (R[2],SP,-12); 
000009  1 0  "10101000001000111111111111111000"   // (__spill_DMw[-8]) = stack_store_bndl_B3 (R[3],SP,-8); 

// m54;   next: m100, jump target: m65 (next offset: 16)
000010  1 0  "00000000000000000000000000000000"  .swstall "dm_addr_conflict"   // () = vd_nop_ID (); 
000011  1 0  "01010000001001001111111111111100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000012  1 0  "10010100100001000000000010000000"   // (R[4]) = _ne_const_1_B1 (R[4]); 
000013  1 0  "00100000100000000000000000111100"   // () = nez_br_const_1_B1 (R[4],60); 
000014  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000015  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m100;   next: m101 (next offset: 19)
000016  1 0  "01010100011001000000000000000000"   // R[4] = R[3]; 
000017  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000018  1 0  "01010100100001010000000000000000"   // R[5] = R[4]; 

// m101 subroutine call;   next: m60 (next offset: 19)

// m60 (next offset: 23)
000019  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000020  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000021  1 0  "00001000001000011111111111110100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-12,SP,SP); 
000022  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m96;   next: m97 (next offset: 27)
000023  1 0  "01001000000001000111000101001001"   // (R[4]) = lhi_const_1_B1 (29001); 
000024  1 0  "01010000001001011111111111111000"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000025  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000026  1 0  "01010100100001001111001011001010"   // (R[4]) = w32_const_bor_1_B1 (R[4],62154); 

// m97 subroutine call;   next: m94 (next offset: 27)

// m94;   next: m87 (next offset: 30)
000027  1 0  "01010100011001010000000000000000"   // R[5] = R[3]; 
000028  1 0  "00101000000000000000000000000000"   // (LR) = jal_const_1_B1 (0); 
000029  1 0  "01001000000001000000000000000000"   // (R[4]) = const_4_B3 (); 

// m87 subroutine call;   next: m91 (next offset: 30)

// m91;   next: m74, jump target: m108 (next offset: 36)
000030  1 0  "01010000001001011111111111111100"   // (R[5]) = stack_load_bndl_B3 (__spill_DMw[-4],SP,-4); 
000031  1 0  "00000000101000000011100000010011"   // (R[7]) = _lt_const_1_B2 (R[5]); 
000032  1 0  "01010100011001100000000000000000"   // R[6] = R[3]; 
000033  1 0  "00100000111000000000000000011001"   // () = nez_br_const_1_B1 (R[7],25); 
000034  1 0  "01010000001000111111111111111000"   // (R[3]) = stack_load_bndl_B3 (__spill_DMw[-8],SP,-8); 
000035  1 0  "00000000011000000010000000001100"   // (R[4]) = _ge_const_1_B2 (R[3]); 

// m74;   next: m35, jump target: m36 (next offset: 43)
000036  1 0  "01001000000001110000000001111111"   // (R[7]) = lhi_const_1_B1 (127); 
000037  1 0  "01010100111001111111111111111111"   // (R[7]) = w32_const_bor_1_B1 (R[7],65535); 
000038  1 0  "00000000111001010011100000010111"   // (R[7]) = _rs_2_B1 (R[7],R[5]); 
000039  1 0  "00000000011001110100000000000011"   // (R[8]) = _ad_1_B1 (R[3],R[7]); 
000040  1 0  "00100001000000000000000000000101"   // () = nez_br_const_2_B1 (R[8],5); 
000041  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000042  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m35 (next offset: 47)
000043  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000044  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000045  1 0  "00001000001000011111111111110100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-12,SP,SP); 
000046  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m36;   next: m112 (next offset: 47)

// m112;   next: m106, jump target: m65 (next offset: 50)
000047  1 0  "00010100110000000000000000011010"   // () = br_eqz_const_1_B1 (R[6],26); 
000048  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000049  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m106;   next: m45, jump target: m46 (next offset: 53)
000050  1 0  "00100000100000000000000000000100"   // () = nez_br_const_1_B1 (R[4],4); 
000051  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000052  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m45;   next: m80 (next offset: 56)
000053  1 0  "01001000000001000000000010000000"   // (R[4]) = const_2_B1 (); 
000054  1 0  "00000000100001010010000000010111"   // (R[4]) = _rs_1_B1 (R[4],R[5]); 
000055  1 0  "00000000011001000001100000000001"   // (R[3],) = _pl_1_B1 (R[3],R[4]); 

// m46;   next: m80 (next offset: 56)

// m80, jump target: m65 (next offset: 60)
000056  1 0  "00001000000001001111111111111111"   // (R[4]) = const_1_B1 (); 
000057  1 0  "00000000100001110010000000011010"   // (R[4]) = _er_1_B1 (R[7],R[4]); 
000058  1 0  "00100100000000000000000000010000"   // () = j_const_1_B1 (16); 
000059  1 0  "00000000011001000001100000000011"   // (R[3]) = _ad_1_B1 (R[3],R[4]); 

// m108;   next: m105, jump target: m27 (next offset: 63)
000060  1 0  "00010100110000000000000000001101"   // () = br_eqz_const_1_B1 (R[6],13); 
000061  1 0  "01001000000001010000000000000000"   // (R[5]) = const_4_B3 (); 
000062  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m105;   next: m69, jump target: m18 (next offset: 66)
000063  1 0  "00100000100000000000000000001001"   // () = nez_br_const_1_B1 (R[4],9); 
000064  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000065  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m69;   next: m23, jump target: m24 (next offset: 72)
000066  1 0  "01001000000001000111111111111111"   // (R[4]) = lhi_const_1_B1 (32767); 
000067  1 0  "01010100100001001111111111111111"   // (R[4]) = w32_const_bor_1_B1 (R[4],65535); 
000068  1 0  "00000000011001000010000000000011"   // (R[4]) = _ad_1_B1 (R[3],R[4]); 
000069  1 0  "00010100100000000000000000000010"   // () = br_eqz_const_1_B1 (R[4],2); 
000070  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 
000071  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

// m23;   next: m109 (next offset: 73)
000072  1 0  "01001000000000111011111110000000"   // (R[3]) = const_3_B1 (); 

// m24;   next: m109 (next offset: 73)

// m109;   next: m110 (next offset: 74)
000073  1 0  "01010100011001010000000000000000"   // R[5] = R[3]; 

// m18;   next: m110 (next offset: 74)

// m110;   next: m65 (next offset: 75)
000074  1 0  "01010100101000110000000000000000"   // R[3] = R[5]; 

// m27;   next: m65 (next offset: 75)

// m65 (next offset: /)
000075  1 0  "01010000001001001111111111110100"   // (R[4]) = stack_load_bndl_B3 (__spill_DMw[-12],SP,-12); 
000076  1 0  "00110000100000000000000000000000"   // () = __rts_jr_1_B1 (R[4]); 
000077  1 0  "00001000001000011111111111110100"   // (SP,MC) = wr_res_reg__pl_rd_res_reg_const_1_B1 (-12,SP,SP); 
000078  1 0  "00000000000000000000000000000000"  .swstall "delay_slot"   // () = vd_nop_ID (); 

